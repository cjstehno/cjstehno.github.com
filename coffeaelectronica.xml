<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.1.3" created="2011-06-26 14:07" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>CoffeaElectronica</title>
	<link>http://coffeaelectronica.com/blog</link>
	<description>A smooth well-coded brew.</description>
	<pubDate>Sun, 26 Jun 2011 14:07:47 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://coffeaelectronica.com/blog</wp:base_site_url>
	<wp:base_blog_url>http://coffeaelectronica.com/blog</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>cjstehno</wp:author_login><wp:author_email>chris.stehno@gmail.com</wp:author_email><wp:author_display_name><![CDATA[Christopher J. Stehno]]></wp:author_display_name><wp:author_first_name><![CDATA[Christopher J.]]></wp:author_first_name><wp:author_last_name><![CDATA[Stehno]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>humor</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Humor]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>9</wp:term_id><wp:category_nicename>programming</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Programming]]></wp:cat_name><wp:category_description><![CDATA[Posts related to programming topics.]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>20</wp:term_id><wp:category_nicename>technology</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Technology]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug>ajax</wp:tag_slug><wp:tag_name><![CDATA[Ajax]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>android</wp:tag_slug><wp:tag_name><![CDATA[Android]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug>annotations</wp:tag_slug><wp:tag_name><![CDATA[Annotations]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug>ant</wp:tag_slug><wp:tag_name><![CDATA[Ant]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>building</wp:tag_slug><wp:tag_name><![CDATA[Building]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>calendar</wp:tag_slug><wp:tag_name><![CDATA[Calendar]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug>clojure</wp:tag_slug><wp:tag_name><![CDATA[Clojure]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>comparator</wp:tag_slug><wp:tag_name><![CDATA[Comparator]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>coverage</wp:tag_slug><wp:tag_name><![CDATA[Coverage]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug>css</wp:tag_slug><wp:tag_name><![CDATA[CSS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>date</wp:tag_slug><wp:tag_name><![CDATA[Date]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>development</wp:tag_slug><wp:tag_name><![CDATA[Development]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>easymock</wp:tag_slug><wp:tag_name><![CDATA[EasyMock]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>45</wp:term_id><wp:tag_slug>eclipse</wp:tag_slug><wp:tag_name><![CDATA[Eclipse]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>71</wp:term_id><wp:tag_slug>extjs</wp:tag_slug><wp:tag_name><![CDATA[ExtJS]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug>generics</wp:tag_slug><wp:tag_name><![CDATA[Generics]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>git</wp:tag_slug><wp:tag_name><![CDATA[Git]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>google</wp:tag_slug><wp:tag_name><![CDATA[Google]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>66</wp:term_id><wp:tag_slug>grails</wp:tag_slug><wp:tag_name><![CDATA[Grails]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>4</wp:term_id><wp:tag_slug>groovy</wp:tag_slug><wp:tag_name><![CDATA[Groovy]]></wp:tag_name><wp:tag_description><![CDATA[Related to Groovy programming.]]></wp:tag_description></wp:tag>
	<wp:tag><wp:term_id>69</wp:term_id><wp:tag_slug>hosting</wp:tag_slug><wp:tag_name><![CDATA[Hosting]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>5</wp:term_id><wp:tag_slug>html</wp:tag_slug><wp:tag_name><![CDATA[HTML]]></wp:tag_name><wp:tag_description><![CDATA[Related to HTML development.]]></wp:tag_description></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>humor</wp:tag_slug><wp:tag_name><![CDATA[Humor]]></wp:tag_name><wp:tag_description><![CDATA[Something funny.]]></wp:tag_description></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>ide</wp:tag_slug><wp:tag_name><![CDATA[IDE]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>59</wp:term_id><wp:tag_slug>intellij</wp:tag_slug><wp:tag_name><![CDATA[IntelliJ]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>interview</wp:tag_slug><wp:tag_name><![CDATA[Interview]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>62</wp:term_id><wp:tag_slug>ivy</wp:tag_slug><wp:tag_name><![CDATA[Ivy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>jackrabbit</wp:tag_slug><wp:tag_name><![CDATA[Jackrabbit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>3</wp:term_id><wp:tag_slug>java</wp:tag_slug><wp:tag_name><![CDATA[Java]]></wp:tag_name><wp:tag_description><![CDATA[Related to Java programming.]]></wp:tag_description></wp:tag>
	<wp:tag><wp:term_id>6</wp:term_id><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[JavaScript]]></wp:tag_name><wp:tag_description><![CDATA[Related to JavaScript programming.]]></wp:tag_description></wp:tag>
	<wp:tag><wp:term_id>55</wp:term_id><wp:tag_slug>jcr</wp:tag_slug><wp:tag_name><![CDATA[JCR]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>jdbc</wp:tag_slug><wp:tag_name><![CDATA[JDBC]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>43</wp:term_id><wp:tag_slug>jetty</wp:tag_slug><wp:tag_name><![CDATA[Jetty]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>jmock</wp:tag_slug><wp:tag_name><![CDATA[JMock]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug>jndi</wp:tag_slug><wp:tag_name><![CDATA[JNDI]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug>jquery</wp:tag_slug><wp:tag_name><![CDATA[JQuery]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>jsp</wp:tag_slug><wp:tag_name><![CDATA[JSP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>linux</wp:tag_slug><wp:tag_name><![CDATA[Linux]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>logging</wp:tag_slug><wp:tag_name><![CDATA[Logging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug>media</wp:tag_slug><wp:tag_name><![CDATA[Media]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>mocking</wp:tag_slug><wp:tag_name><![CDATA[Mocking]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>mockito</wp:tag_slug><wp:tag_name><![CDATA[Mockito]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>72</wp:term_id><wp:tag_slug>mockup</wp:tag_slug><wp:tag_name><![CDATA[mockup]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug>multipart</wp:tag_slug><wp:tag_name><![CDATA[Multipart]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>67</wp:term_id><wp:tag_slug>nook</wp:tag_slug><wp:tag_name><![CDATA[nook]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug>patterns</wp:tag_slug><wp:tag_name><![CDATA[Patterns]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug>perforce</wp:tag_slug><wp:tag_name><![CDATA[Perforce]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>61</wp:term_id><wp:tag_slug>php</wp:tag_slug><wp:tag_name><![CDATA[Php]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>preferences</wp:tag_slug><wp:tag_name><![CDATA[Preferences]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>68</wp:term_id><wp:tag_slug>projects</wp:tag_slug><wp:tag_name><![CDATA[Projects]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug>prototype</wp:tag_slug><wp:tag_name><![CDATA[Prototype]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug>puzzle</wp:tag_slug><wp:tag_name><![CDATA[Puzzle]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>65</wp:term_id><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[Python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug>regex</wp:tag_slug><wp:tag_name><![CDATA[Regex]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>64</wp:term_id><wp:tag_slug>review</wp:tag_slug><wp:tag_name><![CDATA[Review]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>rmi</wp:tag_slug><wp:tag_name><![CDATA[RMI]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>ruby</wp:tag_slug><wp:tag_name><![CDATA[Ruby]]></wp:tag_name><wp:tag_description><![CDATA[Related to Ruby programming.]]></wp:tag_description></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug>scm</wp:tag_slug><wp:tag_name><![CDATA[SCM]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>70</wp:term_id><wp:tag_slug>servers</wp:tag_slug><wp:tag_name><![CDATA[Servers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>servlet</wp:tag_slug><wp:tag_name><![CDATA[Servlet]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>spring</wp:tag_slug><wp:tag_name><![CDATA[Spring]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>storage</wp:tag_slug><wp:tag_name><![CDATA[Storage]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>testing</wp:tag_slug><wp:tag_name><![CDATA[Testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>thoughts</wp:tag_slug><wp:tag_name><![CDATA[Thoughts]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>tidbits</wp:tag_slug><wp:tag_name><![CDATA[Tidbits]]></wp:tag_name><wp:tag_description><![CDATA[Tips and Tricks and other little Tidbits.]]></wp:tag_description></wp:tag>
	<wp:tag><wp:term_id>63</wp:term_id><wp:tag_slug>ubuntu</wp:tag_slug><wp:tag_name><![CDATA[Ubuntu]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>wtf</wp:tag_slug><wp:tag_name><![CDATA[WTF]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>xml</wp:tag_slug><wp:tag_name><![CDATA[Xml]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=3.1.3</generator>

	<item>
		<title>chris_stehno_logo</title>
		<link>http://coffeaelectronica.com/blog/about/chris_stehno_logo/</link>
		<pubDate>Sun, 19 Jul 2009 23:49:02 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/07/chris_stehno_logo.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2009-07-19 18:49:02</wp:post_date>
		<wp:post_date_gmt>2009-07-19 23:49:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>chris_stehno_logo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/07/chris_stehno_logo.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/07/chris_stehno_logo.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"100";s:6:"height";s:3:"102";s:14:"hwstring_small";s:22:"height='96' width='94'";s:4:"file";s:29:"2009/07/chris_stehno_logo.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>tracfone</title>
		<link>http://coffeaelectronica.com/blog/2009/08/android-love/tracfone/</link>
		<pubDate>Sat, 08 Aug 2009 14:56:52 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/tracfone.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[TracFone]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date>2009-08-08 09:56:52</wp:post_date>
		<wp:post_date_gmt>2009-08-08 14:56:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tracfone</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>174</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/tracfone.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/tracfone.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"200";s:6:"height";s:3:"226";s:14:"hwstring_small";s:22:"height='96' width='84'";s:4:"file";s:20:"2009/08/tracfone.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"tracfone-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mytouch</title>
		<link>http://coffeaelectronica.com/blog/2009/08/android-love/mytouch/</link>
		<pubDate>Sat, 08 Aug 2009 14:59:39 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/mytouch.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[T-Mobile myTouch]]></excerpt:encoded>
		<wp:post_id>177</wp:post_id>
		<wp:post_date>2009-08-08 09:59:39</wp:post_date>
		<wp:post_date_gmt>2009-08-08 14:59:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mytouch</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>174</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/mytouch.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/mytouch.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"200";s:6:"height";s:3:"339";s:14:"hwstring_small";s:22:"height='96' width='56'";s:4:"file";s:19:"2009/08/mytouch.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:19:"mytouch-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:19:"mytouch-176x300.png";s:5:"width";s:3:"176";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2009-08-06 06.38.15</title>
		<link>http://coffeaelectronica.com/blog/2009/08/android-love/2009-08-06-06-38-15/</link>
		<pubDate>Sat, 08 Aug 2009 15:20:10 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/2009-08-06-06.38.15.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[My first photo with the myTouch.]]></content:encoded>
		<excerpt:encoded><![CDATA[Photo from myTouch]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date>2009-08-08 10:20:10</wp:post_date>
		<wp:post_date_gmt>2009-08-08 15:20:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2009-08-06-06-38-15</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>174</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/2009-08-06-06.38.15.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/2009-08-06-06.38.15.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"400";s:6:"height";s:3:"533";s:14:"hwstring_small";s:22:"height='96' width='72'";s:4:"file";s:31:"2009/08/2009-08-06-06.38.15.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:31:"2009-08-06-06.38.15-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:31:"2009-08-06-06.38.15-225x300.jpg";s:5:"width";s:3:"225";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:19:"T-Mobile myTouch 3G";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1249558695";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>green-bar</title>
		<link>http://coffeaelectronica.com/blog/?attachment_id=188</link>
		<pubDate>Sat, 08 Aug 2009 15:37:52 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/green-bar.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date>2009-08-08 10:37:52</wp:post_date>
		<wp:post_date_gmt>2009-08-08 15:37:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>green-bar</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/green-bar.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/green-bar.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"208";s:6:"height";s:3:"124";s:14:"hwstring_small";s:23:"height='76' width='128'";s:4:"file";s:21:"2009/08/green-bar.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:21:"green-bar-150x124.png";s:5:"width";s:3:"150";s:6:"height";s:3:"124";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>testing-separation</title>
		<link>http://coffeaelectronica.com/blog/?attachment_id=192</link>
		<pubDate>Sat, 08 Aug 2009 15:47:40 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/testing-separation.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Separation of production source and test source]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date>2009-08-08 10:47:40</wp:post_date>
		<wp:post_date_gmt>2009-08-08 15:47:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testing-separation</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/testing-separation.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/testing-separation.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"403";s:6:"height";s:3:"287";s:14:"hwstring_small";s:23:"height='91' width='128'";s:4:"file";s:30:"2009/08/testing-separation.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:30:"testing-separation-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:30:"testing-separation-300x213.png";s:5:"width";s:3:"300";s:6:"height";s:3:"213";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>testing-runineclipse</title>
		<link>http://coffeaelectronica.com/blog/?attachment_id=196</link>
		<pubDate>Sat, 08 Aug 2009 16:04:21 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/testing-runineclipse.png</guid>
		<description></description>
		<content:encoded><![CDATA[Results of running the Eclipse JUnit test runner on some test code.]]></content:encoded>
		<excerpt:encoded><![CDATA[Eclipse JUnit Runner Results]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date>2009-08-08 11:04:21</wp:post_date>
		<wp:post_date_gmt>2009-08-08 16:04:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testing-runineclipse</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/testing-runineclipse.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/testing-runineclipse.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"406";s:6:"height";s:3:"519";s:14:"hwstring_small";s:22:"height='96' width='75'";s:4:"file";s:32:"2009/08/testing-runineclipse.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:32:"testing-runineclipse-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:32:"testing-runineclipse-234x300.png";s:5:"width";s:3:"234";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>testing-coverage</title>
		<link>http://coffeaelectronica.com/blog/?attachment_id=205</link>
		<pubDate>Sat, 08 Aug 2009 16:43:56 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/testing-coverage.png</guid>
		<description></description>
		<content:encoded><![CDATA[Results of running EclEmma coverage tool in Eclipse]]></content:encoded>
		<excerpt:encoded><![CDATA[Coverage View in Eclipse]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date>2009-08-08 11:43:56</wp:post_date>
		<wp:post_date_gmt>2009-08-08 16:43:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testing-coverage</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/testing-coverage.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/testing-coverage.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"401";s:6:"height";s:3:"559";s:14:"hwstring_small";s:22:"height='95' width='68'";s:4:"file";s:28:"2009/08/testing-coverage.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"testing-coverage-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:28:"testing-coverage-215x300.png";s:5:"width";s:3:"215";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>site-snap</title>
		<link>http://coffeaelectronica.com/blog/2009/08/goin-mobile/site-snap/</link>
		<pubDate>Thu, 20 Aug 2009 01:24:44 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/site-snap.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Mobile version of this site.]]></excerpt:encoded>
		<wp:post_id>344</wp:post_id>
		<wp:post_date>2009-08-19 20:24:44</wp:post_date>
		<wp:post_date_gmt>2009-08-20 01:24:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>site-snap</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>343</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/site-snap.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/08/site-snap.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"320";s:6:"height";s:3:"480";s:14:"hwstring_small";s:22:"height='96' width='64'";s:4:"file";s:21:"2009/08/site-snap.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:21:"site-snap-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:21:"site-snap-200x300.png";s:5:"width";s:3:"200";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rockbox_view</title>
		<link>http://coffeaelectronica.com/blog/2009/04/rockbox/rockbox_view/</link>
		<pubDate>Tue, 06 Oct 2009 12:37:17 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/10/rockbox_view.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[RockBox Nano]]></excerpt:encoded>
		<wp:post_id>484</wp:post_id>
		<wp:post_date>2009-10-06 07:37:17</wp:post_date>
		<wp:post_date_gmt>2009-10-06 12:37:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rockbox_view</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>483</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/10/rockbox_view.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/rockbox_view.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"213";s:14:"hwstring_small";s:23:"height='90' width='128'";s:4:"file";s:24:"2009/10/rockbox_view.jpg";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:24:"rockbox_view-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:3:"2.8";s:6:"credit";s:0:"";s:6:"camera";s:15:"PENTAX Optio 60";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1240764538";s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"7.5";s:3:"iso";s:2:"95";s:13:"shutter_speed";s:4:"0.04";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>jack-screen-1</title>
		<link>http://coffeaelectronica.com/blog/2009/07/jackrabbit/jack-screen-1/</link>
		<pubDate>Sat, 10 Oct 2009 19:25:22 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/10/jack-screen-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Welcome screen]]></excerpt:encoded>
		<wp:post_id>492</wp:post_id>
		<wp:post_date>2009-10-10 14:25:22</wp:post_date>
		<wp:post_date_gmt>2009-10-10 19:25:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jack-screen-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>491</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/10/jack-screen-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/10/jack-screen-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"600";s:6:"height";s:3:"291";s:14:"hwstring_small";s:23:"height='62' width='128'";s:4:"file";s:25:"2009/10/jack-screen-1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:25:"jack-screen-1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:25:"jack-screen-1-300x145.png";s:5:"width";s:3:"300";s:6:"height";s:3:"145";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>jack-screen-2</title>
		<link>http://coffeaelectronica.com/blog/2009/07/jackrabbit/jack-screen-2/</link>
		<pubDate>Sat, 10 Oct 2009 19:28:00 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/07/jack-screen-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Common clients]]></excerpt:encoded>
		<wp:post_id>494</wp:post_id>
		<wp:post_date>2009-10-10 14:28:00</wp:post_date>
		<wp:post_date_gmt>2009-10-10 19:28:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jack-screen-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>491</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/07/jack-screen-2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/07/jack-screen-2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"600";s:6:"height";s:3:"240";s:14:"hwstring_small";s:23:"height='51' width='128'";s:4:"file";s:25:"2009/07/jack-screen-2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:25:"jack-screen-2-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:25:"jack-screen-2-300x120.png";s:5:"width";s:3:"300";s:6:"height";s:3:"120";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>jack-screen-3</title>
		<link>http://coffeaelectronica.com/blog/2009/07/jackrabbit/jack-screen-3/</link>
		<pubDate>Sat, 10 Oct 2009 19:29:23 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/07/jack-screen-3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[View from Nautilus]]></excerpt:encoded>
		<wp:post_id>495</wp:post_id>
		<wp:post_date>2009-10-10 14:29:23</wp:post_date>
		<wp:post_date_gmt>2009-10-10 19:29:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jack-screen-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>491</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/07/jack-screen-3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/07/jack-screen-3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"600";s:6:"height";s:3:"316";s:14:"hwstring_small";s:23:"height='67' width='128'";s:4:"file";s:25:"2009/07/jack-screen-3.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:25:"jack-screen-3-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:25:"jack-screen-3-300x158.png";s:5:"width";s:3:"300";s:6:"height";s:3:"158";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CoffeaElectronica App</title>
		<link>http://coffeaelectronica.com/blog/mobile/ceapp-code/</link>
		<pubDate>Sat, 28 Nov 2009 16:29:35 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/11/ceapp-code.png</guid>
		<description></description>
		<content:encoded><![CDATA[Provides a download link for the Android app.]]></content:encoded>
		<excerpt:encoded><![CDATA[Scan this with your phone.]]></excerpt:encoded>
		<wp:post_id>628</wp:post_id>
		<wp:post_date>2009-11-28 10:29:35</wp:post_date>
		<wp:post_date_gmt>2009-11-28 16:29:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ceapp-code</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>622</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/11/ceapp-code.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/11/ceapp-code.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"120";s:6:"height";s:3:"120";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:22:"2009/11/ceapp-code.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CoffeaElectronica App</title>
		<link>http://coffeaelectronica.com/blog/2009/11/coffea-electronica-app/ceapp-screen/</link>
		<pubDate>Sat, 28 Nov 2009 16:49:15 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/11/ceapp-screen.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[CoffeaElectronica App]]></excerpt:encoded>
		<wp:post_id>632</wp:post_id>
		<wp:post_date>2009-11-28 10:49:15</wp:post_date>
		<wp:post_date_gmt>2009-11-28 16:49:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ceapp-screen</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>630</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/11/ceapp-screen.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/11/ceapp-screen.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"320";s:6:"height";s:3:"480";s:14:"hwstring_small";s:22:"height='96' width='64'";s:4:"file";s:24:"2009/11/ceapp-screen.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:24:"ceapp-screen-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:24:"ceapp-screen-200x300.png";s:5:"width";s:3:"200";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>collapsable-div</title>
		<link>http://coffeaelectronica.com/blog/2009/12/collapsible-divs-with-jquery/collapsable-div/</link>
		<pubDate>Thu, 24 Dec 2009 00:42:19 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2009/12/collapsable-div.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>657</wp:post_id>
		<wp:post_date>2009-12-23 18:42:19</wp:post_date>
		<wp:post_date_gmt>2009-12-24 00:42:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>collapsable-div</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>656</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2009/12/collapsable-div.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2009/12/collapsable-div.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"208";s:6:"height";s:3:"188";s:14:"hwstring_small";s:23:"height='95' width='106'";s:4:"file";s:27:"2009/12/collapsable-div.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"collapsable-div-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>save-actions</title>
		<link>http://coffeaelectronica.com/blog/2010/01/my-final-answer/save-actions/</link>
		<pubDate>Fri, 15 Jan 2010 14:59:37 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2010/01/save-actions.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Eclipse Save Actions]]></excerpt:encoded>
		<wp:post_id>680</wp:post_id>
		<wp:post_date>2010-01-15 08:59:37</wp:post_date>
		<wp:post_date_gmt>2010-01-15 14:59:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>save-actions</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>679</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2010/01/save-actions.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/01/save-actions.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"400";s:6:"height";s:3:"466";s:14:"hwstring_small";s:22:"height='96' width='82'";s:4:"file";s:24:"2010/01/save-actions.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:24:"save-actions-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:24:"save-actions-257x300.png";s:5:"width";s:3:"257";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>http://ereader.com/android</title>
		<link>http://coffeaelectronica.com/blog/2010/03/android-nook-reader/barcode-ereader/</link>
		<pubDate>Sun, 14 Mar 2010 15:56:36 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2010/03/barcode-ereader.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Link to eReader App]]></excerpt:encoded>
		<wp:post_id>697</wp:post_id>
		<wp:post_date>2010-03-14 10:56:36</wp:post_date>
		<wp:post_date_gmt>2010-03-14 15:56:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>barcode-ereader</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>695</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2010/03/barcode-ereader.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/03/barcode-ereader.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"100";s:6:"height";s:3:"100";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:27:"2010/03/barcode-ereader.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ubuntu-page</title>
		<link>http://coffeaelectronica.com/blog/2010/10/from-junk-box-to-jukebox-in-a-couple-hours/ubuntu-page/</link>
		<pubDate>Sat, 16 Oct 2010 14:15:05 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2010/10/ubuntu-page.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Ubuntu.com]]></excerpt:encoded>
		<wp:post_id>777</wp:post_id>
		<wp:post_date>2010-10-16 09:15:05</wp:post_date>
		<wp:post_date_gmt>2010-10-16 14:15:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ubuntu-page</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>775</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2010/10/ubuntu-page.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/10/ubuntu-page.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"200";s:6:"height";s:2:"99";s:14:"hwstring_small";s:23:"height='63' width='128'";s:4:"file";s:23:"2010/10/ubuntu-page.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:22:"ubuntu-page-150x99.png";s:5:"width";s:3:"150";s:6:"height";s:2:"99";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>subsonic-page</title>
		<link>http://coffeaelectronica.com/blog/2010/10/from-junk-box-to-jukebox-in-a-couple-hours/subsonic-page/</link>
		<pubDate>Sat, 16 Oct 2010 14:16:42 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2010/10/subsonic-page.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Subsonic.org]]></excerpt:encoded>
		<wp:post_id>779</wp:post_id>
		<wp:post_date>2010-10-16 09:16:42</wp:post_date>
		<wp:post_date_gmt>2010-10-16 14:16:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>subsonic-page</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>775</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2010/10/subsonic-page.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/10/subsonic-page.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"200";s:6:"height";s:3:"123";s:14:"hwstring_small";s:23:"height='78' width='128'";s:4:"file";s:25:"2010/10/subsonic-page.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:25:"subsonic-page-150x123.png";s:5:"width";s:3:"150";s:6:"height";s:3:"123";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>About</title>
		<link>http://coffeaelectronica.com/blog/about/</link>
		<pubDate>Sun, 19 Jul 2009 21:11:14 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http:/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/07/chris_stehno_logo.jpg" alt="chris_stehno_logo" title="chris_stehno_logo" width="100" height="102" class="alignleft size-full wp-image-34" style="padding:4px;" />
<strong>Who am I?</strong>

My name is Christopher Stehno. I am an Senior Java Developer in the Dallas, Texas area working for a large 100-year old company. I have been doing web development and software development in one form or another since 1995. It is a hobby that became my career (and oddly enough, it is also still a hobby). I am semi-active in the open source development community, with my own projects and with bug fixes for other projects.

I lived in and around Tucson, Arizona for about 25 years, then moved to the Dallas/Ft Worth area in 2008 to start a new job and give a new city a try. DFW is great and it really feels like home.

My formal education is in Chemical Engineering (B.S.). I worked in the industry for two years and realized that it was not for me. I am a Sun Certified Programmer for the Java 2 Platform and I am currently working on the Developer Certification project, though that seems to keep being put on the back burner.

I read and watch all the science fiction that I can get my hands on.

I have been married to my beautiful and loving wife since 2001 and we have one over-pampered cat that is like a child to us.

I hope you find some of this stuff useful.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2009-07-19 14:11:14</wp:post_date>
		<wp:post_date_gmt>2009-07-19 21:11:14</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Projects</title>
		<link>http://coffeaelectronica.com/blog/projects/</link>
		<pubDate>Sun, 19 Jul 2009 23:55:04 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?page_id=39</guid>
		<description></description>
		<content:encoded><![CDATA[I have a handful of personal projects in various stages of activity. Currently, I am doing a bunch of <a href="http://coffeaelectronica.com/blog/2010/02/project-consolidation/">Project Consolidation</a> so things are a bit of a mess. I am actively working on getting everything back up to speed.

See current status information on my <a href="http://github.com/cjstehno">GitHub Profile</a>. Below is a work-in-progress project description list:

<b>Projects</b>

<ul>
<li><a href="http://github.com/cjstehno/CoffeaElectronica-App">CoffeaElectronica App</a> - the Android app for reading my blog posts (shameless self-promotion).</li>
<li><a href="http://github.com/cjstehno/codeperks">CodePerks</a> - some reusable libraries that I have compiled over the years.</li>
<li><a href="http://github.com/cjstehno/MyMdb">MyMdb</a> - My Movie Database, a simple personalized DVD indexing application written with Grails.</li>
</ul>

Most of these are pretty raw, but there is some good code in there.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2009-07-19 18:55:04</wp:post_date>
		<wp:post_date_gmt>2009-07-19 23:55:04</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>projects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Proper Care and Feeding of Your JDBC Code</title>
		<link>http://coffeaelectronica.com/blog/2004/05/proper-jdbc-code/</link>
		<pubDate>Fri, 28 May 2004 19:47:53 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[If you’ve been developing very long, you have probably run across this numerous times, but for those of you that are new to JDBC, here is a quick tip that will help you greatly in the long run (I have seen it done wrong many times).

When you perform your connection retrieval (directly or from a pool - use a pool as often as possible), make sure that you clean up your resources when you are done.

<code lang="java">
Connection conn = null;
Statement st = null;
ResultSet rs = null;
try {
    conn = getConnection();
    st = conn.createStatement();
    rs = st.executeQuery(sql);
    while(rs.next()){
            // ... work it
    }
    // minimize code here to free conn ASAP.
} catch(Exception ex){
    // log this or something
} finally {
    if(rs != null){
            try {rs.close();} catch(Exception e){}
    }
    if(st != null){
            try {st.close();} catch(Exception e){}
    }
    if(conn != null){
            try {conn.close();} catch(Exception e){}
    }
}</code>

If you follow this format as a general rule, you will end up with fewer database related problems... especially if you use connection pooling. Connections that are not disposed of properly can cause very bad things to happen in your application. 

Also, note that I mention minimizing the code within the try/catch block. You want to use your connection and clean it up as soon as possible (again, especially if you are pooling) so that the resources are not hanging around needlessly. 

Another interesting point is the set of empty catch blocks. We have all been told that empty catch blocks are a bad thing; however, I have seen this style used in pretty much every description of this code. The damn JDBC developers decided that every method should throw a <tt>SQLException</tt>, even though there is little you can really do about it when you are trying to close up the connection. That is why you just ignore them; though here I ignore them separately so that one does not affect the others.

You can clean up this code even more if you use the <a href="http://commons.apache.org/dbutils">Jakarta Commons - DbUtils API</a>:

<code lang="java">
Connection conn = null;
Statement st = null;
ResultSet rs = null;
try {
    conn = getConnection();
    st = conn.createStatement();
    rs = st.executeQuery(sql);
    while(rs.next()){
            // ... work it
    }
    // minimize code here to free conn ASAP.
} catch(Exception ex){
    // log this or something
} finally {
    DbUtils.closeQuietly(rs);
    DbUtils.closeQuietly(st);
    DbUtils.closeQuietly(conn);
}</code>

You are not really required to close the <tt>ResultSet</tt>, and the <tt>Statement</tt> if you close the <tt>Connection</tt> properly; however, it adds an extra level of assurance especially when you are using a driver that may not be fully compliant or properly implemented.

The <a href="http://springframework.org">Spring Framework</a> also provides some very useful APIs for working with JDBC such as template methods, row mappers, and callback closure-like structures, an example would be:

<code lang="java">
new ConnectionCallback(){
    public Object doInConnection(Connection conn) throws SQLException, DataAccessException {
        st = conn.createStatement();
        rs = st.executeQuery(sql);
        while(rs.next()){
            // ... work it
        }
        // minimize code here to free conn ASAP.
    }
}
</code>

There are quite a few helpful constructs in the Spring JDBC API to make JDBC interaction easier to work with.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date>2004-05-28 14:47:53</wp:post_date>
		<wp:post_date_gmt>2004-05-28 19:47:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>proper-jdbc-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jdbc"><![CDATA[JDBC]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Proxy Method Logging</title>
		<link>http://coffeaelectronica.com/blog/2004/02/proxy-method-logging/</link>
		<pubDate>Wed, 11 Feb 2004 15:05:46 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=280</guid>
		<description></description>
		<content:encoded><![CDATA[Here’s an interesting spin on logging. Say you have a service of some kind that loads in other classes dynamically such as modules or plug-ins and you want to provide a seamless debugging mode no matter what kind of logging the module developer has done. You can use a <tt>java.lang.reflect.Proxy</tt> to do your method call logging. Basically, you build a wrapper around your module that does the logging for any module.

First off, you need an interface to do this, any interface that your modules implement will work. 

<code lang="java">
public interface SomeInterface {
    public void doSomethingA(String p1, int p2);
    public String[] doSomethingB(Map map);
}</code>

Second, you will need an implementation of that interface, your module or plug-in class. This is the actual object doing the work whose method calls will be logged. 

<code lang="java">
public class SomeImplnterfaceImpl implements SomeInterface {
    public SomeImplnterfaceImpl(){}

    public void doSomethingA(String p1, int p2){
            System.out.println("doSomethingA with ("+p1+" and "+p2+")");
    }

    public String[] doSomethingB(Map map){
            System.out.println("doSomethingB with a Map: " + map);
            return((String[])map.values().toArray(new String[0]));
    }
}</code>

Both of the above items you should already have in your system. If not, in most cases, they can be easily added. 

Now we get into the good stuff. The Proxy class is an interesting little creature. It allows you to give it an array of interfaces that it is to "implement" by passing method calls to an instance of the <tt>InvocationHandler</tt> interface, which determines how the method calls are to be processed. Our proxy will simply log the method call and pass it along to the real implementation.

We’ll make a factory class to create our logging proxy. It will have one method with two arguments. The first is the interface that is to be logged, SomeInterface in our example, and the second is the implementation of that interface, <tt>SomeInterfaceImpl</tt> for our example.

<code lang="java">
public final class LoggingProxyFactory {
    private LoggingProxyFactory(){}

    public static final Object create(Class interfc,Object impl) throws Exception {
            LoggingHandler handler = new LoggingHandler(impl);
            return(Proxy.newProxyInstance(
                    impl.getClass().getClassLoader(),
                    new Class[]{interfc},
                    handler)
            );
    }
}</code>

You see that creating a proxy is pretty simple. You create a proxy instance using your interfaces, your class loader and your invocation handler. The invocation handler is where the action happens. Our <tt>InvocationHandler</tt> implementation is going to be a static inner class of the <tt>LoggingProxyFactory</tt> class. What it needs to do is logs the method calls as they come in and then pass along the call to the real implementation. Here is the code for the inner class.

<code lang="java">
private static final class LoggingHandler implements InvocationHandler {
    private Log log;
    private Object impl;

    private LoggingHandler(Object impl){
            this.impl = impl;
            this.log = LogFactory.getLog(impl.getClass());
    }

    public Object invoke(Object obj,Method method,Object[] params) throws Throwable{
            if(log.isInfoEnabled()) log.info("Entering: "+method.getName();

            if(log.isDebugEnabled()){
                    for(int p=0; p<params.length;p++){
                            log.debug(method.getName() + " Param[" + p + "]: " +
                                    params[p].toString());
                    }
            }

            Object ret = null;

            try {ret = method.invoke(impl, params);}
            catch(Exception ex){
                    if(log.isErrorEnabled()){
                            log.error(method.getName()+" Exception: "+
                                    ex.getMessage(),ex);
                    }
                    throw ex;
            }

            if(log.isDebugEnabled()) log.debug(method.getName()+" Returned: "+ret);

            if(log.isInfoEnabled()) log.info("Leaving");

            return(ret);
    }
}</code>

I am using the <a href="http://commons.apache.org/logging">Jakarta Logging API</a> for the logging in this case; however, you could use any logging API or simple standard out statements as you see fit. The main thing to notice in the code above is the invocation of the method on the implementation object.

<code lang="java">ret = method.invoke(impl, params);</code>

It is this line that passes on the method call to the real implementation. The rest of the method is logging of the entering and leaving, parameters and return value. Exceptions are also logged. To test out the proxy and see it in action, you can run the following tester app:

<code lang="java">
public class Tester {

    public static void main(String[] args){
            try {
                    Object obj = LoggingProxyFactory.create(
                            SomeInterface.class,
                            new SomeImplnterfaceImpl()
                    );
                    SomeInterface siObj = (SomeInterface)obj;
                    siObj.doSomethingA("Hello",31);

                    Map map = new HashMap();
                    map.put("a", "Some data 1");
                    map.put("b", "Some data 2");
                    map.put("c", "Some data 3");
                    map.put("d", "Some data 4");
                    siObj.doSomethingB(map);

            } catch(Exception ex){ex.printStackTrace();}
    }
}</code>

Which yields the method call results and their logging information.  

This was an interesting idea I have tossed around for a while now. It does work, though it has not been rigorously tested. If nothing else, it is a description of how to use the proxy class.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date>2004-02-11 10:05:46</wp:post_date>
		<wp:post_date_gmt>2004-02-11 15:05:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>proxy-method-logging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="logging"><![CDATA[Logging]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Worker Bean Pattern</title>
		<link>http://coffeaelectronica.com/blog/2004/05/worker-bean-pattern/</link>
		<pubDate>Sat, 29 May 2004 04:37:38 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=283</guid>
		<description></description>
		<content:encoded><![CDATA[I stumbled upon something that I thought would make a good design pattern, if no one else has already come up with it. The only name I could think of for it was the "Worker Bean Pattern"; if this is not new, someone please let me know.  

Basically the pattern consists of two classes, the Manager class and the Worker class. The Manager class is used to create semi-transient Worker classes as required for use by client objects. The example I will use to help me describe this pattern is a web-based wizard-style input form.

The Manager class is basically a loose combination of the Factory Pattern and the Singleton Pattern. There should be only one instance of a particular Manager object in the system. For my example, let’s call the Manager class <tt>FormManager</tt> and say that it is an object stored in the application scope of the server context (so that there will be only one instance per server context). The Manager class’ function is to "manage" the Worker instances. It creates them, populates their data, and destroys them with no external objects acting directly on the Worker classes in a fashion other than read-only. We can stub out the methods of our <tt>FormManager</tt> as the following:

<code lang="java">
public class FormManager {
        public FormWorker createFormWorker(){}
        public void postFormData(FormWorker fw, String name, String[] values){}
        public void destroyFormWorker(FormWorker fw){}
}</code>

where <tt>FormWorker</tt> is the Worker. The <tt>createFormWorker()</tt> method is used to create a <tt>FormWorker</tt> or use by the client when they first enter the wizard form set. This Worker could be pulled from a pool of available workers or created as needed. The client puts the <tt>FormWorker</tt> the session scope. As the pages of the wizard form are submitted, each posts its data to the <tt>postFormData()</tt> method, which processes the data and modifies the <tt>FormWorker</tt> as necessary. Once the final wizard page has been submitted and the client has no more use for the <tt>FormWorker</tt>, it is passed to the <tt>destroyFormWorker()</tt> method so that it can be disposed of, or returned to the pool.

The Worker is basically an encapsulation of data required to perform an operation in the Manager that requires more than a single step. In our example that <tt>FormWorker</tt> is stored in the user’s session so that the current state of the wizard form is maintained between pages. The Worker’s data should not be accessible outside of the Manager. It exists only as a temporary extension of the Manager. Once the client has finished with a Worker it should be disposed of by the Manager. In our example, <tt>FormWorker</tt>s could be pooled within the <tt>FormManager</tt> to minimize new object creation and increase efficiency. Our <tt>FormWorker</tt> would look something like this:

<code lang="java">
public class FormWorker {
        FormWorker(){}

        void addData(String name, String[] value){}
        String[] getData(String name){}
       
        void setUserId(String userId){}
       
        public String getUserId(){}
}</code>

You’ll notice that most of the methods have the default access, accessible to only other classes in the same package. You would want to place the <tt>FormManager</tt> and <tt>FormWorker</tt> in the same package for this to work. Another interesting means of achieving this association, if you prefer, would be to nest the <tt>FormWorker</tt> inside the <tt>FormManager</tt> as a static nested class; with a nested class, you can enforce the isolation of the worker using private methods. Let’s do that for our example and flesh out the methods a bit more for the final stub:

<code lang="java">
// Manager
public class FormManager {

        public FormWorker createFormWorker(String userId){
                FormWorker fw = checkoutWorker();
                if(fw != null){fw.setUserId(userId);}
                return(fw);
        }

        public void postFormData(FormWorker fw,String name,String[] values){
                fw.addData(name,values);
        }

        public void destroyFormWorker(FormWorker fw){
                fw.clearData();
                fw.setUserId(null);
                checkinWorker(fw);
        }

        // Worker
        public static class FormWorker {
                private String userId;
                private HashMap data;

                private FormWorker(){this.data = new HashMap();}

                private void addData(String name,String[] value){
                        data.put(name,value);
                }

                private String[] getData(String name){
                        return((String[])data.get(name));
                }

                private void clearData(){data.clear();}

                private void setUserId(String userId){
                        this.userId = userId;
                }

                public String getUserId(){return(userId);}
        }
}</code>

Obviously this is still missing some code and does not really do anything interesting; however, it should give you the basic feel of my idea. I used something similar to this in a project recently (actually, a wizard web form set) and it worked very nicely. Of course there are other ways to skin this cat. You could even simply put the "working" data into the session itself, though I tend to like things neat and tidy without having to keep track of a lot of session variables.  

This may or may not already be a pattern on someone’s list or in a book somewhere, but I did not find it. I present it in the hope that it will be useful to someone, and as I said, I am always open for comments or suggestions.  ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date>2004-05-28 23:37:38</wp:post_date>
		<wp:post_date_gmt>2004-05-29 04:37:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>worker-bean-pattern</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="patterns"><![CDATA[Patterns]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>So, You Want to Learn Java</title>
		<link>http://coffeaelectronica.com/blog/2004/05/so-you-want-to-learn-java/</link>
		<pubDate>Thu, 13 May 2004 23:55:54 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=387</guid>
		<description></description>
		<content:encoded><![CDATA[A friend of mine is a Windows developer and he wants to learn Java, which is why this is all geared towards a Windows user, that is what we both use; however, most of the information is the same across most platforms. I told him that I’d help him get started with some practical quick start tips. I decided to solidify them for posterity:

<ul>
<li>Download and install the Java 2 Standard Edition Software Development Kit (J2SE SDK) version 1.5 (or whatever the most current is) from Sun <a href="http://java.sun.com/j2se/1.4.2/download.html">Java 1.4.2 Download</a>.</li>
<li>Don’t start by jumping right into using an IDE, you will gain a much better grasp of the language if you use a simple text editor like Notepad or <a href="http://notepad-plus.sourceforge.net">Notepad++</a> and the Java command line tools (found in the bin directory of your Java installation).</li>
<li>Get a strong understanding of <a href="http://en.wikipedia.org/wiki/Object%20Oriented%20Programming">Object Oriented Programming</a> — it is one of the most important foundations of development in Java and it will reward you greatly if you continue on with Java.</li>
<li>There is a wealth of learning materials online. I would recommend going through the main set of tutorials on Sun’s <a href="http://java.sun.com/docs/books/tutorial">Java Language Totorial</a> page and then step back and look at <a href="http://java.sun.com/developer/onlineTraining/index.html">other tutorials</a> that Sun offers (all are free of course).</li>
<li>The JavaDocs for the J2SE API are one of your best friends while learning Java and even after you have mastered it. The compiled JavaDocs do not come with the installation, but they can be downloaded here: <a href="http://java.sun.com/j2se/1.4.2/download.html">http://java.sun.com/j2se/1.4.2/download.html</a>. They provide documentation for every method of every class in the core API. Read them, know them, live them.</li>
<li>There are a lot of forums and help sites out there too, look around (or come here and email me a question)</li> 
<li>One of the best ways to learn about how something is done in Java is to download some <a href="http://en.wikipedia.org/wiki/OpenSource">OpenSource</a> code and see how it does what it does. That is one of the beauties of OpenSource. Apache’s <a href="http://jakarta.apache.org/">Jakarta Project</a> has code libraries to do pretty much anything you want, and most of it is well-written and documented.</li>
<li>Once you have gotten good with your text editor and command line tools and have written a few simple applications, download one of the popular Java IDEs, such as <a href="http://eclipse.org">Eclipse</a> or <a href="http://netbeans.org">NetBeans</a>. Don’t purchase an IDE, that’s just stupid, and in general, they are no better than the free ones.</li>
<ul>

Obviously, this is not an all inclusive list; however, if you follow these steps, you should get a good start into the Java language. Good luck!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>387</wp:post_id>
		<wp:post_date>2004-05-13 18:55:54</wp:post_date>
		<wp:post_date_gmt>2004-05-13 23:55:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>so-you-want-to-learn-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mobile</title>
		<link>http://coffeaelectronica.com/blog/mobile/</link>
		<pubDate>Fri, 27 Nov 2009 20:37:59 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?page_id=622</guid>
		<description></description>
		<content:encoded><![CDATA[Working towards my goal of making this site more mobile-friendly, I am taking a two pronged approach:

<ul>
<li>I am working on a lightweight mobile version of the html content such that any mobile phone should be able to view the site content.</li>
<li>I have also released the first version of the CoffeaElectronica.com Android App, which provides easy access to the content from your Android phone. You can also send me an email from the app.</li>
</ul>

<b>Android App</b>

[caption id="attachment_628" align="alignright" width="120" caption="Scan this with your phone."]<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2009/11/ceapp-code.png"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/11/ceapp-code.png" alt="Scan this with your phone." title="CoffeaElectronica App" width="120" height="120" class="size-full wp-image-628" /></a>[/caption]You can either download the app from the link below, or use the barcode scanner (search for "Barcode Scanner" in the Android Marketplace) to scan the code to the right. The barcode scanner will pull the download link from the code, click it to download the file. Once you have downloaded the .apk file, click on it to install.

<blockquote>This app has been downloaded a lot, but does anyone actually use it? I am working my way back around to doing some Android development again, and may update it.</blockquote>

<i>Using the App</i>

It's pretty simple. You get a simple list of the last ten posting summaries. You can click on one to view it in the app, or you can also click the menu button to see other options. The posting view also has menu button options (contact me, or go to the actual posting on the site).

<i>Source</i>

I have put the source for this app up on <a href="http://github.com">GitHub</a>. On the <a href="http://github.com/cjstehno/CoffeaElectronica-App">project page</a> you can browse the source or download an archive directly, without the need for having a <a href="http://gitscm.org">Git</a> client installed. You are welcome to post bugs and feature requests on the project page.

Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>622</wp:post_id>
		<wp:post_date>2009-11-27 14:37:59</wp:post_date>
		<wp:post_date_gmt>2009-11-27 20:37:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>mobile</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Christopher J. Stehno</title>
		<link>http://coffeaelectronica.com/blog/about/christopher-j-stehno/</link>
		<pubDate>Fri, 21 May 2010 19:34:37 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?page_id=716</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Information</h3>

Hello, my name is Christopher J. Stehno, and this is the virtual side of my personal business card. I realized that if you try to stuff all of your contact information onto one little piece of cardboard it really doesn't look very nice. So, the card has the basics, and it leads you here for the rest.

I am a Java Developer. I generally try and keep my knowledge as broad as possible, but I do tend to specialize in web application development due to my strong web development background.

If you are interested in contacting me about a position, I prefer to be contacted by email with the position details before speaking on the phone. I am <strong>only</strong> interested in full time <strong>permanent direct hire</strong> positions and will generally delete an email that mentions contract or contract to hire.

I currently live in Plano, Texas and will only consider positions in the Dallas/Ft Worth Texas area; really more on the Dallas side of DFW.

<h3>Skills and Proficiencies</h3>
<h4>Primary Proficiencies</h4>

Java (JSE, JEE), HTML, CSS, JavaScript, Maven, Ant, Eclipse

<h4>Secondary Proficiencies</h4>

SQL, ORM, Groovy, Grails, JBoss, Tomcat

<h4>Other Notable Proficiencies</h4>

Linux, Windows, Android, Ruby, Python

<h3>Profiles and Contact Information</h3>

If you would like to contact me or learn more about my technical experience, here are some good contact points:

<ul>
<li><a href="mailto:chris@stehno.com">Chris@Stehno.com</a> - My personal email address; you are welcome to email me and request a resume.</li>
<li><a href="http://coffeaelectronica.com">CoffeaElectronica.com</a> - My technical blog has a lot of good information about my projects, tutorials and tips.</li>
<li><a href="http://www.linkedin.com/in/christopherjstehno">LinkedIn: Christopher J. Stehno</a> - My LinkedIn profile has a good overview of my employment experience.</li>
<li><a href="http://StackOverflow.com/users/135294/cjstehno">My StackOverflow Profile</a> - From time to time, I like to help out and answer questions on this technical community forum.</li>
<li><a href="http://GitHub.com/cjstehno">My GitHub Profile</a> - On my GitHub profile you can find the source code repositories for most of my personal projects and experiments.</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>716</wp:post_id>
		<wp:post_date>2010-05-21 14:34:37</wp:post_date>
		<wp:post_date_gmt>2010-05-21 19:34:37</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>christopher-j-stehno</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>2</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[page-nosidebar.php]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Software</title>
		<link>http://coffeaelectronica.com/blog/software/</link>
		<pubDate>Wed, 21 Jul 2010 16:16:40 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/</guid>
		<description></description>
		<content:encoded><![CDATA[Over the years, I have pulled together a collection of mostly-free software that I use and recommend. I have mentioned one or two of them here and there and will often share them with co-workers; however, I have never really put together a comprehensive list. This page is a starting point for that list. For now, I will be adding items as I have time and as I think of them... a lot of these are so ingrained in my work process that I forget I am using them. Enjoy!

In no particular order:

<ul>
<li><strong>TrueCrypt</strong> (<a href="http://truecrypt.org">http://truecrypt.org</a>) - [free: win, mac, lin] serious encryption software</li>
<li><strong>Notepad++</strong> (<a href="http://notepad-plus-plus.org/">http://notepad-plus-plus.org/</a>) - [free: win] powerful feature-rich text edtior.</li>
<li><strong>OpenOffice.org</strong> (<a href="http://openoffice.org">http://openoffice.org</a>) - [free: win, lin, mac] a full office suite compatible with most commercial office suites, but without all the cruft.
<li><strong>WinMerge</strong> (<a href="http://winmerge.sourceforge.net">http://winmerge.sourceforge.net</a>) - [free: win] a powerful diff/merge tool for windows.</li>
<li><strong>Launchy</strong> (<a href="http://launchy.sourceforge.net">http://launchy.sourceforge.net</a>) - [free: win] a quick application launcher tool that you will quickly become addicted to.</li>
<li><strong>7-zip</strong> (<a href="http://7-zip.org">http://7-zip.org</a>) - [free: win, lin] a great archive and compression tool that handles a ton of formats, extractable archives and file encryption.</li>
<li><strong>Dropbox</strong> (<a href="http://getdropbox.com">http://getdropbox.com</a>) - [free/commercial: win, lin, mac, android, iphone] cloud-based file sync and storage tool. You can get 2GB free or upgrade for more storage.</li>
<li><strong>Ubuntu Linux</strong> (<a href="http://ubuntu.com">http://ubuntu.com</a>) - [free: OS] a stable/sturdy and user-friendly Linux distribution.</li>
<li><strong>Wubi Installer</strong> (<a href="http://wubi-installer.org">http://wubi-installer.org</a>) - [free: win] a great tool for trying out Linux or installing a no-commitment dual boot system.</li>
<li><strong>Virtual Box</strong> (<a href="http://www.virtualbox.org/">http://www.virtualbox.org</a>) - [free: win, lin] virtual machine software from Sun (Oracle). It's great for trying out new operating systems or for running on OS on top of another.</li>
<li><strong>Gimp</strong> (<a href="http://gimp.org">http://gimp.org</a>) - [free: win, lin, mac] an easy to use photo/graphics editing software with a lot of the same features as the big commercial packages.</li>
<li><strong>Inkscape</strong> (<a href="http://inkscape.org">http://inkscape.org</a>) - [free: win, lin] vector graphics drawing software.</li>
<li><strong>Scribus</strong> (<a href="http://scribus.net">http://scribus.net</a>) - [free: win, lin] desktop publishing software, which is a lot more than just word-processing. Great for creating calendars and brochures.</li>
<li><strong>ImgBurn</strong> (<a href="http://imgburn.com">http://imgburn.com</a>) - [free: win] software for burning CDs and DVDs. Especially useful for buring ISO files to disc.</li>
<li><strong>Paint.Net</strong> (<a href="http://www.getpaint.net/">http://www.getpaint.net</a>) - [free: win] Image editing software with most of the basic features you need in an easy to understand interface.</li>
<li><strong>KeePass</strong> (<a href="http://keepass.info">http://keepass.info</a>) - [free: win] Password management software with strong encryption so that you only need to know one really good password to get into your other passwords.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>729</wp:post_id>
		<wp:post_date>2010-07-21 11:16:40</wp:post_date>
		<wp:post_date_gmt>2010-07-21 16:16:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>software</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lifehacker-page</title>
		<link>http://coffeaelectronica.com/blog/2010/10/from-junk-box-to-jukebox-in-a-couple-hours/lifehacker-page/</link>
		<pubDate>Sat, 16 Oct 2010 14:20:43 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2010/10/lifehacker-page.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Lifehacker.com]]></excerpt:encoded>
		<wp:post_id>781</wp:post_id>
		<wp:post_date>2010-10-16 09:20:43</wp:post_date>
		<wp:post_date_gmt>2010-10-16 14:20:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lifehacker-page</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>775</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2010/10/lifehacker-page.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/10/lifehacker-page.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"200";s:6:"height";s:3:"124";s:14:"hwstring_small";s:23:"height='79' width='128'";s:4:"file";s:27:"2010/10/lifehacker-page.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"lifehacker-page-150x124.png";s:5:"width";s:3:"150";s:6:"height";s:3:"124";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ExtJS Says Hello</title>
		<link>http://coffeaelectronica.com/blog/2010/11/extjs-application-development-2-setup/hello_ext/</link>
		<pubDate>Tue, 30 Nov 2010 00:02:40 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2010/11/hello_ext.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[ExtJS Says Hello.]]></excerpt:encoded>
		<wp:post_id>820</wp:post_id>
		<wp:post_date>2010-11-29 18:02:40</wp:post_date>
		<wp:post_date_gmt>2010-11-30 00:02:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello_ext</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>817</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2010/11/hello_ext.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/11/hello_ext.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"249";s:6:"height";s:3:"136";s:14:"hwstring_small";s:23:"height='69' width='128'";s:4:"file";s:21:"2010/11/hello_ext.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:21:"hello_ext-150x136.png";s:5:"width";s:3:"150";s:6:"height";s:3:"136";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MOD</title>
		<link>http://coffeaelectronica.com/blog/2010/11/extjs-application-development-2-setup/mod_start/</link>
		<pubDate>Tue, 30 Nov 2010 00:07:46 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2010/11/mod_start.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Message of the Day]]></excerpt:encoded>
		<wp:post_id>825</wp:post_id>
		<wp:post_date>2010-11-29 18:07:46</wp:post_date>
		<wp:post_date_gmt>2010-11-30 00:07:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mod_start</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>817</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2010/11/mod_start.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/11/mod_start.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"229";s:14:"hwstring_small";s:23:"height='96' width='125'";s:4:"file";s:21:"2010/11/mod_start.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:21:"mod_start-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MOD Dialog</title>
		<link>http://coffeaelectronica.com/blog/2010/11/extjs-application-development-2-setup/mod_final/</link>
		<pubDate>Tue, 30 Nov 2010 00:16:30 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2010/11/mod_final.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Finished Dialog]]></excerpt:encoded>
		<wp:post_id>833</wp:post_id>
		<wp:post_date>2010-11-29 18:16:30</wp:post_date>
		<wp:post_date_gmt>2010-11-30 00:16:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mod_final</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>817</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2010/11/mod_final.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2010/11/mod_final.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"229";s:14:"hwstring_small";s:23:"height='96' width='125'";s:4:"file";s:21:"2010/11/mod_final.png";s:5:"sizes";a:1:{s:9:"thumbnail";a:3:{s:4:"file";s:21:"mod_final-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Grails and ExtJS</title>
		<link>http://coffeaelectronica.com/blog/?p=857</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=857</guid>
		<description></description>
		<content:encoded><![CDATA[go over the missing old plugin and what I am doing with mine... 
show some examples of its features...
go into the planned features...

I have been doing a lot of work with ExtJS lately in Grails projects so I was curious whether or not there was a Grails plugin for ExtJS. There <em>was</em> one, but it has long since died. I tried to find the source of the project or anything other than the bit of documentation given on the plugin description page, but could find nothing. So, I decided to write my own. 

Currently my sencha-extjs Grails plugin is ready for general production use; however, it does not integrate with the built-in ajax GSP tags. It does provided the full ExtJS library with a couple other nice features.

<ul>
<li>The selection of the integrated JavaScript library is based on your current environment. If you are in development mode, it will use the debug JavaScript files, otherwise it will use the minified production JavaScript files.</li>
<lil>It provides two GSP tags to simplify the bootstrapping of the ExtJS library. These are required to use the auto-library selection mentioned above.
</ul>

It makes using ExtJS in Grails projects much simpler, and less bulky since the library can now be shared across multiple projects. Let's create a simple project with the plugin.


create a test project
install plugin
create controller 
create simple view
add tags to layout
add hello world js to js file
run app

There are still some features I would like to add to this plugin.

It would be nice to have a Grails script to create the layout template for an ExtJS project.
It would be nice to have a Grails script to create a base JavaScript template.
It would be nice to modify the build such that the war would not include the debug parts of the library.

If you have any suggestions or if you are interested in using this plugin or contributing to it, please let me know.

As a final note, I am planning on doing a similar plugin for sencha touch, as I will be using that in a project soon.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>857</wp:post_id>
		<wp:post_date>2010-12-22 07:46:40</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="extjs"><![CDATA[ExtJS]]></category>
		<category domain="post_tag" nicename="grails"><![CDATA[Grails]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>github404</title>
		<link>http://coffeaelectronica.com/blog/2011/01/github-404/github404/</link>
		<pubDate>Sun, 09 Jan 2011 04:17:11 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2011/01/github404.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>875</wp:post_id>
		<wp:post_date>2011-01-08 22:17:11</wp:post_date>
		<wp:post_date_gmt>2011-01-09 04:17:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>github404</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>874</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2011/01/github404.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/01/github404.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"800";s:6:"height";s:3:"397";s:14:"hwstring_small";s:23:"height='63' width='128'";s:4:"file";s:21:"2011/01/github404.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:21:"github404-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:21:"github404-300x148.png";s:5:"width";s:3:"300";s:6:"height";s:3:"148";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Attack of the Blob!</title>
		<link>http://coffeaelectronica.com/blog/?p=878</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=878</guid>
		<description></description>
		<content:encoded><![CDATA[Here's an interesting little bastard that I ran into recently doing some Grails work. I am using HSqlDb for my development database and MySql for my production and have had no real issues other than an odd type mismatch for byte arrays. It seemed to be working fine in Hql, but the schema exported to MySql was not making the field large enough to be useful... so I just made a note of it and fixed it with an ALTER statement on MySql since this was my production database (I could afford to come back to it later).

Well, now the issue has come back around during some refactoring. Basically what I am doing is storing uploaded image data as a byte array in a domain object.

<code lang="groovy">
byte[] content
</code>

After some poking around, I found that the generated schema was creating this field as a LONGVARBINARY with no size specified]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>878</wp:post_id>
		<wp:post_date>2011-01-18 19:41:32</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>href-icons</title>
		<link>http://coffeaelectronica.com/blog/2011/02/adding-favicons-to-your-links/href-icons/</link>
		<pubDate>Wed, 09 Feb 2011 19:52:04 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2011/02/href-icons.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[External links with their own icons.]]></excerpt:encoded>
		<wp:post_id>882</wp:post_id>
		<wp:post_date>2011-02-09 13:52:04</wp:post_date>
		<wp:post_date_gmt>2011-02-09 19:52:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>href-icons</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>880</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2011/02/href-icons.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/02/href-icons.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"581";s:6:"height";s:2:"62";s:14:"hwstring_small";s:23:"height='13' width='128'";s:4:"file";s:22:"2011/02/href-icons.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:21:"href-icons-150x62.png";s:5:"width";s:3:"150";s:6:"height";s:2:"62";}s:6:"medium";a:3:{s:4:"file";s:21:"href-icons-300x32.png";s:5:"width";s:3:"300";s:6:"height";s:2:"32";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mymdb_screen</title>
		<link>http://coffeaelectronica.com/blog/2011/05/my-timesink/mymdb_screen/</link>
		<pubDate>Thu, 05 May 2011 01:28:54 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2011/05/mymdb_screen.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Main MyMdb Screen]]></excerpt:encoded>
		<wp:post_id>898</wp:post_id>
		<wp:post_date>2011-05-04 20:28:54</wp:post_date>
		<wp:post_date_gmt>2011-05-05 01:28:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mymdb_screen</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>897</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2011/05/mymdb_screen.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/mymdb_screen.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"600";s:6:"height";s:3:"418";s:14:"hwstring_small";s:23:"height='89' width='128'";s:4:"file";s:24:"2011/05/mymdb_screen.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:24:"mymdb_screen-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:24:"mymdb_screen-300x209.png";s:5:"width";s:3:"300";s:6:"height";s:3:"209";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gingerbread-nook</title>
		<link>http://coffeaelectronica.com/blog/2011/05/why-i-converted-my-nook-color-to-a-tablet/gingerbread-nook/</link>
		<pubDate>Sat, 14 May 2011 14:02:23 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2011/05/gingerbread-nook.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Gingerbread Nook]]></excerpt:encoded>
		<wp:post_id>905</wp:post_id>
		<wp:post_date>2011-05-14 09:02:23</wp:post_date>
		<wp:post_date_gmt>2011-05-14 14:02:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gingerbread-nook</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>903</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2011/05/gingerbread-nook.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/gingerbread-nook.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1536";s:6:"height";s:4:"2048";s:14:"hwstring_small";s:22:"height='96' width='72'";s:4:"file";s:28:"2011/05/gingerbread-nook.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:28:"gingerbread-nook-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:28:"gingerbread-nook-225x300.jpg";s:5:"width";s:3:"225";s:6:"height";s:3:"300";}s:5:"large";a:3:{s:4:"file";s:29:"gingerbread-nook-768x1024.jpg";s:5:"width";s:3:"768";s:6:"height";s:4:"1024";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:19:"T-Mobile myTouch 3G";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1305057422";s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"3.72";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sample Mock-up</title>
		<link>http://coffeaelectronica.com/blog/2011/05/ui-mock-ups/mockup/</link>
		<pubDate>Sat, 14 May 2011 20:32:07 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/wp-content/uploads/2011/05/mockup.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>911</wp:post_id>
		<wp:post_date>2011-05-14 15:32:07</wp:post_date>
		<wp:post_date_gmt>2011-05-14 20:32:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mockup</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>910</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://coffeaelectronica.com/blog/wp-content/uploads/2011/05/mockup.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/mockup.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"450";s:6:"height";s:3:"400";s:14:"hwstring_small";s:23:"height='96' width='108'";s:4:"file";s:18:"2011/05/mockup.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:18:"mockup-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:18:"mockup-300x266.png";s:5:"width";s:3:"300";s:6:"height";s:3:"266";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Are You Mocking Me?</title>
		<link>http://coffeaelectronica.com/blog/2006/09/are-you-mocking-me/</link>
		<pubDate>Wed, 20 Sep 2006 13:18:19 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=54</guid>
		<description></description>
		<content:encoded><![CDATA[Most of us agree that unit testing is an important part of development and that unit tests should be isolated as much as possible from external configuration and management issues so that you test only the object under examination and not the rest of the environment surrounding them; this is where mocking comes in handy. 

Let’s say I want to develop a JSP tag that pulls a name from somewhere in the scope available to the tag and then renders a hello message to the given name. It’s not a very useful tag, but it will work as an example. First, setup the test and a method to test for the desired output.

<code lang="java">
public class HelloTagTest extends TestCase {
        public void testHello() throws Exception {
                HelloTag helloTag = new HelloTag();
                assertEquals("Hello, Mr. Anderson!", helloTag.buildOutput());
        }
}</code>

I am using test-driven development techniques here, so we want to start simple and build only what we need to accomplish our goal. When you compile this code (I am intentionally leaving out imports to save space) it will fail because we have not yet created a HelloTag class. Let’s do that now.

<code lang="java">
public class HelloTag extends TagSupport {
        String buildOutput(){}
}</code>

Notice that I also added the <tt>buildOutput()</tt> method. It is a package-scoped method because it is the method we will be testing for the tag output. This allows the testing of the tag without having to worry about start and end tag support right away. Both classes should now compile, but the test will fail. The quickest way to get the test to work is to fake the return value from <tt>buildOutput()</tt>.

<code lang="java">
public class HelloTag extends TagSupport {
        String buildOutput(){
                return( "Hello, Mr. Anderson!" );
        }
}</code>

If you run the test now, everything is green, though not very useful. We want to be able to pull the name of the person from the page context. The page context is passed to the tag by the tag container, so how do we use it “out of the container" This is where mocking comes into play. I use <a href="http://jmock.org">JMock</a> for mocking. It is easy to use once you get the hang of it, and very powerful.

We need to create a mock <tt>PageContext</tt> so that we don’t need a whole servlet container to test this one little tag. Let’s flesh out the mock context and then add it to the test case.

<code lang="java">Mock mockPageCtx = new Mock(PageContext.class);</code>

You will need to import the [cglib](http://cglib.sourceforge.net) version of the mock api (org.jmock.cglib.*) due to the fact that <tt>PageContext</tt> is not an interface. With JMock you can mock interfaces or classes as long as they have an empty constructor.

To use the mock object as the “real" thing, you just create a proxy. 

<code lang="java">PageContext pageCtx = (PageContext)mockPageCtx.proxy();</code>

Let’s add this to our test case.

<code lang="java">
public class HelloTagTest extends MockObjectTestCase {
        public void testHello() throws Exception {
                Mock mockPageCtx = new Mock(PageContext.class);

                HelloTag helloTag = new HelloTag();
                helloTag.setPageContext((PageContext)mockPageCtx.proxy());

                assertEquals( "Hello, Mr. Anderson!", helloTag.buildOutput());
        }
}</code>

Notice that we are using <tt>MockObjectTestCase</tt> instead of <tt>TestCase</tt>.

If you run the test, everything is still fine. We are not using the <tt>PageContext</tt> yet. We need the page context to be able to provide the name for us when we request it. Let’s say its stored somewhere in scope under the id foo. We need to tell the <tt>mockPageCtx</tt> to return the correct value when the right conditions are met. This is where the real mocking comes in (and the power of JMock).

<code lang="java">
public class HelloTagTest extends MockObjectTestCase {
        public void testHello() throws Exception {
                Mock mockPageCtx = new Mock(PageContext.class);
                mockPageCtx.stubs().method("findAttribute").with(eq("foo")).will(returnValue( "Mr. Anderson" ));

                HelloTag helloTag = new HelloTag();
                helloTag.setPageContext((PageContext)mockPageCtx.proxy());

                assertEquals("Hello, Mr. Anderson!",helloTag.buildOutput());
        }
}</code>

We added one line of code that probably looks a little confusing... it did to me when I first learned <a href="http://jmock.org">JMock</a>. You can break it down to:

<blockquote>I want to stub out the method findAttribute that takes the parameter foo and will return the value “Mr. Anderson".</blockquote>

You are mocking the response of the <tt>PageContext</tt> instance. The test still runs, but now we need to modify the tag itself to actually use the page context. 

<code lang="java">
public class HelloTag extends TagSupport {
        String buildOutput(){
                String name = (String)pageContext.findAttribute("foo");
                return("Hello, " + name + "!");
        }
}</code>

Now run the test and everything is still green. Your tag thinks it has a real <tt>PageContext</tt>. Now, let’s say that we want to be able to specify the name of the attribute using a tag attribute called id. As you probably know, tag attributes are simply setters in the tag class.

<code lang="java">
public class HelloTagTest extends MockObjectTestCase {
        public void testHello() throws Exception {
                Mock mockPageCtx = new Mock(PageContext.class);
                mockPageCtx.stubs().method("findAttribute").with(eq("foo")).will(returnValue("Mr. Anderson"));

                HelloTag helloTag = new HelloTag();
                helloTag.setPageContext((PageContext)mockPageCtx.proxy());
                helloTag.setId("matrix");

                assertEquals("Hello, Mr. Anderson!",helloTag.buildOutput());
        }
}</code>

Then we need to add the setter to the tag and use the id in the output. 

<code lang="java">
public class HelloTag extends TagSupport {
        private String id;

        public void setId(String id){this.id = id;}

        String buildOutput(){
                String name = (String)pageContext.findAttribute(id);
                return("Hello, " + name + "!");
        }
}</code>

Aww, but now the test fails. The expected <tt>findAttribute()</tt> parameter was not found. We need to modify our test to expect the right one.

<code lang="java">
public class HelloTagTest extends MockObjectTestCase {
        public void testHello() throws Exception {
                Mock mockPageCtx = new Mock(PageContext.class);
                mockPageCtx.stubs().method("findAttribute").with(eq("matrix"))
                     .will(returnValue("Mr. Anderson"));

                HelloTag helloTag = new HelloTag();
                helloTag.setPageContext((PageContext)mockPageCtx.proxy());
                helloTag.setId("matrix");

                assertEquals("Hello, Mr. Anderson!",helloTag.buildOutput());
        }
}</code>

And now everything is green again. 

Let’s take a break for a second and look at what we have. We have a completely tested JSP tag (though not fully implemented) that does everything we need it to do. Now we just need to add the rest of the tag support so that it will work in a servlet container. Let’s write out our output in the <tt>doEndTag()</tt> method. Can we test this to make sure we are outputting the right data? Yes, another job for JMock, with a little help from a concrete mock helper. We need to mock <tt>JspWriter</tt>, which is abstract and has no empty constructor... no JMock friendly. So, what I do is make a simple mock adapter for it.

<code lang="java">
public abstract JspWriterMockAdapter extends JspWriter {
        public JspWriterMockAdapter(){
                super(1024,false);
        }
}</code>

Which we can then use with JMock to test for the expected output.

<code lang="java">
public class HelloTagTest extends MockObjectTestCase {
        public void testHello() throws Exception {
                Mock mockJspWriter = new Mock(JspWriterMockAdapter.class);
                mockJspWriter.expects(once()).method("print")
                        .with(eq("Hello, Mr. Anderson!"));

                Mock mockPageCtx = new Mock(PageContext.class);
                mockPageCtx.stubs().method("findAttribute").with(eq("matrix"))
                     .will(returnValue("Mr. Anderson"));
                mockPageCtx.stubs().method("getOut").withNoParameters()
                     .will(returnValue((JspWriter)mockJspWriter.proxy()));

                HelloTag helloTag = new HelloTag();
                helloTag.setPageContext((PageContext)mockPageCtx.proxy());
                helloTag.setId("matrix");
                helloTag.doStartTag();
                helloTag.doEndTag();

                assertEquals("Hello, Mr. Anderson!",helloTag.buildOutput());

                mockJspWriter.verify();
        }
}</code>

This expectation checking shows the other way to use JMock. You can test for an expected method call on the mock object. Here we are saying that the mock <tt>JspWriter</tt> expects the <tt>print()</tt> method to be called only once with the given string.

I also added a method stub to return the mock <tt>JspWriter</tt> when <tt>getOut()</tt> is called on the <tt>PageContext</tt>. The last statement in the test method is also important. The verify method is called on the mock object when you want to test for expected method calls. If they are not found, the test fails.

If we run the test now, it will fail because we are not doing anything in the <tt>doEndTag()</tt> method.

<code lang="java">
public class HelloTag extends TagSupport {
        private String id;

        public void setId(String id){this.id = id;}

        public int doEndTag() throws JspException {
                try {
                        pageContext.getOut().print(buildOutput());
                } catch(Exception ex){throw new JspException(ex);}
                return(EVAL_PAGE);
        }

        String buildOutput(){
                String name = (String)pageContext.findAttribute(id);
                return("Hello, " + name + "!");
        }
}</code>

Run the test again and everything is green. Now you also see why I use a separate method to build the output. This keeps your tag methods very simple and allows for greater test coverage. This is as far as I am going to go with this example. It is a fully working JSP tag. If you build a tag descriptor for it and use it, you would see the output we are testing for. 

Don’t get me wrong, this approach does not necessarily negate the need for in-container testing, but it can lessen that need in most cases. You can use something like Cactus to do your in-container testing once your mock testing is done. Though my servlet container can fire up pretty fast, it’s still slower than the mock approach when you are in a rapid test-driven cycle.

<blockquote><strong>Update:</strong> <a href="http://jmock.org">JMock 2</a> is a radical change from version one. See "<a href="http://coffeaelectronica.com/blog/2009/07/are-you-still-mocking-me/">Are You Still Mocking Me?</a>" for an updated version of this posting.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date>2006-09-20 08:18:19</wp:post_date>
		<wp:post_date_gmt>2006-09-20 13:18:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>are-you-mocking-me</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jmock"><![CDATA[JMock]]></category>
		<category domain="post_tag" nicename="jsp"><![CDATA[JSP]]></category>
		<category domain="post_tag" nicename="mocking"><![CDATA[Mocking]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Are You Still Mocking Me?</title>
		<link>http://coffeaelectronica.com/blog/2007/09/are-you-still-mocking-me/</link>
		<pubDate>Thu, 20 Sep 2007 19:35:48 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=67</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://jmock.org">JMock 2</a> came out not too long ago and after some initial worry about backwards compatibility I decided to give it a try. It plays very nicely with version one, but you will want to run out and convert all of your tests once you see how truly beautiful version two is.

A few years ago, I wrote a brief article on unit testing with JMock called "<a href="http://coffeaelectronica.com/blog/2006/09/are-you-mocking-me/">Are You Mocking Me?</a>". I would like to showcase some of the new goodies in version two by revisiting that article and converting the examples to the newer version. You should at least skim the other article to get a feel for the example at hand as I will be covering mocking differences, not the original issue of mock testing.

In the example, our test was written as an extension of <tt>MockObjectTestCase</tt>, this is still the case (pardon the pun), except that the package is different, we are now using the <tt>org.jmock.integration.junit3.MockObjectTestCase</tt> class from version two. It serves basically the same purpose, to provide some helper methods. Our our original test case was:

<code lang="java">
public class HelloTagTest extends MockObjectTestCase {
        public void testHello() throws Exception {
                Mock mockPageCtx = new Mock(PageContext.class);

                HelloTag helloTag = new HelloTag();
                helloTag.setPageContext((PageContext)mockPageCtx.proxy());

                assertEquals("Hello, Mr. Anderson!",helloTag.buildOutput());
        }
}</code>

which, when updated will become:

<code lang="java">
public class HelloTagTest extends MockObjectTestCase {

     public void testHello() throws Exception {
          final PageContext pageCtx = mock(PageContext.class);

          final HelloTag helloTag = new HelloTag();
          helloTag.setPageContext(pageCtx);

          assertEquals("Hello, Mr. Anderson!"),helloTag.buildOutput());
     }
}</code>

The difference is subtle but very interesting. Now instead of a <tt>Mock</tt> object, we have an instance of the object that was mocked and we no longer need to call the <tt>proxy()</tt> method and do the casting.

The second example adds a stubbed method, which after using JMock for a while I realized was not such a great thing, since it does not really verify that it was called, just that it can be called. 

<code lang="java">
public class HelloTagTest extends MockObjectTestCase {
        public void testHello() throws Exception {
                Mock mockPageCtx = new Mock(PageContext.class);
                mockPageCtx.stubs().method("findAttribute").with(eq("foo")).will(returnValue("Mr. Anderson"));

                HelloTag helloTag = new HelloTag();
                helloTag.setPageContext((PageContext)mockPageCtx.proxy());

                assertEquals("Hello, Mr. Anderson!",helloTag.buildOutput());
        }
}</code>

The new version both takes care of that omission and updates the code to use the new expectation definition method:

<code lang="java">
public class HelloTagTest extends MockObjectTestCase {

     public void testHello() throws Exception {
          final PageContext pageCtx = mock(PageContext.class);
          checking(new Expectations(){
               {
                     one(pageCtx).findAttribute("foo"); will(returnValue("Mr. Anderson"));
                }
          });

          final HelloTag helloTag = new HelloTag();
          helloTag.setPageContext(pageCtx);

          assertEquals("Hello, Mr. Anderson!"),helloTag.buildOutput());
     }
}</code>

Now, the first time I saw the code in the checking method, I had to double check that I was looking at a Java example. Basically you are creating an anonymous extension of the <tt>Expectations</tt> class and then adding an instance initializer to it (the inner curly braces) to provide the expectations themselves. Notice that the method is actually being called on the mocked object; it's not a string, which means that refactoring will not break your mock tests. If you have never run into that problem with version one, count yourself lucky.

Okay, I am going to jump down to the final code to finish up:

<code lang="java">
public class HelloTagTest extends MockObjectTestCase {
        public void testHello() throws Exception {
                Mock mockJspWriter = new Mock(JspWriterMockAdapter.class);
                mockJspWriter.expects(once()).method("print")
                        .with(eq("Hello, Mr. Anderson!"));

                Mock mockPageCtx = new Mock(PageContext.class);
                mockPageCtx.stubs().method("findAttribute").with(eq("matrix"))
                     .will(returnValue("Mr. Anderson"));
                mockPageCtx.stubs().method("getOut").withNoParameters()
                     .will(returnValue((JspWriter)mockJspWriter.proxy()));

                HelloTag helloTag = new HelloTag();
                helloTag.setPageContext((PageContext)mockPageCtx.proxy());
                helloTag.setId("matrix");
                helloTag.doStartTag();
                helloTag.doEndTag();

                assertEquals("Hello, Mr. Anderson!",helloTag.buildOutput());

                mockJspWriter.verify();
        }
}</code>

With version two you can mock objects that do not have an empty constructor, though you have to set a non-default "Imposterizer". This negates the need for the adapter class defined in the old article.

<code lang="java">
public class HelloTagTest extends MockObjectTestCase {

     public HelloTagTest(){
          setImposterizer(ClassImposterizer.INSTANCE);
     }

     public void testHello() throws Exception {
          final JspWriter jspWriter = mock(JspWriter.class);
          checking(new Expectations(){
               {
                     one(jspWriter).print("Hello, Mr. Anderson!");
                }
          });

          final PageContext pageCtx = mock(PageContext.class);
          checking(new Expectations(){
               {
                     one(pageCtx).findAttribute("martix"); will(returnValue("Mr. Anderson"));
                     one(pageCtx).getOut(); will(returnValue(jspWriter));
                }
          });

          final HelloTag helloTag = new HelloTag();
          helloTag.setPageContext(pageCtx);
          helloTag.setId("matrix");
          helloTag.doStartTag();
          helloTag.doEndTag();

          assertEquals("Hello, Mr. Anderson!"),helloTag.buildOutput());
     }
}</code>

You can't tell me that is not cleaner and more straight-forward. You could actually collapse the <tt>checking()</tt> methods into one if you wanted to. I tend to group them like the example above since it can often reveal common blocks of code that can be extracted into separate shared methods.

The is a lot more to discuss with JMock but this gives you a good overview based on old version one code.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date>2007-09-20 14:35:48</wp:post_date>
		<wp:post_date_gmt>2007-09-20 19:35:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>are-you-still-mocking-me</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jmock"><![CDATA[JMock]]></category>
		<category domain="post_tag" nicename="jsp"><![CDATA[JSP]]></category>
		<category domain="post_tag" nicename="mocking"><![CDATA[Mocking]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Two, If By Comparison</title>
		<link>http://coffeaelectronica.com/blog/2004/10/two-if-by-comparison/</link>
		<pubDate>Thu, 14 Oct 2004 13:51:10 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=153</guid>
		<description></description>
		<content:encoded><![CDATA[There are two ways to compare objects, directly if they implement the <tt>java.lang.Comparable</tt> interface, and indirectly using an implementation of the <tt>java.util.Comparator</tt> interface.

<strong>java.lang.Comparable</strong>

The Comparable interface defines only a single method signature, the <tt>compareTo()</tt> method that takes as a parameter the object that the implementing object is being compared to. It returns a negative integer, zero, or a positive integer when the implementing object is less than, equal to, or greater than the specified object respectively.

The Comparable interface is best used when your object has a logical point of comparison, such as an order number, date stamp, or unique name and that point of comparison is fixed, meaning that the comparison is always performed on the same comparison point (e.g. always compared by the date stamp). This also assumes that you are the developer of the object or that you are able to extend it to allow for a Comparable implementation (if neither of these is the case, you should use the Comparator interface instead — see below).

First you need a class for your object. 

<code lang="java">
public class Person {
    private String id, firstName, lastName;
    private int age;
    public String getId(){return(id);}
    public String getFirstName(){return(firstName);}
    public String getLastName(){return(lastName);}
    public int getAge(){return(age);}
    public void setId(String id){this.id = id;}
    public void setFirstName(String firstName){this.firstName = firstName;}
    public void setLastName(String lastName){this.lastName = lastName;}
    public void setAge(int age){this.age = age;}
}</code>

Now, say you have a list of people (Person objects) and that you want to display them ordered by their last names. You can make the Person class implement Comparable and perform the comparison based on the <tt>lastName</tt> property. This comparison is very easy due to the fact that Strings implement Comparable themselves, as do many standard data object classes (Numbers, Dates, etc.). The comparable Person class is shown below:

<code lang="java">
public class Person implements Comparable {
    private String id, firstName, lastName;
    private int age;

    public String getId(){return(id);}
    public String getFirstName(){return(firstName);}
    public String getLastName(){return(lastName);}
    public int getAge(){return(age);}
    public void setId(String id){this.id = id;}
    public void setFirstName(String firstName){this.firstName = firstName;}
    public void setLastName(String lastName){this.lastName = lastName;}
    public void setAge(int age){this.age = age;}

    public int compareTo(Object obj){
            // cast the obj as a Person -- we are only comparing people
            Person pObj = (Person)obj;
            // compare the last names using their compareTo methods
            return(lastName.compareTo(pObj.getLastName()));
    }
}</code>

Then you can run your list of Person objects through a <tt>Collections.sort()</tt> method and you will have a list of people ordered by their last names. But what if, when you display your list of people, the user wants the ability to sort the list by the first name or the age? You could add a new property to your object called <tt>compareBy</tt> that takes a parameter used to identify which property of the object will be used in the comparison. Then in your <tt>compareTo()</tt> method you will need to base your comparison on the property that <tt>compareBy</tt> is pointing to. This is not a very clean approach. It would be better to use a <tt>java.util.Comparator</tt> implementation.

<strong>java.util.Comparator</strong>

The Comparator interface defines two method signatures for implementation, <tt>compare()</tt> that takes as parameters the two objects to be compared and <tt>equals()</tt> which takes an object to be compared to the Comparator. The return value of the <tt>compare()</tt> method is basically the same as that for the <tt>compareTo()</tt> method of the Comparable interface. The main difference between the Comparator and a Comparable object is that Comparators perform the comparison external to the objects being compared and therefore can be reusable over many different object types.

Let’s start out with our clean Person class again: 

<code lang="java">
public class Person {
    private String id, firstName, lastName;
    private int age;

    public String getId(){return(id);}
    public String getFirstName(){return(firstName);}
    public String getLastName(){return(lastName);}
    public int getAge(){return(age);}
    public void setId(String id){this.id = id;}
    public void setFirstName(String firstName){this.firstName = firstName;}
    public void setLastName(String lastName){this.lastName = lastName;}
    public void setAge(int age){this.age = age;}
}</code>

and then define a comparator to do the work of the comparable Person we created (so we don’t lose any functionality).

<code lang="java">
public class LastNameComparator implements Comparator {

    public boolean equals(Object obj){
            // we're just going to say that any LastNameComparators are equal
            return(obj instanceof LastNameComparator);
    }

    public int compare(Object obj1, Object obj2){
            // cast both objects are Person
            Person p1 = (Person)obj1;
            Person p2 = (Person)obj2;

            // compare their lastNames
            return(p1.getLastName().compareTo(p2.getLastName()));
    }
}</code>

That’s all it takes. You can run your List of Person objects through the version of <tt>Collections.sort()</tt> that accepts a List and a Comparator to sort your list by last name. You have gained something by doing this… you can now change the sort criteria on the fly. Let’s create a Comparator to compare by age.

<code lang="java">
public class AgeComparator implements Comparator {

    public boolean equals(Object obj){
            // we're just going to say that any AgeComparators are equal
            return(obj instanceof AgeComparator);
    }

    public int compare(Object obj1, Object obj2){
            // cast both objects are Person
            Person p1 = (Person)obj1;
            Person p2 = (Person)obj2;

            // compare their ages
            int result = 0; // defaults to equal
            if(p1.getAge() > p2.getAge()){
                    result = 1;
            } else if(p1.getAge() < p2.getAge()){
                    result = -1;
            }

            return(result);
    }
}</code>

Now you can use that instead of the <tt>LastNameComparator</tt> to order the Person objects by their ages. The Comparator at first seems like more coding, but if you design your Comparators well, you will be able to reuse them in the future, especially if you throw in some reflection. The <a href="http://commons.apache.org/collections">Jakarta Commons Collections API</a> has a set of useful Comparators, though I think one of the most useful Comparators is found in the <a href="http://commons.apache.org/beanutils">Jakarta Commons Bean Utils API</a>, called the <tt>BeanComparator</tt>. The <tt>BeanComparator</tt> uses reflection compare two objects based on the value of a specified property. Using the <tt>BeanComparator</tt> to perform our comparisons would be much simpler:

<code lang="java">
Collections.sort(people,new BeanComparator("lastName"));
// - or -
Collections.sort(people,new BeanComparator("age"));
</code>

Now how is that for simple and straight forward?  

So that is a basic introduction to using the Comparable and Comparator interfaces. In general, it is better to use Comparators so that your comparison is not so tightly tied to your implementations. 

<strong>Additional Reading</strong>

<a href="http://www.javaworld.com/javaworld/jw-12-2002/jw-1227-sort_p.html">Sort it Out</a> (Alex Blewitt, <a href="http://javaworld.com">JavaWorld</a>, 2002) - This article takes a little more broad top-level approach, but has some good information too. 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date>2004-10-14 08:51:10</wp:post_date>
		<wp:post_date_gmt>2004-10-14 13:51:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>two-if-by-comparison</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="comparator"><![CDATA[Comparator]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>End of Time, Well Date Anyway</title>
		<link>http://coffeaelectronica.com/blog/2005/02/end-of-time-well-date-anyway/</link>
		<pubDate>Fri, 18 Feb 2005 21:31:44 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=162</guid>
		<description></description>
		<content:encoded><![CDATA[I have run across this issue before… you need to specify a "far-off" expiration date for something using the <tt>java.util.Date</tt> class. Generally I have specified something 100 years in the future like 1/1/2100 or something like that using the old deprecated Date constructors... but that is not really a good practice or habit to get into. I came up with two better solutions.

First, in the case where you want to specify a static date, you could run a quick test to determine the long time value for the date you create using the deprecated constructors. You then modify your code to use the long value in the constructor, which is the only remaining non-empty constructor. 

The second options is useful if you just want a date sometime in the unreachable future (avoiding any reasonable y2k-like issues) you can use the following: 

<code lang="java">Date expiration = new Date(Long.MAX_VALUE);</code>

which will yield a date so far in the future that you would be proud to have your code exist that long and happy to fix it (at least your descendants should be happy to fix it). The date it represents is: 

<pre>Sun Aug 17 00:12:55 MST 292278994</pre>

I think that should suffice.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date>2005-02-18 16:31:44</wp:post_date>
		<wp:post_date_gmt>2005-02-18 21:31:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>end-of-time-well-date-anyway</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="date"><![CDATA[Date]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spring Inner-class Instantiation</title>
		<link>http://coffeaelectronica.com/blog/2005/07/spring-inner-class-instantiation/</link>
		<pubDate>Wed, 13 Jul 2005 13:56:30 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=171</guid>
		<description></description>
		<content:encoded><![CDATA[The other day I ran into something I had never tried to do with <a href="http://springframework.org">Spring</a> before; define a bean as an instance of an inner class. I did a little searching through the Spring docs, but could not find anything about it, negative or positive. So, I just gave it a try.

Consider the class: 

<code lang="java">
public abstract class IService {
    public static class ServiceImpl extends IService {
            // something useful...
    }
}</code>

which would have a bean definition of: 

<code lang="xml"><bean id="myService" class="com.some.pkg.IService$ServiceImpl" /></code>

where the $ is the separator between the main class and the inner class. This is how its represented in the actual class file so it makes sense. Damn, I love Spring!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>171</wp:post_id>
		<wp:post_date>2005-07-13 08:56:30</wp:post_date>
		<wp:post_date_gmt>2005-07-13 13:56:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spring-inner-class-instantiation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simple Hashing</title>
		<link>http://coffeaelectronica.com/blog/2005/10/simple-hashing/</link>
		<pubDate>Tue, 25 Oct 2005 22:10:51 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=286</guid>
		<description></description>
		<content:encoded><![CDATA[A co-worker showed me this recently. Say you have the following user information

<pre>
Name: John Doe
YOB: 1973
</pre>

and you need to generate a six character string identifier for the user. First, you need to convert the name to a long by parsing it with a radix of 36. 

<code lang="java">long nameId = Long.parseLong("John Doe",36);</code>

Then, lets use an exclusive OR (^) to blend the name and birth year to get a new identifier value (adds a little obfuscation):

<code lang="java">long id = 1973L ^ nameId;</code>

To limit the number of characters in the final string, we need to put an upper limit on the number by taking the modulus of the max value:

<code lang="java">
long limit = Long.parseLong("zzzzzz",36);
long value = id % limit;
</code>

Note that we want six characters so there are six Zs. To get the string value simply convert the long to a string using a radix of 36.

<code lang="java">String idstr = Long.toString(value,36);</code>

Interesting.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>286</wp:post_id>
		<wp:post_date>2005-10-25 17:10:51</wp:post_date>
		<wp:post_date_gmt>2005-10-25 22:10:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>simple-hashing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spring + RMI + JNDI = Cool</title>
		<link>http://coffeaelectronica.com/blog/2006/09/spring-rmi-jndi-cool/</link>
		<pubDate>Sun, 10 Sep 2006 12:30:33 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=289</guid>
		<description></description>
		<content:encoded><![CDATA[I started looking into RMI again; it’s been a while since I have used it directly and as often happens, I got sidetracked. I found out how easy it is very to setup an RMI registry with <a href="http://springframework.org">Spring</a> and then access the bound objects via JNDI.

First, we need an object to bind. Let’s keep it simple and just have two methods: one for getting the current date and another that will return the string that we pass into it. If you remember your RMI you know that we need an interface that extends <tt>java.rmi.Remote</tt> and an object that implements that interface. For the interface:

<code lang="java">
public interface MyRemote extends Remote {
    public Date getTimestamp() throws RemoteException;
    
    public String echoString(String str) throws RemoteException;
}</code>

and for the implementation: 

<code lang="java">
public class MyRemoteImpl implements MyRemote {
    private static final long serialVersionUID = 9222184580750208673L;
    
    public MyRemoteImpl() throws RemoteException {
            super();
    }

    public Date getTimestamp() throws RemoteException {
            return(new Date());
    }

    public String echoString(String str) throws RemoteException {
            return(str);
    }
}</code>

Next, you will need a spring context to work with. I am not going into the details of Spring configuration here, but I will show the bean definitions for the necessary beans; the object to be bound, the service exporter and the registry factory.

The object to be bound is our <tt>MyRemoteImpl</tt> and it’s just a simple bean:

<code lang="xml"><bean id='service.MyRemote' class='rmi.MyRemoteImpl' /></code>

The RMI registry configuration is pretty simple using the <tt>RmiRegistryFactoryBean</tt>. 

<code lang="xml">
<bean id='rmi.Registry'  
    class='org.springframework.remoting.rmi.RmiRegistryFactoryBean'>
    <property name='port' value='1099' />
</bean>
</code>

This will retrieve or create a registry on the localhost port 1099. 

<strong>NOTE:</strong> be sure that you do not specify the host property if you want the registry to be created. The bean will only create a registry on the localhost and only if the host property is not set.

Then we need to export the service to the registry (bind the object). To do that we use the <tt>RmiServiceExporter</tt>. 

<code lang="xml">
<bean id='rmi.service.MyRemote'
    class='org.springframework.remoting.rmi.RmiServiceExporter'>
    <property name='serviceName' value='myRemote' />
    <property name='serviceInterface' value='rmi.MyRemote' />
    <property name='service' ref='service.MyRemote' />
    <property name='registry' ref='rmi.Registry' />
</bean>
</code>

As you can see, we specify the name that the object is bound to, the registry it is to be bound to and the interface and object being bound.

Once those three beans are in place, a RMI registry will be started and have the <tt>MyRemoteImpl</tt> object bound to it. It’s as simple as that. You can test the binding with a couple lines of code: 

<code lang="java">
Registry registry = LocateRegistry.getRegistry(1099);
MyRemote myRemote = (MyRemote)registry.lookup(“myRemote�?);
Date date = myRemote.getTimestamp();
</code>

But, hey, I mentioned something about accessing the registry via JNDI. The details of the whole RMI/JNDI connection can be found in the Sun J2SE JavaDocs <a href="http://java.sun.com/j2se/1.4.2/docs/guide/jndi/jndi-rmi.html">JNDI Guide</a>, but I will show a little example code... it’s pretty simple.

Everything we have done so far stays the same except for the client code used to access the registry and lookup the object. Now we want to use JNDI. First we need to setup the JNDI properties either on the command line or some other means. I used the code below:

<code lang="java">
System.setProperty(
    Context.INITIAL_CONTEXT_FACTORY,
    "com.sun.jndi.rmi.registry.RegistryContextFactory");
    
System.setProperty(Context.PROVIDER_URL,"rmi://localhost:1099");
</code>

Then to access the bound object: 

<code lang="java">
final Context ictx = new InitialContext();
MyRemote myRemote = (MyRemote)ictx.lookup("myRemote");
    
System.out.println("Date: " + myRemote.getTimestamp());
System.out.println("Echo-> " + myRemote.echoString("Hello RMI"));
</code>

You can now access the bound objects via direct RMI or JNDI lookup and you can embed the remote references in a different spring context using the JNDI factory beans (I’ll leave that for another time).  

You can’t get much simpler than that.  ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date>2006-09-10 07:30:33</wp:post_date>
		<wp:post_date_gmt>2006-09-10 12:30:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spring-rmi-jndi-cool</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jndi"><![CDATA[JNDI]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="rmi"><![CDATA[RMI]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dynamic Script Loading</title>
		<link>http://coffeaelectronica.com/blog/2005/06/dynamic-script-loading/</link>
		<pubDate>Wed, 15 Jun 2005 13:16:36 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=298</guid>
		<description></description>
		<content:encoded><![CDATA[I figured out a way to dynamically load JavaScript files at runtime. There are times when you may not always need to import all of your external JavaScripts, or maybe you are using Ajax to load content into a div and you also need to import some script that the content needs. Here is the solution and it works in IE and <a href="http://mozilla.org/firefox">FireFox</a>: 

<code lang="javascript">
function loadLibrary(path){
    var headElt = document.getElementsByTagName("head").item(0);
    var scriptElt = headElt.appendChild(document.createElement("script"));
    scriptElt.setAttribute("type","text/javascript");
    scriptElt.setAttribute("src",path);
}</code>

Pretty simple, and all you have to do to use it is: 

<code lang="javascript">loadLibrary("scripts/myscript.js");</code>

This works for dynamically loading stylesheet too if you add a link element instead of a script element: 

<code lang="javascript">
function loadStylesheet(path){
    var headElt = document.getElementsByTagName("head").item(0);
    var scriptElt = headElt.appendChild(document.createElement("link"));
    scriptElt.setAttribute("type","text/css");
    scriptElt.setAttribute("rel","stylesheet");
    scriptElt.setAttribute("href",path);
}</code>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date>2005-06-15 08:16:36</wp:post_date>
		<wp:post_date_gmt>2005-06-15 13:16:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dynamic-script-loading</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jakarta Commons Collections - Predicates</title>
		<link>http://coffeaelectronica.com/blog/2005/01/jakarta-commons-predicates/</link>
		<pubDate>Tue, 04 Jan 2005 13:23:51 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=302</guid>
		<description></description>
		<content:encoded><![CDATA[Nestled in the <a href="http://commons.apache.org">Jakarta Commons</a> is a monstrosity called the <a href="http://commons.apache.org/collections">Jakarta Commons - Collections</a> API. It contains a wealth of extensions to the standard collections as well as new collections and collection-related utilities.

To try and document the use of the whole API would be a good topic for a book (and there are a few: <a href="http://www.amazon.com/s/ref=br_ss_hs/103-3887221-2235807?platform=gurupa&url=index%3Dblended&keywords=jakarta+commons&Go.x=0&Go.y=0&Go=Go">Amazon</a>). I am going to cover one of my favorite interfaces from this API, the Predicate, and its implementations. From the documentation for the Predicate interface:

<blockquote>A Predicate defines a functor interface implemented by classes that perform a predicate test on an object. Predicate instances can be used to implement queries or to do filtering.</blockquote>

That sums it up pretty well; but, how do you use it? 

<b>General Usage</b>

Let’s say we have an <tt>ArrayList</tt> containing ten <tt>Integer</tt> objects as follows:

<code lang="java">
List<Integer> numbers = new ArrayList<Integer>();
for(int i=0; i<10; i++){
        numbers.add(i);
}</code>

Now let’s say that for some reason only the even numbers in the list are relevant and that the rest can be ignored and/or removed. There are three main approaches to doing this with Predicates. First, you can select all even numbers from the list into a new <tt>Collection</tt>. Second, you can filter the list so that all non-even numbers are removed from the list. Third, you can create a predicated list that will only store even numbers.

Before we go any farther, we need a Predicate to work with. The Predicate interface is pretty simple, containing only a single method to implement, so I will just show it below:

<code lang="java">
public class EvenIntegerPredicate implements Predicate {
        public boolean evaluate(Object obj){
                boolean accept = false;
                if(obj instanceof Integer){
                        accept = ((Integer)obj).intValue() % 2 == 0;
                }
                return(accept);
        }
}</code>

The <tt>evaluate()</tt> method is called for each element to be tested. In this case, the object must be an Integer implementation and have an even value to be accepted.

<b>Select the Even Numbers</b>

This case uses the <tt>select(Collection,Predicate)</tt> method of the <tt>CollectionUtils</tt> class. This method selects all elements from input collection which match the given predicate into an output collection.

<code lang="java">
Predicate evenPred = new EvenIntegerPredicate();
Collection nums = CollectionUtils.select(numbers,evenPred);</code>

which will yield a new collection containing only the even numbers from the original list while the original list will remain unchanged. 

<b>Filter the Collection</b>

This next method is good when you are able to reuse the original collection once it is filtered. The <tt>CollectionUtils.filter(Collection,Predicate)</tt> method filters the collection by testing each element and removing any that the predicate rejects.

<code lang="java">CollectionUtils.filter(numbers,new EvenIntegerPredicate());</code>

Once again, only the even values are preserved; however, this time, the original collection is maintained. 

<b>Predicated List</b>

In the third approach, we use a method that allows new values to be added to the list and tested at the same time. This approach is best when you have control over the original collection and could possibly add new elements to the collection. For this we use the <tt>predicatedList(List,Predicate)</tt> method of the <tt>ListUtils</tt> class which returns a predicated list backed by the given list. Only values that are accepted by the predicate will be added to the list any other values will cause an <tt>IllegalArgumentException</tt> to be thrown.

<code lang="java">
List<Integer> list = new ArrayList<Integer>();
Predicate evenPred = new EvenIntegerPredicate();
List predList = ListUtils.predicatedList(list,evenPred);
predList.add(new Integer(2));
predList.add(new Integer(4));
predList.add(new Integer(6));
predList.add(new Integer(8));
predList.add(new Integer(10));

// this next one will throw an IllegalArgumentException
predList.add(new Integer(11));</code>

The resulting list will contain only the even values (you should be sure to use the predicated list (predList) not the original backing list.

<b>Combining Predicates</b>

I will take this discussion one step farther and pose the question, “what if you only want even integers greater than 5?" 
Your first thought might be to re-write the <tt>EvenIntegerPredicate</tt> to handle this, but a better approach would be to write a new predicate that only accepts values greater than a specified value.

<code lang="java">
public class GreaterThanPredicate implements Predicate {
        private int value;

        public GreaterThanPredicate(int value){
                this.value = value;
        }

        public boolean evaluate(Object obj){
                boolean accept = false;
                if(obj instanceof Integer){
                        accept = ((Integer)obj).intValue() > value;
                }
                return(accept);
        }
}</code>

Now we have a predicate that matches even numbers and a predicate that matches numbers greater than a specified number… how do we combine them? 

Two Predicate implementations jump to mind, <tt>AllPredicate</tt> and <tt>AndPredicate</tt>. The <tt>AllPredicate</tt> is built with an array of Predicates that must all evaluate to true for the containing predicate to be true. The <tt>AndPredicate</tt>, which we will use here, takes two predicates as arguments and returns true if both evaluate to true.

<code lang="java">
Predicate evenInt = new EvenIntegerPredicate();
Predicate greater = new GreaterThanPredicate(5);
Predicate andPred = new AndPredicate(evenInt,greater);
</code>

which could be used in any of the previous examples to accept only even numbers greater than 5. 

<b>Conclusion</b>

Predicates are a powerful tool for object filtering and searching. They are fairly simple to learn and if written properly, very reusable. At first they may feel a bit like excess code, but once you find yourself using the same predicate in multiple projects, you will see the benefits.  ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>302</wp:post_id>
		<wp:post_date>2005-01-04 08:23:51</wp:post_date>
		<wp:post_date_gmt>2005-01-04 13:23:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jakarta-commons-predicates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jakarta Commons Collections - Transformers</title>
		<link>http://coffeaelectronica.com/blog/2005/01/jakarta-commons-transformers/</link>
		<pubDate>Thu, 06 Jan 2005 13:23:53 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=308</guid>
		<description></description>
		<content:encoded><![CDATA[Continuing the example from my discussion of <a href="http://coffeaelectronica.com/blog/2005/01/jakarta-commons-predicates/">Predicates</a>, I would not like to take a quick look at Transformers. According to the JavaDocs:

<blockquote>A Tranformer defines a functor interface implemented by classes that transform one object into another.</blockquote>

They are very useful when you need to preform an action of some sort on every element, or a group of elements, in a collection.  

From the example in the previous article, we have a list of Integers, from which we needed to extract the even Integers with a value greater than 5. We developed two Predicates and used an <tt>AndPredicate</tt> to join them and achieve our goal.

Now, I would like to take the same list, repeated below and perform some transformations on it. 

<code lang="java">
List<Integer> numbers = new ArrayList<Integer>();
for(int i=0; i<10; i++){
        numbers.add(i);
}</code>

We want to take the values that are accepted by the predicates (even values greater than 5) and then multiply those by an arbitrary value, say 10. You could use an Iterator to loop through the list of filtered numbers and multiply each value by 10 or you could use a Transformer and have a reusable means of doing the same action.

<strong>Note:</strong> For this example, I am going to use the test-driven development approach. The unit tests will use the <a href="http://junit.org">JUnit</a> framework.</blockquote>

Let’s write a test case for a <tt>MultiplyTransformer</tt> that will do this. Start with the basic test shell...

<code lang="java">
public class MultiplyTransformerTest extends TestCase {

        private MultiplyTransformer multiplyTransformer;

        protected void setUp(){
                this.multiplyTransformer = new MultiplyTransformer();
        }

        protected void tearDown(){
                this.multiplyTransofmer = null;
        }
}</code> 

We will write the empty class for our Transformer as well.

<code lang="java">
public class MultiplyTransformer implements Transformer {
        public Object transform(Object input){}
}</code>

We will want to test the <tt>transform(Object)</tt> method for the case when the input is null, not an Integer, and the expected value. For this we will write three test methods. First we will test the case when the input is <tt>null</tt>. We will want to handle this gracefully and return an Integer value of zero in this case.

<code lang="java">
public void testTransform_NullInput(){
        assertEquals(new Integer(0),multiplyTransformer.transform(null));
}</code>

Next we will test for the case when the input is not an Integer. This case should throw an <tt>IllegalArgumentException</tt> as all elements should be Integers in our system.

<code lang="java">
public void testTransform_InvalidInputClass(){
        try {
                multiplyTransformer.transform(new Long(120030));
                fail("Expected Exception was not thrown!");
        } catch(IllegalArgumentException iae){
                assertNotNull(iae);
        }
}</code>

Then, finally we test the case when an Integer is passed as the input. This case should return an Integer that is a specified multiple of the original integer.

<code lang="java">
public void testTransform_Integer(){
        Integer input = new Integer(5);
        Integer result = new Integer(50);
        int mult = 10;

        multiplyTransform.setMultiplier(mult);

        assertEquals(result,multiplyTransform.transform(input));
}</code>

Now all of our test cases have been written and we can start coding the transformer itself. We already have the shell and we also know from the last test that we will need a setter for the multiplier. 

<code lang="java">
public class MultiplyTransformer implements Transformer {
        private int multiplier;

        public MultiplyTransformer(){this.multiplier = 1;}

        public MultiplyTransformer(int multiplier){this.multiplier = multiplier;}

        public void setMultiplier(int multiplier){this.multiplier = multiplier;}

        public Object transform(Object input){
                Integer result = null;
                if(input != null && input instanceof Integer){
                        int inVal = ((Integer)input).intValue();
                        result = new Integer(multiplier * intVal);
                } else if(input == null){
                        result = new Integer(0);
                } else {
                        throw new IllegalArgumentException("Not an Integer!");
                }
                return(result);
        }
}</code>

Not too bad and when we run our test cases, everything comes up green. We now have our transformer and its unit test. If we need to modify the transformer in any way, will want to run the tests to ensure that everything remains in working order.  

To use our transformer to solve our task (using the ‘numbers’ list) we need to run the predicates and then apply the transformer to the results. 

<code lang="java">
Predicate evenInt = new EvenIntegerPredicate();
Predicate greater = new GreaterThanPredicate(5);
Predicate andPred = new AndPredicate(evenInt,greater);

// get the list of even numbers greater than 5
CollectionUtils.filter(numbers,andPred);

Transformer mult = new MultiplyTransformer(10);

// multiply all values by 10
CollectionUtils.transform(numbers,mult);</code>

And there you have it. But that is not our stopping point. We modified those values so that they could be mapped and converted to other objects. Assume that we have a Map containing objects of class <tt>SomethingUseful</tt> mapped to keys that correspond to our multiplied even numbers. We need to replace the even Integers in the list with their appropriate instances of <tt>SomethingUseful</tt>.

The Collections API comes to the rescue again with the <tt>MapTransformer</tt>. This Transformer is created with a Map and when it is applied, the input objects are replaced by the object keyed to the input value. We can also combine the two transformers using a <tt>ChainedTransformer</tt>.

<code lang="java">
Predicate evenInt = new EvenIntegerPredicate();
Predicate greater = new GreaterThanPredicate(5);
Predicate andPred = new AndPredicate(evenInt,greater);

// get the list of even numbers greater than 5
CollectionUtils.filter(numbers,andPred);

Transformer mult = new MultiplyTransformer(10);

Map items = new HashMap();
items.put(new Integer(60),new SomethingUseful(60));
items.put(new Integer(80),new SomethingUseful(80));
items.put(new Integer(100),new SomethingUseful(100));
Transformer map = MapTransformer.getInstance(items);

Transformer chain = ChainedTransformer.getInstance(mult,map);

// apply the transformers
CollectionUtils.transform(numbers,chain);</code>

which gives us our complete system. Our list of Integers is filtered so that only even values greater than 5 remain. Those values are then multiplied by 10 and converted to their appropriate <tt>SomethingUseful</tt> implementations.

Transformers are a powerful tool when working with collections and there are many predefined implementations available. Also, as you can see, it’s pretty easy to write your own. As with Predicates, if you write them carefully, they can be reused in multiple projects, which is always a good thing. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date>2005-01-06 08:23:53</wp:post_date>
		<wp:post_date_gmt>2005-01-06 13:23:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jakarta-commons-transformers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Extracting A Property from Collection Elements</title>
		<link>http://coffeaelectronica.com/blog/2005/10/extracting-a-property-from-collection-elements/</link>
		<pubDate>Mon, 17 Oct 2005 16:53:55 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=311</guid>
		<description></description>
		<content:encoded><![CDATA[I wrote a little tutorial about <a href="http://coffeaelectronica.com/blog/2005/01/jakarta-commons-transformers/">Transformers</a> a while back and now I found a nice little use for them today. I needed (and do every now and then) need to extract the value of one property from every element of a collection. Yes, I could write an iterator loop and pull it out myself, but that takes more lines of code and is not reusable like this approach… I live for re-usability.

I needed a list containing the ids (long) of the elements in a collection. 

<code lang="java">
private static final Transformer tx = new InvokerTransformer("getId",null,null);

public static Long[] getIds(List list){
        Collection coll = CollectionUtils.collect(list,tx);
        return(coll != null ? (Long[])coll.toArray(new Long[0]) : null);
}</code>

The <tt>InvokerTransformer</tt> invokes the specified method and returns the result as the result of transformation. In this case, I want the result of the <tt>getId()</tt> method. The <tt>CollectionUtils.collect()</tt> method runs the transformer on each element in the incoming collection and creates a new collection containing the transformed results. Short and sweet.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date>2005-10-17 11:53:55</wp:post_date>
		<wp:post_date_gmt>2005-10-17 16:53:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>extracting-a-property-from-collection-elements</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mocking Objects With Non-Empty Constructors</title>
		<link>http://coffeaelectronica.com/blog/2007/09/mocking-objects-with-non-empty-constructors/</link>
		<pubDate>Fri, 21 Sep 2007 00:11:17 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=362</guid>
		<description></description>
		<content:encoded><![CDATA[While writing mock objects with <a href="http://jmock.org">JMock</a>, I have run into a reoccurring issue, you cannot mock concrete classes that do not have an empty constructor (this has been addressed by the JMock development team; however, the specific code line has not yet been released). Sometimes, for one reason or another, you have neither an interface nor empty constructor to mock an object with. The way JMock creates its proxied mock objects is “on creation", meaning that when you create the mock, the proxy object is created and stored, thereby not allowing you any way to specify constructor arguments.

With a little extension to the mocking API you can still mock those classes. The solution is a simple extension of the <a href="http://cglib.sourceforge.net">CGLIB</a>-based functionality that is already there such that the proxy is created only when the <tt>proxy()</tt> method is called. The code of the two classes needed is shown below:

<code lang="java">
public class CGLIBCoreLazyMock extends AbstractDynamicMock implements MethodInterceptor {

        private Enhancer enhancer;
        private Class[] argTypes;
        private Object[] args;
        private Object proxy;

        public CGLIBCoreLazyMock(Class mockedType,Class[] argTypes,Object[] args){
                super(
                        mockedType,
                        mockNameFromClass(mockedType),
                        new LIFOInvocationDispatcher()
                );
                this.argTypes = argTypes;
                this.args = args;
                this.enhancer = new Enhancer();
                enhancer.setSuperclass(mockedType);
                enhancer.setCallback(this);
        }

        public Object proxy() {
                if(proxy == null){
                        this.proxy = enhancer.create(argTypes,args);
                }
                return(proxy);
        }

        public Object intercept(Object thisProxy, Method method,
                Object[] args, MethodProxy superProxy ) throws Throwable {
                return mockInvocation(new Invocation(proxy,method,args));
        }
}</code>

and then a Mock extension. 

<code lang="java">
public class LazyMock extends org.jmock.Mock {
        public LazyMock(Class mockedType,Class[] argTypes,Object[] args){
                super(new CGLIBCoreLazyMock(mockedType,argTypes,args));
        }
}</code>

By adding this functionality to JMock, you can mock these classes and still use all of the stub and expectation features that JMock provides. My first resolution to this problem was a quick custom hack using CGLIB. As it threatened to get more complex, I took a peek at the JMock source and found that it would not be hard to implement.

I guess I could have gotten the source and added it directly to their code base, and I even looked at doing that right off, but their project was Ant-based and seemed to be missing some of the pieces required for the build. I just made a little extension jar and it seems to work well enough.

<blockquote><b>Update:</b> <a href="http://jmock.org">JMock 2</a> fixes this issue internally and has a lot of other improvements. See <a href="http://coffeaelectronica.com/blog/2007/09/are-you-still-mocking-me/">Are You Still Mocking Me?</a> for updated information.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>362</wp:post_id>
		<wp:post_date>2007-09-20 19:11:17</wp:post_date>
		<wp:post_date_gmt>2007-09-21 00:11:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mocking-objects-with-non-empty-constructors</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jmock"><![CDATA[JMock]]></category>
		<category domain="post_tag" nicename="mocking"><![CDATA[Mocking]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>When Ajax Was Still Just a Cleanser</title>
		<link>http://coffeaelectronica.com/blog/2006/11/when-ajax-was-still-just-a-cleanser/</link>
		<pubDate>Wed, 15 Nov 2006 00:17:35 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=365</guid>
		<description></description>
		<content:encoded><![CDATA[A few years ago the company I was working for did the <a href="http://simcityscape.com">SimCityScape</a> web interface, which was the online component to the SimCity 2 game (EA Games/Maxis). I was the developer assigned to do the high-end JavaScript and any other programming for the site, while the CSS and design work was done by one of our graphic designers. One of the requirements was that the game interface should not have to reload when an action is performed... it was a very heavy interface with a pile of images that all had to be placed with some complex JavaScript -- to reload this page with each action would have made the game unplayable.

These days I am sure the first thing that pops into your head is "AJAX, baby!"... well maybe without the "baby" part; however, back a couple years ago Ajax was still just a cleanser and there was no well-supported means of accomplishing "behind the scenes" data transfer without a page reload.

So what did I do? Well, I’ll tell you but you have to promise you won’t run away screaming... I am going to say a word that has a lot of undue negativity associated with it... applet.

Yes, I said it; I used an applet embedded in the page to allow the interaction on the front end to communicate with the backend, sans reload. It worked great, though I am not saying there weren’t some issues with it, especially since we had a "no plugin" requirement put on us, meaning that I only had the MS IE JVM (which is still lost somewhere around Java 1.1) available to me. I was able to use JavaScript to interface with the applet on the page which would fire off a request to the server. The server response was formatted text that was parsed into a data structure and returned to the JavaScript on the page (no <a href="http://json.org">JSON</a> back then either). The nice thing about using an applet was that you could pass Java objects back to JavaScript and "just use them". No fuss. No conversion.

Today I had the thought that even with all of this Ajax goodness, there still may be an interest in using an applet... so I will work a simple little example that does everything I mentioned above.

Let’s just make a simple data retrieval applet to demonstrate my point. You can take it from there if you are interested. The applet itself is quite simple. You just want to extend <tt>JApplet</tt> and override the <tt>init()</tt> method. All we are doing in our <tt>init()</tt> is getting the server url (there are other ways of getting this, but this is nice and easy). The applet code is shown below:

<code lang="java">
public class ControllerApplet extends JApplet {
    private String baseUrl;

    public void init() {
            this.baseUrl = getParameter("base.url");
            super.init();
    }

    public Map retrieveData(int id) throws Exception {
            Map map = new HashMap();
            URL url = new URL(baseUrl + "?pid=" + id);
            BufferedReader reader = null;
            try {
                    reader = new BufferedReader(
                            new InputStreamReader(url.openStream())
                    );
                    String line = reader.readLine();
                    if(line != null){
                            String[] nvps = line.split(";");
                            for(int n=0; n<nvps.length; n++){
                                    String[] parts = nvps[n].split(":");
                                    ap.put(parts[0],parts[1]);
                            }
                    }
            } catch(Exception ex){throw ex;}
            finally {
                    if(reader != null){
                            try {reader.close();} catch(Exception e){}
                    }
            }
            return(map);
    }
}</code>

You will notice that the interesting method is the <tt>retrieveData(int)</tt> method. This is where the fun is. This method opens a stream to a local url (must be on the same server) and retrieves data from a JSP page (shown later) using a parameter. The data returned is read into a map which will then be used by the JavaScript that calls the applet.

Let’s embed this applet in a page and see something happen. I am only going to show the important fragments:

<code lang="html">
<APPLET name='controller' code='controller.ControllerApplet' width='0' height='0' mayscript='mayscript'>
    <PARAM name='base.url' value='http://localhost:8080/data.jsp' />
</APPLET>
    
<form name='theForm'>
    Person:
    <select name='pid'>
            <option value='1'>Abe Ableman</option>
            <option value='2'>Bob Baker</option>
    </select><br/>
    <button onClick='doSubmit(document.theForm.pid.value)'>Retrieve Info</button>
</form>
</code>

There is a lot to look at here. The first thing is the applet tag (you probably should use the Java Plugin object/embed tags, but this works for both IE and FireFox). The applet tag is given a name so that it can be easily referenced and <tt>mayscript</tt> is set so that we can call the applet using JavaScript. Also of note is the fact that this applet is 0 by 0; It's a stealth applet.

The form is just a simple select list to pick a person that you want to retrieve information about. Now we need the JavaScript function that does the work:

<code lang="javascript">
function doSubmit(pid){
    try {
            var data = document.applets['controller'].retrieveData(pid);

            var info = 'Name: ' + data.get('Name') + '\n' +
                    'Department: ' + data.get('Department') + '\n' +
                    'Title: ' + data.get('Title');
            alert(info);
    } catch(ex){
            alert('Exception: ' + ex.toString());
    }
}</code>

That wasn’t too bad. Basically all you have to do is call the <tt>retrieveData(int)</tt> method on the applet and the applet does the rest. One feature I have always liked about this is the ability to pass actual Java objects from the applet to the JavaScript. You will note that the data structure used here is a <tt>Map</tt> and JavaScript has no problems letting you handle it on the client side.

The JSP page I used for this is just a simple data switch:

<code>
<%@ page language="java" contentType="text/plain" pageEncoding="UTF-8"%><%
String pid = request.getParameter("pid");
if(pid != null && pid.equals("1")){
    out.println("Name:Abe Ableman;Department:Accounting;Title:Head Bean Counter;");
} else if(pid != null && pid.equals("2")){
    out.println("Name:Bob Baker;Department:Development;Title:Code Slave;");
} %>
</code>

Ultimately that’s all there is to it and this example works on IE 6 and FireFox 1.5. You can expand this to use XML, SOAP, formal HTTP clients, etc, but this is the meat of it all. The big problem you run into is security restraints that keep you in your own domain and the fact that the applet must be loaded before you can use it. The latter seems obvious, but I ran into cases where things were not loaded as you would expect.

In my opinion, Ajax is a more stable way of doing things, but you should always keep alternatives like this in mind. Applets got a bad reputation over the years that I don’t think they really deserve; they were an amazing addition to the web when they came out and they can still be pretty cool.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>365</wp:post_id>
		<wp:post_date>2006-11-14 19:17:35</wp:post_date>
		<wp:post_date_gmt>2006-11-15 00:17:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>when-ajax-was-still-just-a-cleanser</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[Ajax]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Velociscript</title>
		<link>http://coffeaelectronica.com/blog/2006/07/velociscript/</link>
		<pubDate>Sun, 02 Jul 2006 00:32:50 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=384</guid>
		<description></description>
		<content:encoded><![CDATA[I was toying with the idea of <a href="http://velocity.apache.org">velocity</a>-like expression evaluation and replacement on the client-side and I came up with this handy little JavaScript function:

<code lang="javascript">
function ev(str,model){
    var buf = "";
    for(var t=0; t<str.length; t++){
            var tok = str.charAt(t);
            if(tok == "$" && str.charAt(t+1) == "{"){
                    t += 2;
                    tok = str.charAt(t);

                    var expr = "";
                    while(tok != "}"){
                            expr += tok;
                            t++;
                            tok = str.charAt(t);
                    }

                    buf += eval(expr);
            } else {
                    buf += tok;
            }
    }
    return(buf);
}</code>

which will evaluate the given string using the specified model object (or null). The template string may also access global JavaScript functions or any other valid JavaScript. An example of its usage is shown below.

First the helper function: 

<code lang="javascript">
function onGo(){
    var resultElt = document.getElementById(“result�?);
    resultElt.innerHTML = ev(resultElt.innerHTML,new Date());
}
</code>

Then the HTML that calls the helper function: 

<code lang="html">
Name: <input type="text" id="name" />
<button onclick="doGo()">Go</button><br/>
    
<span id="result">
    Your name is: ${document.getElementById("name").value} and 
    today is: ${model.getMonth()+1}/${model.getDate()}/${model.getFullYear()}
</span>
</code>

When you enter a name and click "Go", the template string will be replaced by the evaluated string which contains the name value from the form field and the formatted date. The model object passed in was a JavaScript <tt>Date</tt> object, but it could have been any object.

This still needs a little work and could use some regex love from a regex guru, but it works on both IE and FireFox.

It might be interesting to expand this a bit more to create a Velociscript object engine similar to Velocity itself so that templates can be managed and cached... we’ll see what happens when I start using this code.  ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>384</wp:post_id>
		<wp:post_date>2006-07-01 19:32:50</wp:post_date>
		<wp:post_date_gmt>2006-07-02 00:32:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>velociscript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lazy Bean Mapping and the Command Pattern</title>
		<link>http://coffeaelectronica.com/blog/2005/10/lazy-bean-mapping-and-the-command-pattern/</link>
		<pubDate>Thu, 27 Oct 2005 00:08:55 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=394</guid>
		<description></description>
		<content:encoded><![CDATA[In doing some refactoring recently, I came up with a useful base class for my command pattern managers (manager beans that have a bunch of commands associated with them), here I will call it the <tt>LazyBeanManager</tt>.

Consider a case where you have a manger that manages a bunch of actions, and that you want the whole setup to be very lazy -- only load the manager when it is used AND only load a command action when it is requested. This is very simple to accomplish. First assume you have the following spring config: 

<code lang="xml">
<bean id="manager" class="example.MyManager" lazy-init="true">
    <property name="commands">
            <map>
                    <entry key="cmdA" value="commandA" />
                    <entry key="cmdB" value="commandB" />
            </map>
    </property>
</bean>
    
<bean id="commandA" class="example.CommandA" lazy-init="true" />
    
<bean id="commandB" class="example.CommandB" lazy-init="true" />
</code>

You see that we have a simple command pattern configured. There is a manager which somehow routes control to a command bean. The first bit of laziness you should notice is the <tt>lazy-init="true"</tt> set on all three beans. This tells Spring not to load these beans until something else references them. The second bit of laziness is that the command beans are referenced by value (their bean id) rather than reference, which prevents the command beans from loading when the manager bean loads. At this point, Spring does not know how to do anything with the map of command beanIds. The following simple class will take care of that:

<code lang="java">
public class MyManager implements ApplicationContextAware {
    private Map commands;
    private ApplicationContext context;
    public setApplicationContext(ApplicationContext context) throws BeansException {
            this.context = context;
    }

    public void setCommands(Map commands){this.commands = commands;}

    public void execute(String commandId){
            Command cmd = findCommand(commandId);
            if(cmd != null){cmd.execute();}
    }

    protected Command findCommand(String cmdId){
            Command obj = null;
            String beanId = MapUtils.getString(mappings,cmdId);
            if(StringUtils.isNotEmpty(beanId)){
                    obj = (Command)context.getBean(beanId,Command.class);
            }
            return(obj);
    }
}
</code>

<b>Note:</b> Some un-important classes are not shown here. This is just to give you the general idea of the manager. 

You will notice that the <tt>ApplicationContext</tt> is injected into the manager by Spring through the implementation of the <tt>ApplicationContextAware</tt> interface. Now, when your application needs to execute one of these commands, you simply pull the manager bean out of spring (which will load only the manager), call the execute(String) method with the desired command id. Then, only the desired command bean will be loaded and executed.

This has come in very handy recently for handling front end interface actions. This laziness allows the system to start up faster, be more stable, and more memory efficient. Sometimes being lazy is a good thing. In my development, I have created an abstract lazy mapping manager using this strategy... it works great. 

What I would like to come up with is a version of this that not only does lazy loading, but then unloads the bean after a period of idle time — I am not sure whether Spring currently supports this or not. Something to look into.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>394</wp:post_id>
		<wp:post_date>2005-10-26 19:08:55</wp:post_date>
		<wp:post_date_gmt>2005-10-27 00:08:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lazy-bean-mapping-and-the-command-pattern</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="patterns"><![CDATA[Patterns]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Embedding Jetty in Spring</title>
		<link>http://coffeaelectronica.com/blog/2006/02/embedding-jetty-in-spring/</link>
		<pubDate>Thu, 02 Feb 2006 00:19:22 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=397</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>The discussion here is based on Jetty 5, while Jetty 6 makes things a lot easier to do. I have an updated version of this post for Jetty 6, <a href="http://coffeaelectronica.com/blog/2008/08/embedding-jetty-6-in-spring/">Embedding Jetty 6 in Spring</a>.</blockquote>

I came across <a href="http://jetty.mortbay.org">Jetty</a> a while back and finally got around to really playing with it recently. I was amazed at how flexible it was and how easy it was to embed it inside a <a href="http://springframework.org">Spring</a> Application Context. I did have to write a couple of small helper extensions to ease things along but other than that it was pretty much just a configuration exercise. What follows is a brief discussion on what I did and how I did it.<sup>1</sup>

Basically what you need, per the Jetty documentation, is an <tt>HttpServer</tt> instance listening on a port, and an <tt>HttpContext</tt> with a couple <tt>Handler</tt>s. If all you want is a simple web server, with no servlet support it’s very easy and requires no special extensions. Add the following beans to a spring bean config file:

<code lang="xml">
<bean id='httpServer' class='org.mortbay.http.HttpServer' init-method='start'>
    <property name='listeners'>
            <list>
                    <bean class='org.mortbay.http.SocketListener'>
                            <property name='port' value='80' />
                    </bean>
            </list>
    </property>
    <property name='contexts'>
        <list>
            <bean class='org.mortbay.http.HttpContext'>
                <property name='contextPath' value='/' />
                <property name='resourceBase' value='c:/' />
                <property name='handlers'>
                    <list>
                        <bean class='org.mortbay.http.handler.ResourceHandler'/>
                    </list>
                </property>
            </bean>
        </list>
    </property>
 </bean>
</code>

Now, when you start up the Spring Application Context you will also start up an HTTP Server listening on port 80 that will serve pages from your <tt>C</tt> drive. How much simpler could that be? You could get rid of the <tt>init-method</tt> and set <tt>lazy-init</tt> to true if you don’t need/want it to fire up right away.

Okay, so web server shmeb server you say? Let’s get down to something more interesting. Now, let’s turn this plain old HTTP server into a servlet container... amazingly enough, there is not much more required to make this happen; however, we do need some extensions in order to work with things in Spring. 

First, we will need an instance of <tt>ServletHttpContext</tt> instead of the HTTP Context that we have in there now (or you could set it up to use both). Unfortunately, the standard <tt>ServletHttpContext</tt> class only has "add" methods for adding servlets... there is no bulk setter; so we have to add one, which leads up to our first helper class, the <tt>ServlerHttpContextBean</tt>. All this class does is extend <tt>ServletHttpContext</tt> and add the following method:

<code lang="java">
public void setServletMappings(Map servletMappings) throws Exception {
    if(MapUtils.isNotEmpty(servletMappings)){
            Iterator paths = servletMappings.keySet().iterator();
            while(paths.hasNext()){
                    String path = (String)paths.next();
                    ServletDefinitionBean servletConfig =
                            (ServletDefinitionBean)servletMappings.get(path);
                     // add the servlet to the context
                    ServletHolder holder = addServlet(
                            servletConfig.getBeanName(),
                            path,
                            servletConfig.getServletClassName()
                    );

                    // configure the holder
                    if(holder != null){
                            if(servletConfig.getInitOrder() != -1){
                                    holder.setInitOrder(servletConfig.getInitOrder());
                            }

                            Enumeration e = servletConfig.getInitParameterNames();
                            while(e.hasMoreElements()){
                                    String name = (String)e.nextElement();
                                    holder.setInitParameter(
                                            name,
                                            servletConfig.getInitParameter(name)
                                    );
                            }
                    }
            }
    }
}</code>

<b>Note:</b> Some of my collection helper classes are not shown, but their method signatures should be a good enough explanation of what they do. 

The servlet mappings (Path key to <tt>ServletDefinitionBean</tt> value) are processed to add each servlet to the context and then configure its holder to set any initialization parameters. 

You will notice the other helper class being used to configure the servlets. The <tt>ServletDefinitionBean</tt> is used to allow Spring configuration of the servlets to be added. This is a fairly simple class:

<code lang="java">
public class ServletDefinitionBean implements Serializable,BeanNameAware {

    private static final long serialVersionUID = 8232043638313653802L;
    private String beanName,servletClassName;
    private Map initParameters;
    private int initOrder = -1;

    public ServletDefinitionBean(){super();}

    public void setInitOrder(int initOrder) {this.initOrder = initOrder;}

    public int getInitOrder() {return initOrder;}

    public String getServletClassName() {return servletClassName;}

    public void setServletClassName(String servletClass) {
            this.servletClassName = servletClass;
    }

    public String getBeanName() {return beanName;}

    public void setBeanName(String beanName) {this.beanName = beanName;}

    public void setInitParameters(Map initParameters){
            this.initParameters = initParameters;
    }

    public Enumeration getInitParameterNames(){
            if(MapUtils.isNotEmpty(initParameters)){
                    return(IteratorUtils.asEnumeration(
                            initParameters.keySet().iterator())
                    );
            } else {
                    return(CollectionUtils.EMPTY_ENUMERATION);
            }
    }

    public String getInitParameter(String name){
            return(MapUtils.getString(initParameters,name));
    }
}
</code>

This class is used to store the initialization parameters and any other data required to configure a servlet. And that’s it. Now all you need to do is update the spring configuration to use the new beans. 

<code lang="xml">
<bean id='httpServer' class='org.mortbay.http.HttpServer' init-method='start'>
    <property name='listeners'>
            <list>
                    <bean class='org.mortbay.http.SocketListener'>
                           <property name='port' value='80' />
                    </bean>
            </list>
    </property>
    <property name='contexts'>
            <list>
                    <bean class='com.stehno.spring.jetty.ServletHttpContextBean'>
                            <property name='contextPath' value='/' />
                            <property name='resourceBase' value='c:/' />
                            <property name='handlers'>
                            <list>
                            <bean class='org.mortbay.http.handler.ResourceHandler' />
                            <bean class='org.mortbay.jetty.servlet.ServletHandler' />
                            </list>
                            </property>
                            <property name='servletMappings'>
                                    <map>
                                    <entry key='/hi/*' value-ref='helloServlet'/>
                                    </map>
                            </property>
                    </bean>
            </list>
    </property>
</bean>
</code>

You will notice that in order to serve normal resources, you still need to include a <tt>ResourceHandler</tt>. I have mapped the 'helloServlet' to the path '/hi/*'. The servlet definition bean is configured as follows:

<code lang="xml">
    <bean id='helloServlet' class='com.stehno.spring.jetty.ServletDefinitionBean'>
        <property name='servletClassName' value='test.HelloServlet' />
        <property name='initParameters'>
                <map>
                        <entry key='text' value='Hello Jetty-embedded Spring!' />
                </map>
        </property>
    </bean>
</code>

It’s just a simple Hello World type servlet that I will leave you to write yourself. But, if you fire up the Application Context and point your browser to 'http://localhost/hi/blah' you will run this servlet. 

I have not fully put this through its paces, but I have installed and run a Spring Dispatcher servlet that had its own application context with controllers and was able to hit the controllers and get the expected response. Jetty seems to be well-developed and very flexible and combining it with spring makes it even more so. I think there are many uses for this setup. It could be used in a desktop application to provide web services, for unit testing of servlets or controllers, or for web proxy-ing.

<sup>1</sup> Some of the code has been pulled into a project that I was playing with. It is now dormant and not guaranteed to work, but it should suffice as an example. See the stehno-esm projects in the <a href="http://sjrf.svn.sourceforge.net/viewvc/sjrf/">subversion repository</a> for <a href="http://sourceforge.net/projects/sjrf">SJRF</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>397</wp:post_id>
		<wp:post_date>2006-02-01 19:19:22</wp:post_date>
		<wp:post_date_gmt>2006-02-02 00:19:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>embedding-jetty-in-spring</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="jetty"><![CDATA[Jetty]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Single-line Collection Creation</title>
		<link>http://coffeaelectronica.com/blog/2007/10/single-line-collection-creation/</link>
		<pubDate>Wed, 10 Oct 2007 01:03:22 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=408</guid>
		<description></description>
		<content:encoded><![CDATA[I like having nice compact code. No, I am not one of those 'write the whole app on one line' developers, but I do like code collapsed and out of the way. One of the things that has always annoyed me was that while you can create and populate an array on one line, you cannot do the same with <tt>Map</tt>s, <tt>List</tt>s, and <tt>Set</tt>s... but I finally realized that there is a very simple way to do it using instance initializers.

<code lang="java">Map<String,String> map = new HashMap<String, String>(){{put("akey","avalue");}}</code>

Basically you are anonymously extending the <tt>HashMap</tt> and calling the <tt>put</tt> method to populate the data. Notice the double curley braces.

I am not suggesting that all of your collection populating should be done this way; however, it is nice when you simply want a single value put in a map for some reason.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>408</wp:post_id>
		<wp:post_date>2007-10-09 20:03:22</wp:post_date>
		<wp:post_date_gmt>2007-10-10 01:03:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>single-line-collection-creation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Recursion vs Iteration</title>
		<link>http://coffeaelectronica.com/blog/2007/09/recursion-vs-iteration/</link>
		<pubDate>Fri, 28 Sep 2007 14:57:54 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=413</guid>
		<description></description>
		<content:encoded><![CDATA[Say you have a directory under which there can be multiple sub-directories of infinite depth each with any number of files. If you wanted to walk down the directory tree and do some sort of processing of the files the first thing that always came to my mind was recursion. Write a little recursive method to iterate over the files and call the method again on directories, performing the processing as you go. Something like this:

<code lang="java">
void walk(File dir){
    for(File item : dir.listFiles()){
        if(item.isDirectory()){
            walk(item);
        } else {
            // process file
        }
    }
}
</code>

Now, this works fine and I have never run into problems with the approach; however, the iterative approach can be a useful and often more efficient alternative. Rather than recursively calling the <tt>walk()</tt> method, perform the looping and use a <tt>Stack</tt> object to maintain the set of directories to be searched. Here is what I mean:

<code lang="java">
void walk(File dir){
    Stack<File> stack = new Stack<File>();
    stack.push(dir);

    while(!stack.isEmpty()){
        for(File item : stack.pop().listFiles()){
            if(item.isDirectory()){
                stack.push(item);
            } else {
                // process file
            }
        }
    }
}
</code>

This method does the same thing but without recursion. I would like to do some profiling of the two approaches to see how each performs for various directory structures.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>413</wp:post_id>
		<wp:post_date>2007-09-28 09:57:54</wp:post_date>
		<wp:post_date_gmt>2007-09-28 14:57:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>recursion-vs-iteration</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Map Iteration Tip</title>
		<link>http://coffeaelectronica.com/blog/2007/09/map-iteration-tip/</link>
		<pubDate>Fri, 28 Sep 2007 15:03:26 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=416</guid>
		<description></description>
		<content:encoded><![CDATA[Say you have a <tt>Map</tt> and that you need to iterate over its contents and do something with both the key and the value for each mapping. I have often seen the following code used:

<code lang="java">
Iterator i = map.keySet().iterator();
while(i.hasNext()){
    Object key = i.next();
    Object val = map.get(key);
    // do something with them
}</code>

While this is correct and generally there is nothing wrong with it, you are doing an extra <tt>get()</tt> call into the map; however, if you iterate over the entry Set you can remove that extra call:

<code lang="java">
Iterator i = map.entrySet().iterator();
while(i.hasNext()){
    Entry entry = (Entry)i.next();
    Object key = entry.getKey();
    Object val = entry.getValue();
    // do something with them
}</code>

Also, as a side note, with Java 5 and above you can use the new foreach loop to simplify things even more:

<code lang="java">
for(Entry<Object,Object> entry : map.entrySet()){
    Object key = entry.getKey();
    Object val = entry.getValue();
    // do something
}</code>

It’s not going to double your processing speed or anything, but it is more efficient, especially when you are iterating over a large map of items.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>416</wp:post_id>
		<wp:post_date>2007-09-28 10:03:26</wp:post_date>
		<wp:post_date_gmt>2007-09-28 15:03:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>map-iteration-tip</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fun With Robot: Screen Wrapping</title>
		<link>http://coffeaelectronica.com/blog/2008/04/fun-with-robot-screen-wrapping/</link>
		<pubDate>Fri, 04 Apr 2008 13:22:27 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=314</guid>
		<description></description>
		<content:encoded><![CDATA[I was poking through the JavaDocs last night and came across a few classes that I had never played with before, <tt>java.awt.Robot</tt> and <tt>java.awt.MouseInfo</tt> so I decided to have a little fun. Have you ever wanted your mouse to be able to wrap around the edge of the screen? No, well me neither, but I thought it would be fun to implement:

<code lang="java">
public class WrapIt {

    public static void main(String[] args){
        final Robot robot = new Robot();
        final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        final Rectangle screen = new Rectangle(new Point(0,0),screenSize);
        while(true){
            final Point point = MouseInfo.getPointerInfo().getLocation();
            if(point.x >= screen.width-1){
                robot.mouseMove(0,point.y);
            } else if(point.x <= 1){
                robot.mouseMove(screen.width,point.y);
            } else if(point.y >= screen.height-1){
                robot.mouseMove(point.x,0);
            } else if(point.y <= 1){
                robot.mouseMove(point.x,screen.height);
            }
            Thread.sleep(100);
        }
    }
}</code>

When you hit an edge of the screen, this app will cause your mouse cursor to jump to the opposite side of the screen; it works on all four sides of the screen. I have no idea if this will work on multi-monitor setups; if not, I know it could be made to.

It is interesting that you can control and read the mouse position, even when you are not "over" java territory (e.g. not over a JFrame or Window). I did not find any way to catch mouse events when not in a java context; you can catch mouse move events over a Java component (e.g. JFrame, etc) but not over others, like the desktop; so the position polling loop was necessary and there seems to be no way to get other events like mouse clicks or drags, which is kind of a bummer.

You could very easily throw a <tt>SystemTray</tt> icon around this and turn it into a little app for people who do like this kind of mouse wrapping. If there is anyone who would like something like that I would be happy to code it up and make it available, just let me know (we are talking about an hour of coding so if you want it just ask).

On a final, semi-related note, there is a screen capture method in the Robot class that also sounds like a good candidate for some play time, but I will save that for another post.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date>2008-04-04 08:22:27</wp:post_date>
		<wp:post_date_gmt>2008-04-04 13:22:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fun-with-robot-screen-wrapping</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Interesting Way to Hide Behind Interfaces</title>
		<link>http://coffeaelectronica.com/blog/2008/02/interesting-way-to-hide-behind-interfaces/</link>
		<pubDate>Wed, 27 Feb 2008 23:43:39 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=317</guid>
		<description></description>
		<content:encoded><![CDATA[While working on one of my projects I stumbled on an interesting way to code to interfaces even when the "factory" class is in a different package than the interface and implementation. Say you have an interface, <tt>IBar</tt> in a package called <tt>app.manager</tt>:

<code lang="java">
package app.manager;
    
public interface IBar {
    String getValue();
}</code>

and an implementation of the interface in the same package, called <tt>Bar</tt>:

<code lang="java">
package app.manager;
    
public class Bar implements IBar {
    
    private String value;
   
    protected Bar(final String value){
        this.value = value;
    }
    
    public String getValue() {return value;}
}</code>

Notice that the interface and the implementation are in the same package and that the constructor for <tt>Bar</tt> is <tt>protected</tt> so that instances cannot be simply constructed unless you extend the class... and that is exactly what we are going to do in the "client" class, <tt>Foo</tt>:

<code lang="java">
package app;
    
import app.manager.Bar;
import app.manager.IBar;
    
public class Foo {
    
    private IBar bar;
    
    public static void main(final String[] args){
        final Foo foo = new Foo();
        final IBar bar = foo.getBar();
        System.out.println("--> " + bar.getValue());
    }
    
    public IBar getBar(){
        if(bar == null) bar = new Bar("TheValue"){}; // <-- the magic
        return bar;
    }
}</code>

As you can see here, the <tt>Foo</tt> class is in a different package than the interface and its implementation. You can play an interesting little code trick and do an inline extension of <tt>Bar</tt> to implement the <tt>IBar</tt> interface to be stored for later use. Obviously, any client class could just do this in their code; however, it requires the extra step which should make you stop and think about what you are doing. Also in the documentation for the protected constructor in <tt>Bar</tt> you would want to document where valid instances can be retrieved and that by contract the class should never be directly instantiated anywhere. This allows you to code to interfaces while still maintaining useful package hierarchies.

This is not profound or anything but I thought it was an interesting little trick. The question now is whether or not it is bad design... I guess I will have to play with it for a while to find out.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date>2008-02-27 18:43:39</wp:post_date>
		<wp:post_date_gmt>2008-02-27 23:43:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>interesting-way-to-hide-behind-interfaces</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scaling Images With Groovy</title>
		<link>http://coffeaelectronica.com/blog/2008/03/scaling-images-with-groovy/</link>
		<pubDate>Mon, 03 Mar 2008 15:00:02 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=320</guid>
		<description></description>
		<content:encoded><![CDATA[I had the need to scale some large JPG images from my camera so I whipped up a quick little <a href="http://groovy.codehaus.org">Groovy</a> script to do the trick. Thought I would share.

<code>
// groovy ScaleImages.groovy DIRNAME SCALE%
    
import javax.imageio.ImageIO
import java.io.File
import java.awt.Image
import java.awt.Color
import java.awt.image.BufferedImage
    
class ScaleImages {
    
    static void main(String[] args){
        def directory = new File(args[0])
        if(!directory.isDirectory()){
            System.out.println("You must specify a valid directory!")
            System.exit(0)
        }
    
        def scale = Integer.valueOf(args[1])
    
        directory.eachFile {
            def image = ImageIO.read(it)
            int w = image.getWidth() * scale / 100
            int h = image.getHeight() * scale / 100
    
            def scaled = image.getScaledInstance(w,h,Image.SCALE_SMOOTH)
   
            def newImage = new BufferedImage(w,h,image.getType())
            def graphics = newImage.createGraphics()
            graphics.drawImage(scaled,0,0,w,h,Color.white,null)
			
            if(ImageIO.write(newImage,"jpg",new File(it.getParent(),"scaled_" + it.getName()))){
                System.out.println("scaled: " + it);
            } else {
                System.out.println("failed: " + it);
            }
        }
    }
}</code>

It's pretty simple. You load the image file to create a <tt>BufferedImage</tt>. You then create a scaled <tt>Image</tt> and draw it onto the new empty <tt>BufferedImage</tt> and save it off. I would recommend some performance enhancements if you are doing huge batches of images but for a directory containing a handful of images it works great and pretty fast. Also, note that this does not handle sub-directories of images, only the directory that you give it.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>320</wp:post_id>
		<wp:post_date>2008-03-03 10:00:02</wp:post_date>
		<wp:post_date_gmt>2008-03-03 15:00:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scaling-images-with-groovy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Playlist Randomization</title>
		<link>http://coffeaelectronica.com/blog/2007/12/playlist-randomization/</link>
		<pubDate>Thu, 20 Dec 2007 13:00:45 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=334</guid>
		<description></description>
		<content:encoded><![CDATA[I love <a href="http://winamp.com">WinAmp</a>; however, I have always felt that it's playlist randomization was a little on the weak side. Not really wanting to dive into writing a C++ winamp plugin, I took the alternate approach of writing a <a href="http://groovy.codehaus.org">Groovy</a> script to randomize playlist files.

<code>
// PlaylistRandomizer.groovy
import java.io.File
import java.util.ArrayList
import java.util.Collections
import java.security.SecureRandom

def songs = new ArrayList()
new File(args[0]).eachLine {
    if(!it.startsWith('#')){
        songs << it
    }
}
    
Collections.shuffle(songs,new SecureRandom())
    
def writer = new File("random_${args[0]}").newWriter()
songs.each {
    writer.writeLine(it)
}
writer.close()
    
println 'Done.'
</code>

You execute it with the file name of the playlist you want to shuffle.

<pre>groovy PlaylistRandomizer rock_n_roll.m3u</pre>

and it will generate a new, shuffled file, <tt>random_rock_n_roll.m3u</tt>.

It's pretty simple and straight-forward. I am sure that I could spend a bit more time with it and pare it down a bit, but isn't quick simplistic functionality one of the benefits of scripting languages?

<b>Note:</b> I used <tt>SecureRandom</tt> instead of just the standard <tt>Random</tt> because it provides better shuffling, though the difference is not all that significant.

For some fun and practice, I should implement the same script in <a href="http://ruby-lang.org">Ruby</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>334</wp:post_id>
		<wp:post_date>2007-12-20 08:00:45</wp:post_date>
		<wp:post_date_gmt>2007-12-20 13:00:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>playlist-randomization</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Playlist Randomization: Ruby-style</title>
		<link>http://coffeaelectronica.com/blog/2007/12/playlist-randomization-ruby-style/</link>
		<pubDate>Fri, 21 Dec 2007 12:36:17 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=337</guid>
		<description></description>
		<content:encoded><![CDATA[Yesterday I posted a little script for randomizing WinAmp playlists, <a href="http://coffeaelectronica.com/blog/2007/12/playlist-randomization/">Playlist Randomization</a>. I ended the post with an interest in writing the same thing in <a href="http://ruby-lang.org">Ruby</a>. I was able to do it in about ten minutes.

<code lang="ruby">
# rand_playlist.rb
lines = []
File.open("#{ARGV[0]}","r") do |file|
    while(line = file.gets)
        unless line[0..0] == '#' 
            lines << line
        end
    end
end
    
lines.sort! { rand(3) - 1 }
    
out_file = File.new("random_#{ARGV[0]}","w");
lines.each do |line|
    out_file.puts line
end
</code>

You run this one the same as the last, except using ruby:

<pre>ruby rand_playlist.rb rock_n_roll.m3u</pre>

I wonder if there are other languages I should try implementing this in.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date>2007-12-21 07:36:17</wp:post_date>
		<wp:post_date_gmt>2007-12-21 12:36:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>playlist-randomization-ruby-style</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Circular Arrays</title>
		<link>http://coffeaelectronica.com/blog/2008/01/circular-arrays/</link>
		<pubDate>Fri, 25 Jan 2008 14:29:53 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=356</guid>
		<description></description>
		<content:encoded><![CDATA[Another one of those, "well, duh" moments... a very easy way to do wrap-around or circular array indexing.

<code lang="java">i = (i + 1) % N</code>

Where i is your current index and N is the length of the array.

Say you have an array of five elements. When you are currently on element of index 2, your next index will be:

<code lang="java">i = (2 + 1) % 5 = 3</code>

However, once you get to the last element, index 4:

<code lang="java">i = (4 + 1) % 5 = 0</code>

Viola, you are back at 0 again. I don't know why but I really neglect the mod operator (%). It has some interesting uses.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>356</wp:post_id>
		<wp:post_date>2008-01-25 09:29:53</wp:post_date>
		<wp:post_date_gmt>2008-01-25 14:29:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>circular-arrays</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hidden Gems in Arrays.asList()</title>
		<link>http://coffeaelectronica.com/blog/2008/01/hidden-gems-in-arrays-aslist/</link>
		<pubDate>Mon, 28 Jan 2008 13:33:38 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=359</guid>
		<description></description>
		<content:encoded><![CDATA[I have used the <tt>Arrays.asList(Object)</tt> method numerous times over the years and I have not needed to look at the documentation for it in a while... apparently not since before Java 5. In Java 5 it has been given a nice new shiny coat of paint with generics and var-args.

<code lang="java">public static <T> List<T> asList(T... a)</code>

what this means is that now when you need to create a quick List of something for testing or other purposes, instead of

<code lang="java">List<String> strings = Arrays.asList(new String[]{"alpha","bravo","charlie"});</code>

you can simplify it down to...

<code lang="java">List<String> strings = Arrays.asList("alpha","bravo","charlie");</code>

Nothing astounding, but interesting and useful all the same. Saves a little typing. One thing to note here is that the <tt>List</tt> create by this method is unmodifiable so if you need to be able to add/remove items you will need to add the generated list to another list that is modifiable.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>359</wp:post_id>
		<wp:post_date>2008-01-28 08:33:38</wp:post_date>
		<wp:post_date_gmt>2008-01-28 13:33:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hidden-gems-in-arrays-aslist</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Creating Spring Contexts Programmatically</title>
		<link>http://coffeaelectronica.com/blog/2007/11/creating-spring-contexts-programmatically/</link>
		<pubDate>Fri, 02 Nov 2007 00:57:38 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=405</guid>
		<description></description>
		<content:encoded><![CDATA[If you are familiar with the <a href="http://springframework.org">Spring Framework</a> I am sure that you know how to create a context and fill it with beans using XML (DTD or Schema) or maybe even using properties files (have to try that one sometime), but have you ever tried creating a context programmatically... purely in Java? It's actually not all that difficult, just a little verbose.

The context itself is created as the <tt>GenericWebApplicationContext</tt>. Let's consider a scenario in which you have two beans, a Spring MVC <tt>Controller</tt> implementation called <tt>AddressController</tt>, and a service bean, called <tt>AddressService</tt>, such that the service bean must be injected into the controller bean.

First we create the context:

<code lang="java">GenericWebApplicationContext context = new GenericWebApplicationContext();</code>

Then we create the service bean and add it to the context:

<code lang="java">
    RootBeanDefinition addressSvcBean = new RootBeanDefinition(AddressService.class);
    context.registerBeanDefinition("addressService",addressSvcBean);
</code>

Not too bad. Now the interesting one, the controller will also need a reference to the service bean.

<code lang="java">
    RootBeanDefinition addressCtrBean = new RootBeanDefinition(AddressController.class);
    MutablePropertyValues props = new MutablePropertyValues();
    props.addPropertyValue("addressService",addressSvcBean);
    addressCtrBean.setPropertyValues(props);
    context.registerBeanDefinition("addressController",addressCtrBean);
</code>

Notice that you pass in the <tt>addressSvcBean</tt> object to the <tt>addressService</tt> property; this is the dependency injection in action. You now have a context with two beans, one of which depends on the other.

<b>Note:</b> that an actual controller implementation would probably require more properties to be specified but this is just to show you how it's done.

Finally you will need to startup the context:

<code lang="java">
    context.refresh();
    context.start();
</code>

Why would you ever want to do this over one of the less tedious methods? Maybe you just like doing things in code or you need a simple context with a few beans, some of which are mocked, and its just easier to handle in code. If nothing else it's nice to know that it can be done. I guess that it would also be useful if you had some other configuration format that you wanted to support... your "parser" would call/generate this code underneath.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>405</wp:post_id>
		<wp:post_date>2007-11-01 19:57:38</wp:post_date>
		<wp:post_date_gmt>2007-11-02 00:57:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-spring-contexts-programmatically</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Perforce Eclipse Plug-in Issues</title>
		<link>http://coffeaelectronica.com/blog/2007/10/perforce-eclipse-plug-in-issues/</link>
		<pubDate>Mon, 15 Oct 2007 14:48:24 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=410</guid>
		<description></description>
		<content:encoded><![CDATA[The <a href="http://perforce.com">Perforce</a> integration plug-in for <a href="http://eclipse.org">Eclipse</a> seems to have some issues with Eclipse 3.3.x, which just came out a few weeks ago.

I have been using 3.3 since it was released along with the Perforce (most current version) plug-in, which I have been using for quite a while with no issues. After the upgrade, other developers I work with and I have started to have odd crashes. Eclipse would be working fine and then just die. The only things I could see in the log file (workspace/.meta/.log) were related to the perforce plug-in. The worst part was that the workspace became unloadable even when the .lock file was removed.

After fiddling around with it and still having issues. I upgraded to a clean Eclipse 3.3.1 installation with a minimum of extra plug-ins (I tend to accumulate plug-ins). I even shut down unused plug-ins that come with Eclipse (as a side note, this makes Eclipse run faster). I was able to work for about a week before it crashed again.

I found out that if you remove the perforce feature directory and plugins directories (not the top-level, but those specific to perforce) you can gain access to the workspace. From there you can reinstall the plug-in from the update manager and at least use it again until it crashes.

I submitted a bug report to Perforce and they said that they are already on the issue and that a new version with the fix will be coming out before the end of the year… hopefully a little sooner than that, but I know how software cycles can go. :-)

<b>Another work-around</b> - 11/01/2007

My contact at Perforce also told me that you can open a different workspace, disable the perforce plugin, restart in the desired workspace and then enable the plugin again. This seems to work as well and it is a little faster turn around time.

<b>New Version in Beta</b> - 2/13/2008

It looks like they have a new version currently in beta. Oddly enough I have found that if I create your project completely in Eclipse 3.3.x rather than importing an a project from an older Eclipse version, it works with no problems.

A friend of mine who now works for a different company actually had some face time with the Perforce plug-in developers and (on my request) asked them about whether there was any chance of them open-sourcing the plug-in. The answer was “no” due to some proprietary code in the plug-in. Oh well it was worth a try.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>410</wp:post_id>
		<wp:post_date>2007-10-15 09:48:24</wp:post_date>
		<wp:post_date_gmt>2007-10-15 14:48:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>perforce-eclipse-plug-in-issues</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="eclipse"><![CDATA[Eclipse]]></category>
		<category domain="post_tag" nicename="perforce"><![CDATA[Perforce]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Custom Spring Editors</title>
		<link>http://coffeaelectronica.com/blog/2007/11/custom-spring-editors/</link>
		<pubDate>Thu, 01 Nov 2007 15:39:58 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=420</guid>
		<description></description>
		<content:encoded><![CDATA[I had the need recently to inject an array of strings (<tt>java.lang.String[]</tt>) into a bean property and I was curious about whether or not I could inject the strings as comma-separated values (CSV). With a little poking around in the <a href="http://springframework.org">Spring API</a> I found that the supporting <tt>PropertyEditor</tt> is already there, but not configured by default. My next question was about how you go about configuring custom property editors.

Configuring custom property editors is quite easy, you add a <tt>CustomEditorConfigurer</tt> bean to your context which will register itself with the bean factory at load-time. By mapping your custom editors to the <tt>CustomEditorConfigurer</tt>, you register them with the enclosing bean factory... pretty simple:

<code lang="xml">
<bean id="customEditorConfigurer" 
         class="org.springframework.beans.factory.config.CustomEditorConfigurer">
    <property name="customEditors">
        <map>
            <entry key="java.lang.String[]">
                <bean class="org.springframework.beans.propertyeditors.StringArrayPropertyEditor">
                    <constructor-arg value=":" />
                </bean>
            </entry>
        </map>
    </property>
</bean>
</code>

Note that the value of the entry key attribute is the full class name of the property type to be handled by the editor. Only one editor can be registered for a given type. The <tt>StringArrayPropertyEditor</tt> is available with the core Spring API and it will convert a delimited string into a string array. The delimiter is configurable as a constructor argument; it defaults to comma, but I have overridden it here to use a colon in this case as an example. Once you have this in place, the added configuration work is done.

Let's create a simple test bean to ensure that the editor is registered properly:

<code lang="java">
public class SomeBean {
    private String[] array;

    public void setArray(String[] array) {this.array = array;}
    public String[] getArray() {return array;}
}</code>

Add it to the spring context:

<code lang="xml">
<bean id="someBean" class="SomeBean">
    <property name="array" value="one:two:three:four" />
</bean>
</code>

Now if you load the context and pull the bean out you will find that the array property contains four elements, with values of "one", "two", "three", and "four" respectively. It's just that easy!

Just to verify that we have not lost any pre-existing functionality, you can add another bean that loads the array using the spring list tag:

<code lang="java">
<bean id="someBean2" class="SomeBean">
    <property name="array">
       <list>
          <value>alpha</value>
          <value>bravo</value>
          <value>charlie</value>
       </list>
    </property>
</bean>
</code>

You will notice that this method still works fine as well.

There are a few other custom editors that spring provides in the <tt>org.springframework.bean.propertyeditors</tt> package, and it is also quite easy to implement your own, but I will save that for another day.

<b>More Information</b>

<a href="http://static.springframework.org/spring/docs/2.0.x/reference/validation.html#beans-beans-conversion">SpringFramework: Chapter 5: Validation, Data-binding, the BeanWrapper, and PropertyEditors</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>420</wp:post_id>
		<wp:post_date>2007-11-01 10:39:58</wp:post_date>
		<wp:post_date_gmt>2007-11-01 15:39:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>custom-spring-editors</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spring Multipart Issue</title>
		<link>http://coffeaelectronica.com/blog/2008/02/spring-multipart-issue/</link>
		<pubDate>Wed, 13 Feb 2008 12:34:47 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=438</guid>
		<description></description>
		<content:encoded><![CDATA[I have been implementing some file upload handlers for s <a href="http://springframework.org">Spring</a> MVC-based application I am working on (at work) and I ran into a frustrating issue with Spring's nicely integrated <tt>MultipartResolver</tt> API. It doesn't support multiple file entries with the same input field name. So, as in my case, if you have a dynamic list of files being imported each having the same HTML input name (not something I can easily change at this point), the resolver will throw an exception about multiple files with the same field name.

In version 2.0.x it simply took the last one of the group and silently went about its business (see <tt>CommonsFileUploadSupport.java</tt>).

<code lang="java">
// multipart file field
CommonsMultipartFile file = new CommonsMultipartFile(fileItem);
multipartFiles.put(file.getName(), file);
if (logger.isDebugEnabled()) {
    logger.debug("Found multipart file [" + file.getName() + "] of size " + file.getSize() +
        " bytes with original filename [" + file.getOriginalFilename() + "], stored " +
        file.getStorageDescription());
}</code>

The "same" code in the 2.5 line throws an exception, which is better at least technically, due to the fact that it tells you about the problem.

<code lang="java">
// multipart file field
CommonsMultipartFile file = new CommonsMultipartFile(fileItem);
if (multipartFiles.put(file.getName(), file) != null) {
    throw new MultipartException("Multiple files for field name [" + file.getName() + "] found - not supported by MultipartResolver");
}
if (logger.isDebugEnabled()) {
    logger.debug("Found multipart file [" + file.getName() + "] of size " + file.getSize() +
        " bytes with original filename [" + file.getOriginalFilename() + "], stored " +
        file.getStorageDescription());
}</code>

Originally I thought, "cool, I found a Spring bug that I can fix and submit"... then I saw the new code (2.5.x) and realized that this was <i>intentional</i>. I did some searching through the bug tickets and did find one related to this issue <a href="http://jira.springframework.org/browse/SPR-2784">Support MultipartFile-array Property</a>. It was then that I found the root of my frustration.

<blockquote>It seems that COS doesn't support file parts with the same name, thus the feature cannot be implemented there.</blockquote>

I cannot say whether or not <a href="http://servlets.com/cos/">COS</a> has a production-ready implementation of a multipart handler, but Jason Hunter is a smart guy so it is at the very least decent; however, it seems short-sighted for the Spring developers to limit the capabilities of file uploading based on the limitations of an API that has not been updated since 2002. Honestly, after looking deeper into the COS source and docs, I am not sure that it will <i>not</i> handle multiple inputs correctly. It looks like the <tt>MultipartRequest</tt> might not, but the <tt>MultipartParser</tt> seems pretty raw such that it might be easy to implement a work-around.

In either case, I will have to write or re-write some Spring code to implement another <tt>MultipartResolver</tt> that will handle multiple input files. It can be done in less than 10 lines of added code if I cut and paste the relevant Spring sources... there are a couple layers of inheritance to deal with and the code that needs to change is in the top parent class. D'oh. (backseat coding, but this probably would have been a good place for a strategy pattern). I do not advocate the cut and paste approach for anything other than absolute necessity (which has only happened one other time for me in the past four years).

The <a href="http://www.ietf.org/rfc/rfc1867.txt">RFC-1867</a>, remains silent on this matter.

Oh, well, when I have a few spare minutes I will setup a test of the COS <tt>MultipartParser</tt> and see what it can handle. This still may be a fixable Spring bug yet. I will post results.

All in all, if this is the first and only gripe I have about Spring after using it for about four years... that's not too bad at all. Also, I must say that their source code is very pleasant to browse through.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>438</wp:post_id>
		<wp:post_date>2008-02-13 07:34:47</wp:post_date>
		<wp:post_date_gmt>2008-02-13 12:34:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spring-multipart-issue</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="multipart"><![CDATA[Multipart]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<category domain="post_tag" nicename="wtf"><![CDATA[WTF]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Who&#039;s Calling?</title>
		<link>http://coffeaelectronica.com/blog/2007/11/whos-calling/</link>
		<pubDate>Sun, 11 Nov 2007 21:40:52 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=471</guid>
		<description></description>
		<content:encoded><![CDATA[Want to know the class of the object calling the method you are in?

<code lang="java">Reflection.getCallerClass(1);</code>

It’s not recommended because it’s a sun-specific class and not in the standard Java API, but it will do the trick. I do not really condone using non-API classes like this unless you really really have to, and even then you should comment it and externalize it so that it can be replaced as necessary with a better implementation at a later time.

<b>Note:</b> the parameter is how deep into the stack you want to go.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>471</wp:post_id>
		<wp:post_date>2007-11-11 16:40:52</wp:post_date>
		<wp:post_date_gmt>2007-11-11 21:40:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>whos-calling</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Export Eclipse Working Sets</title>
		<link>http://coffeaelectronica.com/blog/2007/12/export-eclipse-working-sets/</link>
		<pubDate>Fri, 07 Dec 2007 18:38:09 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=474</guid>
		<description></description>
		<content:encoded><![CDATA[I came across a question related to this on <a href="http://eclipsezone.com">EclipseZone</a> where I posted a <a href="http://eclipsezone.com/eclipse/forums/t104065.html">response</a> (and a follow-up). It seemed like something that I should blog about for future reference.

<b>Export Working Set Definition</b>

If you just want to share your working set definition with other members on your team, it's very easy.

<ol>
<li>Via the menu bar: File > "Export..."</li>
<li>Select "General" / "Working Sets"</li>
<li>Click "Next >"</li>
<li>Select the working set(s) you want to export and where you want to export the file.</li>
<li>Click "Finish" to perform the export.</li>
</ol>

You will have a file containing the project-based definition of your working set. This can be imported by your team so that they can have the same working set, as long as they have the files that it represents with the same paths. Generally, this is probably a safe assumption for people on the same team using the same IDE.

<b>Export Working Set Files</b>

If you want to export the actual files contained in your working set, the steps are a little different, but they make sense once you think about it.

<b>Note:</b> I generally have the "Top Level Emements" of my views set to "Working Sets", so this is based on that assumption. It is easy to toggle (View arrow menu).

<ol>
<li>Right-click on the working set you want to export</li>
<li>Select "Export..."</li>
<li>Select "File System" (jar and archive will probably work with this too)</li>
<li>You will then have the File system export dialog with your working set pre-populated.</li>
<li>Select the directory you want to export to</li>
<li>You can either export only the directories explicitly defined in your working set using "Create only selected directories" or you can create any missing parent directories using "Create directory structure for files".</li>
<li>Click Finish and you have your exported files.</li>
</ol>

This method does not export the working set definition, just the files themselves. Using both methods you could export the working set and the files so that your team can have everything they need.

These techniques are useful when sharing files or when you want to extract a component and create a new project from it.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>474</wp:post_id>
		<wp:post_date>2007-12-07 13:38:09</wp:post_date>
		<wp:post_date_gmt>2007-12-07 18:38:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>export-eclipse-working-sets</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="eclipse"><![CDATA[Eclipse]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
			<wp:comment_author_email>anonymous@nowhere.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>200.67.147.89</wp:comment_author_IP>
			<wp:comment_date>2010-07-22 11:15:54</wp:comment_date>
			<wp:comment_date_gmt>2010-07-22 16:15:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There is no "Working Sets" in the File-&gt;Export.. dialog (under any category)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[Christopher J. Stehno]]></wp:comment_author>
			<wp:comment_author_email>chris.stehno@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://ChrisStehno.info</wp:comment_author_url>
			<wp:comment_author_IP>24.238.207.158</wp:comment_author_IP>
			<wp:comment_date>2010-07-22 12:02:52</wp:comment_date>
			<wp:comment_date_gmt>2010-07-22 17:02:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry, looks like it was either part of some plug-in I had at the time or that it was removed at some point during the last three years.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>17</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>240</wp:comment_id>
			<wp:comment_author><![CDATA[Oleksandr Markushyn]]></wp:comment_author>
			<wp:comment_author_email>markdev@ukr.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>193.93.102.249</wp:comment_author_IP>
			<wp:comment_date>2011-03-04 07:45:55</wp:comment_date>
			<wp:comment_date_gmt>2011-03-04 13:45:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[AnyEdit tools plugin for Eclipse

AnyEdit contributes also Import/Export working sets wizards.

http://andrei.gmxhome.de/anyedit/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Mocking Those Stubborn Loggers</title>
		<link>http://coffeaelectronica.com/blog/2007/11/mocking-those-stubborn-loggers/</link>
		<pubDate>Sat, 24 Nov 2007 18:49:43 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=477</guid>
		<description></description>
		<content:encoded><![CDATA[I have run into a couple instances where I would benefit from being able to mock logging, such as when the result of an operation is only some output to a log file. Reflection comes in very handy for this. I created a utility method called <tt>injectFieldValue</tt> which allows a specified value to be injected into a non-final field of an object.

<code lang="java">
public static void injectFieldValue(Object target, String fieldName, Object fieldValue) throws Exception {
    final Field logField = target.getClass().getDeclaredField(fieldName);
    logField.setAccessible(true);
    logField.set(target, fieldValue);
}</code>

It allows you to inject a value into any non-final field of the target class. With this method you can now create a mock Log object and inject it into your target object under test which then allows you to put expectations on the logging so that you are sure that it is called correctly.

Your mock test code could look something like this:

<code lang="java">
public void testLog() throws Exception {
    final Log log = mock(Log.class);
    checking(new Expectations(){
        {
            one(log).info("something");
        }
    });
    MockUtils.injectFieldValue(target,"log",log);

    target.doSomething();
}</code>

I don't recommend this approach for normal coding, but for testing the gloves can come off.  Also, I don't recommend this for everywhere you have logging, just for those cases when logging is an expected result that needs to be validated... in other words, not very often. This technique will work for <tt>static</tt> loggers but not <tt>final</tt>.

<b>Note:</b> If the field you are mocking is in a parent of your target object, you will need to rewrite this method to walk up the hierarchy to find the target field. Not hard to do, just not done here.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>477</wp:post_id>
		<wp:post_date>2007-11-24 13:49:43</wp:post_date>
		<wp:post_date_gmt>2007-11-24 18:49:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mocking-those-stubborn-loggers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="mocking"><![CDATA[Mocking]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Interview Question: Find 2 Matching Ints</title>
		<link>http://coffeaelectronica.com/blog/2008/02/interview-question-find-2-matching-ints/</link>
		<pubDate>Sat, 02 Feb 2008 15:08:32 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=498</guid>
		<description></description>
		<content:encoded><![CDATA[Okay, here is a little question I have taken to asking in the interviews we have been giving lately. The questions is as follows:

<blockquote>Assume that you have an array of <tt>int</tt>s with exactly two of them being equivalent. Write a method to return the <tt>int</tt> that is duplicated.</blockquote>

Upon the first candidates failing this one for the most part, I have started compiling a catalog of all the possible and sensible solutions to the problem. It's kind of a fun little project. Below are some of the implementations I have come up with.

When I came across this question, it did not have an answer provided. My first shot at it was the following, but without the array sorting. Oops, without the sorting it works as long as they are next to each other, hence the need for sorting:

<code lang="java">
public int findMatching(final int[] array){
    Arrays.sort(array); 
    for(int i=0; i<array.length-1; i++){
        if(array[i] == array[i+1]) return array[i];
    }
    throw new IllegalArgumentException("Array contains no matches!");
}
</code>

The second implementation was something I had as a first thought but could not remember the exact functionality of the <tt>Set</tt> <tt>add(Object)</tt> method, which is kind of important in this case.

<code lang="java">
public int findMatching(final int[] array){
    final Set<Integer> set = new HashSet<Integer>(array.length);
    for(int i : array){
        if(!set.add(i)) return i;
    }
    throw new IllegalArgumentException("Array contains no matches!");
}</code>

The third implementation is the one most of our candidates seem to jump for, brute force, comparing every element with every other element (we still give credit for it though):

<code lang="java">
public int findMatching(final int[] array){
    for(int i=0; i<array.length; i++){
        for(int j=0; j<array.length; j++){
            if(i != j && array[i] == array[j]) return array[i];
        }
    }
    throw new IllegalArgumentException("Array contains no matches!");
}</code>

You will notice that I used an <tt>IllegalArgumentException</tt> to denote the lack of matches. You can't really return a -1 or something like that since your <tt>int</tt>s could be of any value.

I am sure that there are one or two more interesting solutions for this problem, but thought I would share what I have found. These are always fun little code problems to play with.

Yes, we are still using this in our interview process, but I am not afraid that a potential candidate will find this since they generally don't know my name, and likewise I don't advertise what company I work for. Actually, I would probably give a "golf clap" to the candidate that walks into our interview with a print out of this entry. Don't break yourself trying to find out... it's not worth it.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>498</wp:post_id>
		<wp:post_date>2008-02-02 10:08:32</wp:post_date>
		<wp:post_date_gmt>2008-02-02 15:08:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>interview-question-find-2-matching-ints</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="interview"><![CDATA[Interview]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CruiseControl Project Operations</title>
		<link>http://coffeaelectronica.com/blog/2008/02/cruisecontrol-project-operations/</link>
		<pubDate>Thu, 07 Feb 2008 15:15:06 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=501</guid>
		<description></description>
		<content:encoded><![CDATA[One of the developers I work with figured out the URL for firing the various CruiseControl build operations (resume, pause, build, etc) and it was jokingly noted that now all we need is a <a href="http://ruby-lang.org">Ruby</a> script to fire them.

And so, viola! Here is a simple ruby script that will do just that. It will run the specified operation command on one project (or all if no project is specified). You do have to configure the script with your CruiseControl url and your project names, but it's well worth it.

<code lang="ruby">
#
#	exec_in_cc.rb
#
#	Used to perform actions on the projects managed by CruiseControl. 
#	If no project is specified, the given operation will be run on all projects (internal array of them).
#
#	ruby exec_in_cc.rb operation [project]
#
#	Christopher J. Stehno (2/7/2008)
#
require 'net/http'
require 'uri'
   
# customize these to fit your pojects
cruise_url = 'http://builder:8000'
projects = ['nightly-build','releases','site-build']
   
# require the operation param
if ARGV[0] == nil
    puts "You must specify an operation!"
    exit
else 
    operation = ARGV[0]
end
    
# check for specified project, if none use all of them
unless ARGV[1] == nil then projects = [ARGV[1]] end
    
projects.each {|project|
    url = URI.parse(cruise_url)
    res = Net::HTTP.start(url.host, url.port) {|http|
        http.get("/invoke?operation=#{operation}&objectname=CruiseControl+Project%3Aname%3D#{project}")
    }
    success = res.body.index('Invocation successful') != nil ? 'Success' : 'Failed'
    puts "#{project}.#{operation}: #{success}"
}
</code>

This took about 30 minutes to write and will save at least that much time over the life of its use. Ruby is excellent for this kind of scripting. Something I have tried to do more often is to script tasks like this. You may feel that you are wasting time when you should be doing other things, but usually with a repetitive task like this you really notice the value. The code above is the whole script; however, I have also attached it to this post for download.

If you find it useful or come up with some good improvements to it, I would love to hear about them.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>501</wp:post_id>
		<wp:post_date>2008-02-07 10:15:06</wp:post_date>
		<wp:post_date_gmt>2008-02-07 15:15:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cruisecontrol-project-operations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cruise Control Project Operations (Groovy)</title>
		<link>http://coffeaelectronica.com/blog/2008/02/cruise-control-project-operations-groovy/</link>
		<pubDate>Fri, 08 Feb 2008 21:39:05 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=505</guid>
		<description></description>
		<content:encoded><![CDATA[Yesterday I posted a little <a href="http://ruby-lang.org">Ruby</a> script for performing [CruiseControl](http://cruisecontrol.sourceforge.net) operations (see <a href="http://coffeaelectronica.com/blog/2008/02/cruisecontrol-project-operations/">Cruise Control Project Operations</a>); I got to thinking last night that this would also be quite easy to do in <a href="http://groovy.codehaus.org">Groovy</a>... and it was:

<code>
package cc;
    
class CruiseExec {
    private static cruiseUrl = 'http://builder:8000';
    private static projects = ['nightly-build','releases','site-build']
        
    static void main(args) {
        def operation = null;
        if(args.length == 0 || args[0] == null){
            System.out.println("No operation specified!")
            System.exit(0)
        } else {
            operation = args[0]
        }
    
        if(args.length == 2 && args[1] != null) projects = [args[1]]
     
        projects.each { project ->
            def url = new URL("${cruiseUrl}/invoke?operation=${operation}&objectname=CruiseControl+Project%3Aname%3D${project}")
            def success = url.getText().contains('Invocation successful')
            System.out.println("${project}.${operation}: ${success}")
        }
    }
}	
</code>

It was very easy, easier than Ruby in fact since I work primarily in Java so I did not have to go looking up odd syntax questions as I did when writing the Ruby version. It is interesting to note that in this version I took the more Object oriented approach and wrote a class rather than a naked script. You could pull the meat out of the main method and make an even shorter script version if you are so inclined.

It's always interesting to compare the same functionality across different languages, so I thought I'd share. Also, it does perform the exact same functionality, so you are welcome to use this version as a replacement for the Ruby version.

Again, I have attached the source code, in case the browser cut-and-paste messes things up for you:
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>505</wp:post_id>
		<wp:post_date>2008-02-08 16:39:05</wp:post_date>
		<wp:post_date_gmt>2008-02-08 21:39:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cruise-control-project-operations-groovy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Perforce Frills</title>
		<link>http://coffeaelectronica.com/blog/2008/02/perforce-frills/</link>
		<pubDate>Tue, 19 Feb 2008 21:51:05 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=508</guid>
		<description></description>
		<content:encoded><![CDATA[I know I have not finished the 1.0 release of my <a href="http://eclipsefrills.sourceforge.net">EclipseFrills</a> plug-in, but I have already started thinking about new frills. One set that I am really hot on right now are my <a href="http://perforce.com">Perforce</a> plug-in frills. There are a few little additions that I have wanted to add to their plug-in that I am finally going to implement.

<ul>
<li>Create String Containing Changelist File Paths</li>
<li>Create a Working Set from Changelist</li>
<li>Add Search of Changelist Files</li>
<li>Ability to Shelve/Unshelve Changelist</li>
<li>Export files in Changelist</li>
</ul>

The big one is the "Shelving and Un-shelving of changes". This is a feature present in <a href="http://jetbrains.com">IntelliJ</a> and even <a href="http://microsoft.com">Visual Studio</a>, but it has been lacking in <a href="http://eclipse.org">Eclipse</a>. I will be implementing it at first for Perforce, and then I will look into doing the same for Subversion and maybe CVS. Basically my plan for implementing this is simple, use the changelist to determine the files that have been edited (different from repository) then pull the local content of those files off into a storage location (not yet determined) for later recovery. You would then be free to revert your changes (or perhaps the shelver will do it for you) and go on about your business. Later, you are free to unshelve your changes by integrating them back into the code (using the Eclipse diff tool).

This is all at the beginning stage right now; however, it is something that I have wanted to have for a while and have already come across multiple uses for so I have some need to finish it soon. The downside is that Perforce being a commercial product, I only have access to it at work so I will have to develop it off-hours remotely or something which will take longer.

Also, being that this plug-in relies on commercial products, it will have its own "feature" separate from the other frills, though it will be available from the same download site.

I hope to have the 1.0 version of the frills done soon and to have a beta version of some of Perforce frills functionality before too long.

<b>Side Note:</b> If these features already exist in Eclipse, please let me know. I was unable to find anything like them currently available.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>508</wp:post_id>
		<wp:post_date>2008-02-19 16:51:05</wp:post_date>
		<wp:post_date_gmt>2008-02-19 21:51:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>perforce-frills</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="eclipse"><![CDATA[Eclipse]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="perforce"><![CDATA[Perforce]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="scm"><![CDATA[SCM]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Recursive Solution to Finding Ints Question</title>
		<link>http://coffeaelectronica.com/blog/2008/05/recursive-solution-to-finding-ints-question/</link>
		<pubDate>Wed, 28 May 2008 18:41:01 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=529</guid>
		<description></description>
		<content:encoded><![CDATA[Back in my posting of <a href="http://coffeaelectronica.com/blog/2008/02/interview-question-find-2-matching-ints/">Interview Question: Find 2 Matching Ints</a> I showed a few different solutions to the problem. A candidate we had recently suggested solving it via recursion; I decided to whip up a little recursive solution for my collection:

<code lang="java">
public static int find(int[] array){
    return scan(new HashSet<Integer>(),array,0);
}

private static int scan(Set<Integer> values, int[] array, int idx){
    if(idx == array.length){
        throw new IllegalArgumentException("No match exists");
    } else if(!values.add(array[idx])){
        return array[idx];
    }
    return scan(values,array,++idx);
}
</code>

Note that this solution requires an additional method to perform the recursion but there are no loops. An alternate version removes the <tt>Set</tt> and uses pre-sorting of the array.

<code lang="java">
public static int find(int[] array){
    Arrays.sort(array);
    return scan(array,0);
}

public static int scan(int[] array, int idx){
    if(idx == array.length){
        throw new IllegalArgumentException("No match exists");
    } else if(array[idx] == array[idx+1]){
        return array[idx];
    }
    return scan(array,++idx);
}
</code>

This problem has really become an interesting study; as I use it as one of our tests for interview candidates I really find it an interesting ruler to compare how various developers think. Two interesting common threads are that most developers find the brute-force approach (double for loop) which is good but very telling, the other is that when faced with the idea that it is possible an array may be passed in without a match, they struggle on what to do at that point. The first solution people look at is some signal like a -1 or <tt>null</tt>, neither of which works. After hinting they will come across the idea of the exception but usually want to create their own unique exception for this method.

I think it would also be an interesting exercise to implement this problem in other languages such as Groovy, Ruby or Scala.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>529</wp:post_id>
		<wp:post_date>2008-05-28 13:41:01</wp:post_date>
		<wp:post_date_gmt>2008-05-28 18:41:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>recursive-solution-to-finding-ints-question</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spring Deserialized ObjectFactory</title>
		<link>http://coffeaelectronica.com/blog/2008/04/spring-deserialized-objectfactory/</link>
		<pubDate>Mon, 28 Apr 2008 18:46:14 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=532</guid>
		<description></description>
		<content:encoded><![CDATA[I recently had the idea that it would be interesting to have a <a href="http://springframework.org">Spring</a> factory bean that would load a serialized object as its object contribution. I have no idea at this point what it would be useful for; it was just something that popped into my head. My example below describes a license key system that is not based on anything real so please don't expect this to be a good license key implementation... it's just an example of the deserialized bean factory idea.

First, we need something to serialize. As I mentioned earlier, I am doing a quick and dirty license key system so the key itself would be a good candidate for the serializable object. Let's create a license key object as follows:

<code lang="java">
public class LicenseKey implements Serializable {

    private static final long serialVersionUID = -3151020875557193150L;
    
    private long created;
    private String key;
    
    public LicenseKey(){
        super();
    }
    
    public LicenseKey(final long created, final String key){
        this.created = created;
        this.key = key;
    }
    
    public long getCreated() {return created;}
    
    public String getKey() {return key;}
}
</code>

Notice that it implements the Serializable interface and has a couple of fields that we can later use to prove that the bean is
deserialized and loaded properly.

Next, we need to serialize this object into a license key file, which will later be used by the factory bean. I threw together a
simple serializer which also utilizes the <a href="http://commons.apache.org/lang">Jakarta Commons - Lang API</a>:

<code lang="java">
public class Serializer {
    
    public static void main(final String[] args) throws FileNotFoundException {
        final LicenseKey key = new LicenseKey(System.currentTimeMillis(),UUID.randomUUID().toString());
        SerializationUtils.serialize(key, new FileOutputStream(new File("license.key")));
        System.out.println("Done");
    }
}
</code>

This just creates a simple key object and serializes it to the current directory as the "license.key" file, which we will use later.

Now that we have a serialized license key, we need a Spring factory bean to load and instantiate the <tt>LicenseKey</tt> object it represents. The <tt>DeserializedObjectFactory</tt> is simply an extension of Spring's <tt>AbstractFactoryBean</tt> that deserializes the given file resource and verifies that it is an instance of the specified class.

<code lang="java">
public class DeserializedObjectFactory extends AbstractFactoryBean {
    	
    private final Class<? extends Serializable> objectType;
    private final Resource resource;
        
    public DeserializedObjectFactory(final Class<? extends Serializable> objectType, final Resource resource){
        this.objectType = objectType;
        this.resource = resource;
    }
    
    @Override
    protected Object createInstance() throws Exception {
        final Object obj = SerializationUtils.deserialize(resource.getInputStream());
        Assert.isInstanceOf(objectType, obj, "Serialized object must be of type: " + objectType);
        return obj;
    }
    
    @Override
    public Class<? extends Serializable> getObjectType() {
        return objectType;
    }
}
</code>

The generic parameter restrictions and the instance checking add a bit of safety to the factory such that it keeps you from loading something completely unexpected.

In order to make use of these beans, we will need some client class to actually use the deserialized object, and that's where the <tt>LicenseVerifier</tt> class comes in. The license verifier is a simple class that takes a license key as a parameter and has a verification method that will be used to ensure that a proper license key is configured.

<code lang="java">
public class LicenseVerifier {
    
    private static final Log log = LogFactory.getLog(LicenseVerifier.class);
    private LicenseKey licenseKey;
    
    public void setLicenseKey(final LicenseKey licenseKey) {
        this.licenseKey = licenseKey;
    }
    
    public void verify(){
        // do some license verification
        Assert.notNull(licenseKey, "No license key exists!");
        Assert.notNull(licenseKey.getKey(), "Invalid key!");
  
        log.info("License verified: created: " + licenseKey.getCreated() + ", key: " + licenseKey.getKey());
    }
}
</code>

Finally we need the glue that brings all of this together, the Spring context file:

<code lang="xml">
<bean id="license.key" class="spring.DeserializedObjectFactory">
    <constructor-arg value="spring.LicenseKey" />
    <constructor-arg value="license.key" />
</bean>
    
<bean id="license.verifier" class="spring.LicenseVerifier" init-method="verify">
    <property name="licenseKey" ref="license.key" />
</bean>
</code>
    
Notice the <tt>init-method</tt> on the license verifier bean; it is used to ensure that the license is verified when the context
starts up. With that, you can startup the context and watch the magic happen:

<code lang="java">new FileSystemXmlApplicationContext("context.xml")</code>

You should get some miscellaneous logging and then the license verification log entry with populated data, which will look 
something like this (of course your values will be different):

<pre>INFO: License verified: created: 1209321756486, key: 5ed38eba-799a-4b8c-9bfc-dd539c20bafe</pre>

That's all there is to it. Like I said, I am not sure what it would really be useful for but it was an interesting little
experiment. I found it interesting because it would be simple to swap out serialized object files as needed to provide different instances, in this case different licenses. This concept could also be used with other "serialization" methods, such as XML or some other custom serializer. I chose the default Java serialization just for ease of demonstration.

Again I must mention that this is NOT intended to be a legitimate licensing strategy and it contains MANY security holes. If you use it, you are on your own and I take no responsibility for the results. 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>532</wp:post_id>
		<wp:post_date>2008-04-28 13:46:14</wp:post_date>
		<wp:post_date_gmt>2008-04-28 18:46:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spring-deserialized-objectfactory</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rendering Calendars</title>
		<link>http://coffeaelectronica.com/blog/2008/05/rendering-calendars/</link>
		<pubDate>Sat, 31 May 2008 16:36:54 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=210</guid>
		<description></description>
		<content:encoded><![CDATA[I am poking around with an idea I had to generate desktop background images with little calendars embedded in them and I realized that there is no really easy (existing) method of rendering your standard square text calendar display. I decided to play around with it a bit. The basic algorithm to generate the weeks and their associated days is nothing too complicated:

<ol>
<li>Figure out what day of the week the first day of the month falls on</li>
<li>Subtract from that the value for Sunday (the start of the week), which assumes that the day of the week field values are sequential (which they are)</li>
<li>Iterate through the day of the month keeping track of the week breaks.</li>
</ol>

I created a factory class, <tt>MonthFactory</tt> and a couple helper model objects, <tt>Month</tt> and <tt>Week</tt> to make things a little easier. <tt>Month</tt> and <tt>Week</tt> are pretty simple data objects used to store the month and week data in a meaningful structure.

<code lang="java">
public class Week {
    private final String[] days = new String[7];
    private int index = 0;

    public Iterable<String> days(){
        return Arrays.asList(days);
    }

    boolean append(final String day){
        days[index++] = day;
        return index != 7;
    }

    void padding(final int size){
        index = size;
    }

    @Override
    public String toString(){
        return Arrays.toString(days);
    }
}</code>
    
I used strings to store the day values, you could also use ints.

<code lang="java">
public class Month {
    private final List<Week> weeks = new LinkedList<Week>();
    private final String name;
    private final int year;
    
    Month(final String name, final int year){
        this.name = name;
        this.year = year;
    }
    
    public Iterable<Week> weeks(){
        return weeks;
    }
    
    public String getName(){return name;}
   
    public int getYear(){return year;}
    
    void append(final Week week){
        weeks.add(week);
    }
    
    @Override
    public String toString() {
        return "{" + name + " " + year + ": weeks=" + weeks.toString();
    }
}</code>

Both of these classes have very limited public interfaces. They exist in the same package as the <tt>MonthFactory</tt> class which is used to
build them. External client classes should really only be accessing them as read-only. The <tt>MonthFactory</tt> is also pretty simple, but it does contain the algorithm I mentioned earlier so it is the meat of the whole example:

<code lang="java">
public class MonthFactory {
    
    public static Month create(final int calendarMonth, final int year) throws Exception {
        validate(calendarMonth,year);
    
        final Calendar cal = Calendar.getInstance();
        cal.set(Calendar.MONTH, calendarMonth);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        cal.set(Calendar.YEAR, year);
  
        final int daysInMonth = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
        final String name = cal.getDisplayName(Calendar.MONTH,Calendar.LONG,Locale.getDefault());
        final Month month = new Month(name,year);
   
        Week week = new Week();
        week.padding(cal.get(Calendar.DAY_OF_WEEK) - Calendar.SUNDAY);
    
        for(int i=1; i<=daysInMonth; i++){
            if(!week.append(String.valueOf(i))){
                month.append(week);
                week = new Week();
            }
        }
        month.append(week);
  
        return month;
    }
    
    private static void validate(final int calMon,final int year){
        if(calMon < Calendar.JANUARY || calMon > Calendar.DECEMBER){
            throw new IllegalArgumentException("Invalid Calendar Month specified: " + calMon);
        }
        if(year < 0){
            throw new IllegalArgumentException("Year must be non-negative: " + year);
        }
    }
}</code>

I even threw in some simple input validation for free. Now for a simple use of this code I created a <tt>TextCalendar</tt> class that simply generates a text calendar which will look right if it's rendered in a fixed-width font.

<code lang="java">
public class TextCalendar {
    
    public static void main(final String[] args) throws Exception {
        final Month month = MonthFactory.create(Calendar.JULY,2008);
            
        final StringBuilder str = new StringBuilder();
    
        final String header = month.getName() + " " + String.valueOf(month.getYear());
        str.append(padding(10 - header.length()/2,' ')).append(header).append('\n');
    
        for(final Week week : month.weeks()){
            for(final String day : week.days()){
                if(day == null){
                    str.append("  ");
                } else {
                    str.append(day.length() == 2 ? day : " " + day);
                }
                str.append(" ");
            }
            str.append('\n');
        }
   
        System.out.println(str.toString());
 
    }
  
    private static String padding(final int size, final char val){
        final char[] pad = new char[size];
        Arrays.fill(pad, val);
        return new String(pad);
    }
}</code>
    
This just serves to show how easy this makes calendar rendering. Upon running this little application you will get the following nicely formatted calendar (I even centered the header):

<pre>
          July 2008
           1  2  3  4  5 
     6  7  8  9 10 11 12 
    13 14 15 16 17 18 19 
    20 21 22 23 24 25 26 
    27 28 29 30 31       
</pre>

If there are existing libraries to do this, I would love to hear about them. I could not find anything. Obviously this example corresponds to the standard US display of the Gregorian Calendar. I would think that it could be made to work for other calendars as well, but I have never actually seen any other calendars displayed... I guess I need to travel the world more.

I provide these as examples only; there may be better ways to accomplish this and there are definitely code modifications and improvements that could be made. I am not currently using this code anywhere... it was just an experiment. Use at your own risk. :-)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date>2008-05-31 11:36:54</wp:post_date>
		<wp:post_date_gmt>2008-05-31 16:36:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rendering-calendars</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="calendar"><![CDATA[Calendar]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Property-backed Configuration</title>
		<link>http://coffeaelectronica.com/blog/2009/05/property-backed-configuration/</link>
		<pubDate>Sat, 23 May 2009 18:22:20 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=340</guid>
		<description></description>
		<content:encoded><![CDATA[A useful trick I started doing for property-backed configuration files is to provide something a little more rich than a simple <tt>Properties</tt> object as a provider. Use a <tt>Properties</tt> instance as a delegate to pull out the properties, but provide a more useful interface for the values themselves.

Say you have a properties file such as:

<pre>path.storage = /some/path</pre>

You could simply access these via a <tt>Properties</tt> instance, and use it directly as in:

<code lang="java">
String path = props.getProperty("path.storage");
File file = new File(path,"archive.zip");
</code>

but consider a potentially more useful approach

<code lang="java">File file = config.getStorageFile("archive.zip");</code>

with 

<code lang="java">
public File getStorageFile(String name){
    return new File( props.getProperty("path.storage"), name );
}</code>

You could even pull the file extension into the method if it made sense to do so... say, if all files in that path were .zip files you could then enforce more control on how it was used such as:

<code lang="java">
public File getStorageFile(String name){
    return new File(props.getProperty("path.storage"),name + ".zip");
}</code>

<code lang="java">File file = config.getStorageFile("archive");</code>

These helper methods would be part of a class called Config or something similar that delegates to an internal <tt>Properties</tt> object:

<code lang="java">
public class Config {
		
    private final Properties props;
		
    public Config(Properties p){
        this.props = p;
    }
		
    public File getStorageFile(String name){
        return new File(props.getProperty("path.storage"),name);
    }
}</code>

You could also do the loading of the properties file inside this class. Some property validation could also be helpful.

This strategy really helped to clean up a project that originally had a lot of properties that were used all over the place with very little order. Converting to this approach actually made the code more understandable and less error prone as well.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date>2009-05-23 13:22:20</wp:post_date>
		<wp:post_date_gmt>2009-05-23 18:22:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>property-backed-configuration</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Simple Image Rotation</title>
		<link>http://coffeaelectronica.com/blog/2009/01/simple-image-rotation/</link>
		<pubDate>Fri, 09 Jan 2009 01:25:16 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=371</guid>
		<description></description>
		<content:encoded><![CDATA[I did a little image rotation today so I figured I'd save my prototype code for future use. I am using <a href="http://groovy.codehaus.org">Groovy</a> to demo the code for this but the Java is exactly the same, just with a little more formality.

<code lang="java">
import java.awt.image.*
import java.awt.geom.*
import javax.imageio.*

def image = ImageIO.read(new File('trees.jpg'))
def w = image.getWidth()
def h = image.getHeight()

def degrees = Integer.parseInt(args[0])

def sin = Math.abs(Math.sin(Math.toRadians(degrees)))
def cos = Math.abs(Math.cos(Math.toRadians(degrees)))
def neww = (int)Math.floor(w*cos+h*sin);
def newh = (int)Math.floor(h*cos+w*sin);

def dst = new BufferedImage(neww,newh,image.getType())
def g = dst.createGraphics()

g.translate((neww-w)/2, (newh-h)/2);
g.rotate(Math.toRadians(degrees), w/2, h/2);
g.drawRenderedImage(image, null);             

if(ImageIO.write(dst,'jpg',new File('trees_rotated.jpg'))){
    rintln "Success!"
} else {
    println "Oh no!"
}
</code>

This reads in the original image file, rotates it by the specified number of degrees and corrects the translation and new image size so that image does not have any odd artifacts from the rotation.

This should work for any positive and negative rotation value.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>371</wp:post_id>
		<wp:post_date>2009-01-08 20:25:16</wp:post_date>
		<wp:post_date_gmt>2009-01-09 01:25:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>simple-image-rotation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Puzzle of the Jars and Pebbles</title>
		<link>http://coffeaelectronica.com/blog/2009/04/puzzle-of-the-jars-and-pebbles/</link>
		<pubDate>Thu, 09 Apr 2009 01:31:39 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=374</guid>
		<description></description>
		<content:encoded><![CDATA[I had an interesting puzzle during a recent interview. I am paraphrasing this from memory so forgive me if you know this one and I am misquoting it somehow:

<blockquote>You have two types of pebbles, white and black, and three jars labeled white, black and black & white, respectively. One jar contains all white pebbles, one contains all black pebbles and one contains a mixture of black and white pebbles. The three jars a all mislabeled so that they will not contain the pebbles noted on the label. How many pebbles would you have to draw and from which jars in order to determine the true distribution?</blockquote>

Don't read any farther if you are going to try and solve this one for yourself. The next paragraph contains the answer.

The answer is one, from the jar labeled "black & white". If you got it on your first try through, congratulations, I did not. I figured it out on my second run through it.

Basically, you draw one pebble from the "black & white" jar. Say you draw a white one, you then know that the jar labeled "black & white" is the jar containing the white pebbles. This leaves you with two unknown jars, one labeled "white" and one labeled "black". Since you know that both of these are incorrect and you have a white pebble, you know that the jar labeled "white" contains the black pebbles and the one labeled "black" contains the black and white pebble mixture.

It's an interesting problem, but honestly I have never felt that these sorts of problems are useful in a technical interview. We would usually have one question of this nature in our interviews more to see how they would go about solving it than looking for an actual answer. Google apparently loves this type of question in an interview, but asks very little of a technical nature.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>374</wp:post_id>
		<wp:post_date>2009-04-08 20:31:39</wp:post_date>
		<wp:post_date_gmt>2009-04-09 01:31:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>puzzle-of-the-jars-and-pebbles</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Some Thoughts on the Kindle</title>
		<link>http://coffeaelectronica.com/blog/2009/05/some-thoughts-on-the-kindle/</link>
		<pubDate>Sun, 03 May 2009 01:45:32 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=377</guid>
		<description></description>
		<content:encoded><![CDATA[I will start out by saying that I do not have a Kindle, nor have I had the opportunity to play with one. These thoughts are based on what I have seen/read about it and some general thoughts on the subject of ebooks.

When the <a href="http://www.amazon.com/Kindle-Amazons-Wireless-Reading-Generation/dp/B00154JDAI/ref=amb_link_84249051_1?pf_rd_m=ATVPDKIKX0DER&pf_rd_s=center-1&pf_rd_r=08CG0MASRSVS04FDCSHF&pf_rd_t=101&pf_rd_p=475983311&pf_rd_i=507846">Kindle</a> came out I was very excited. Think of an ebook reader with support by the company where I buy most of my books anyway... not a bad idea. It looks pretty cool and the reviews seem generally good, but as I have thought about it over the year or so since it came out, I have found some sore spots.<!--break-->

Right out of the gate, there is the price of the unit itself, which has not changed much since its inception, $359 is a bit pricey for me, but I tend to be cheap and its a one time purchase, right. Well, I wonder about that. The Kindle 2 came out not that long ago and you know 3 has to be in the works now that eInk supports color. I saw nothing about trading or upgrading your old Kindle 1 hardware for the newer model so if you want the new one, bang, another $350. That's a big turn off for me.

Another down side I found, and probably the biggest one in my opinion, is that the books for the Kindle cost around $9-10, while that is not much more than your average paperback book, it is a lot considering that you can only read it on the Kindle and you cannot lend or sell it to anyone else. So, you are paying a little more for each book and getting less functionality from it. A side note is that this would start to kill the "used book" market, which is good for Amazon but not for all those stores and their patrons.

My final thought here is about your current library. If you are a big reader you probably own quite a few books already. On buying a Kindle, I would imagine you want to use it. It would be great for traveling, on lunch breaks, etc. Okay, I want to read such and such book but oops I have that as a physical book... I really want to read it on my Kindle though because I am going on a long flight. You either read it the old fashioned way or you shell out $9 for a digital copy of it. I would think that Amazon could make a real killing with the Kindle if they started a physical book trade in program. You "sell" them your physical book and then you get the digital copy for a small fee, like $2 or something reasonable. That then ties users to their product without totally robbing them along the way. I guess an alternate approach would be to just sell the book(s) to a used book store, but often they don't really give you much, especially for one or two books.

I love the idea of the Kindle and some day I will have one, or something similar. I am starting to collect a lot of ebooks that are a pain to read on the computer, of course I have also heard that bringing other formats into the Kindle has its issues too. I will let it come together a little more to get the hardware and usage bugs ironed out. Hey Amazon, I am ready to convert everything to digital, just give me some love!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>377</wp:post_id>
		<wp:post_date>2009-05-02 20:45:32</wp:post_date>
		<wp:post_date_gmt>2009-05-03 01:45:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>some-thoughts-on-the-kindle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Embedding Jetty 6 in Spring</title>
		<link>http://coffeaelectronica.com/blog/2008/08/embedding-jetty-6-in-spring/</link>
		<pubDate>Wed, 06 Aug 2008 00:33:47 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=400</guid>
		<description></description>
		<content:encoded><![CDATA[A few years ago, I wrote a blog entry about <a href="http://coffeaelectronica.com/blog/2006/02/embedding-jetty-in-spring/">Embedding Jetty in Spring</a>. It became quite popular, at least in relation to other pages on my site. Unfortunately, as I noted in the header of that posting, it has become a bit out-dated as newer versions of Jetty have been released. Well, with a little prodding via emails and a handful of free time, I have come up with an updated version for <a href="http://jetty.mortbay.com">Jetty 6.1.11</a> and <a href="http://springframework.org">Spring 2.5.5</a> that requires no additional helper-classes.

For simplicity I came up with a spring context for embedding Jetty based on the example included with Jetty which replicates the default full configuration, <a href="http://jetty.mortbay.org/jetty-6/xref/org/mortbay/jetty/example/LikeJettyXml.html">LikeJettyXml.java</a>. This seemed a good place to start since you will either need all of that, or slightly less... and removing stuff is simple.

For the most part the spring context configuration mirrors the java source from the example; the only real deviation comes form the life-cycle addition method calls <tt>addLifeCycle()</tt>, which spring does not directly support. To perform that one missing dependency injection, you can use the spring <tt>MethodInvokingFactoryBean</tt> to create a bean and then call a method to inject it into the target bean.

<code lang="xml">
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="server.Server" />
        <property name="targetMethod" value="addLifeCycle" />
        <property name="arguments">
            <list><ref local="server.ContextDeployer" /></list>
        </property>
    </bean>
</code>

which simply calls the <tt>addLifeCycle</tt> method on the server instance to add the two deployer instances.

The whole context file reads as follows:

<code lang="xml">
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

		<bean id="server.Server" class="org.mortbay.jetty.Server" destroy-method="stop">
			<property name="threadPool">
				<bean class="org.mortbay.thread.QueuedThreadPool">
					<property name="maxThreads" value="100" />
				</bean>
			</property>
			<property name="connectors">
				<list>
					<bean class="org.mortbay.jetty.nio.SelectChannelConnector">
						<property name="port" value="8080" />
						<property name="maxIdleTime" value="30000" />
					</bean>
				</list>
			</property>
			<property name="handler">
				<bean class="org.mortbay.jetty.handler.HandlerCollection">
					<property name="handlers">
						<list>
							<ref local="server.ContextHandlerCollection" />
							<bean class="org.mortbay.jetty.handler.DefaultHandler" />
							<bean class="org.mortbay.jetty.handler.RequestLogHandler">
								<property name="requestLog">
									<bean class="org.mortbay.jetty.NCSARequestLog">
										<constructor-arg value="cfg/logs/jetty-yyyy_mm_dd.log" />
										<property name="extended" value="false"/>
									</bean>
								</property>
							</bean>
						</list>
					</property>
				</bean>
			</property>

			<property name="userRealms">
				<list>
					<bean class="org.mortbay.jetty.security.HashUserRealm">
						<property name="name" value="Test Realm" />
						<property name="config" value="cfg/etc/realm.properties" />
					</bean>
				</list>
			</property>

			<property name="stopAtShutdown" value="true" />
			<property name="sendServerVersion" value="true"/>
		</bean>

		<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
			<property name="targetObject" ref="server.Server" />
			<property name="targetMethod" value="addLifeCycle" />
			<property name="arguments">
				<list><ref local="server.ContextDeployer" /></list>
		   </property>
		</bean>

		<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
			<property name="targetObject" ref="server.Server" />
			<property name="targetMethod" value="addLifeCycle" />
			<property name="arguments">
				<list><ref local="server.WebAppDeployer" /></list>
		   </property>
		</bean>

		<bean id="server.ContextHandlerCollection" class="org.mortbay.jetty.handler.ContextHandlerCollection" />

		<bean id="server.ContextDeployer" class="org.mortbay.jetty.deployer.ContextDeployer">
			<property name="contexts" ref="server.ContextHandlerCollection" />
			<property name="configurationDir">
				<bean class="org.mortbay.resource.FileResource">
					<constructor-arg value="file://./cfg/contexts" />
				</bean>
			</property>
			<property name="scanInterval" value="1" />
		</bean>

		<bean id="server.WebAppDeployer" class="org.mortbay.jetty.deployer.WebAppDeployer">
			<property name="contexts" ref="server.ContextHandlerCollection" />
			<property name="webAppDir" value="cfg/webapps" />
			<property name="parentLoaderPriority" value="false" />
			<property name="extract" value="true" />
			<property name="allowDuplicates" value="false" />
			<property name="defaultsDescriptor" value="cfg/etc/webdefault.xml" />
		</bean>
	</beans>
</code>

In order to start the server you need to be sure that the <tt>MethodInvokingFactoryBeans</tt> have been fired before the server has been started; the easiest way is to start the server with an external class once the context has loaded.

<code lang="java">
	public class Main {
		public static void main(String[] args) throws Exception {
			ApplicationContext context = new FileSystemXmlApplicationContext("cfg/server-context.xml");
			Server server = (Server)context.getBean("server.Server");
			server.start();
			server.join();
		}
	}
</code>

This should be a good starting point and general template for anything you need... just inject or modify whatever configuration setup you need for your application. I have attached the zipped up Eclipse project I used to create and run this test. You will need the following jars somewhere on your classpath: ant-1.6.5.jar, commons-el-1.0.jar, commons-logging.jar, jasper-compiler-5.5.15.jar, jasper-runtime-5.5.1.5.jar, jetty-6.1.11.jar, jetty-util-6.1.11.jar, jsp-api-2.0.jar, servlet-api-2.5-6.1.11.jar, and spring.jar... all of which can be found in the lib directories of the Spring and Jetty distributions uses.

Good luck. Enjoy, and feel free to let me know if I did something stupid, missed something or if there is any area of this you want me to cover in greater detail or in a different use case.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date>2008-08-05 19:33:47</wp:post_date>
		<wp:post_date_gmt>2008-08-06 00:33:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>embedding-jetty-6-in-spring</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="jetty"><![CDATA[Jetty]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[Xml]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>264</wp:comment_id>
			<wp:comment_author><![CDATA[adrian]]></wp:comment_author>
			<wp:comment_author_email>adrianrobinson1@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.221.58.116</wp:comment_author_IP>
			<wp:comment_date>2011-06-19 20:59:49</wp:comment_date>
			<wp:comment_date_gmt>2011-06-20 01:59:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is one of the most well written tutorials with jetty and spring that i have ever read. Thank You.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Floating and Following Div</title>
		<link>http://coffeaelectronica.com/blog/2008/10/floating-and-following-div/</link>
		<pubDate>Tue, 28 Oct 2008 18:34:38 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=429</guid>
		<description></description>
		<content:encoded><![CDATA[I needed one of those <tt>DIV</tt>s that appears on call and then stays in view even when you scroll, until you close it. For lack of a better name, I call it the floating following div, and it's pretty easy to make. With a little help from <a href="http://prototypejs.org">Prototype</a> we can even make it work across the major browsers.

First you need to put the div to be floated somewhere on your page. The page itself can be anything you want.

<code lang="html"><div id="movable">This is my floating area</div></code>

 and then you need to give it some initial style:

<code lang="css">
#movable {
    position: absolute;
    left: 100px;
    width: 200px;
    height: 200px;
    background-color: red;
}</code>

Once all that is on the page, you will need some JavaScript to do the fancy stuff:

<code lang="html">
<script type="text/javascript" src="prototype.js"></script>
<script type="text/javascript">          
    Event.observe(window,'load',function(evt){
        $('movable').hide();
            
        Event.observe('showme','click',showDiv);
              
        Event.observe(window,'scroll', function(evt){
            $('movable').setStyle({ top: 8 + document.viewport.getScrollOffsets().top + 'px' });
        });
    });
            
    function showDiv(evt){
        $('movable').show();
    }
</script>
</code>

This causes the "movable" element to be hidden. Once the button with an id of "showme" is clicked, the element will be shown and will then follow along with vertical scrolling, staying up near the top of the view port. The key to this following motion is the function mapped to the <tt>window</tt> scrolling event:

<code lang="javascript">$('movable').setStyle({ top: 8 + document.viewport.getScrollOffsets().top + 'px' });</code>

The <a href="http://prototypejs.org/api/document/viewport/getscrolloffsets">document.viewport.getScrollOffsets()</a> function is provided by Prototype.

It's nothing exciting, but it works... just another thing posted here for future reference.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>429</wp:post_id>
		<wp:post_date>2008-10-28 13:34:38</wp:post_date>
		<wp:post_date_gmt>2008-10-28 18:34:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>floating-and-following-div</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="css"><![CDATA[CSS]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="prototype"><![CDATA[Prototype]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>66</wp:comment_id>
			<wp:comment_author><![CDATA[Sumit Kumar]]></wp:comment_author>
			<wp:comment_author_email>skbrnwl-dev@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>161.215.18.51</wp:comment_author_IP>
			<wp:comment_date>2010-10-22 12:14:19</wp:comment_date>
			<wp:comment_date_gmt>2010-10-22 17:14:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Are you kidding? This made my day. I was looking for a quick solution and you gave me one. Sure nothing very hacky or something, but it works :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>214</wp:comment_id>
			<wp:comment_author><![CDATA[Paul Scarrone]]></wp:comment_author>
			<wp:comment_author_email>paul@nurelm.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nurelm.com</wp:comment_author_url>
			<wp:comment_author_IP>96.235.9.216</wp:comment_author_IP>
			<wp:comment_date>2011-01-18 15:28:55</wp:comment_date>
			<wp:comment_date_gmt>2011-01-18 21:28:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I do custom web applications here at Nurelm and it is very common that my target browser is IE. I decided to use PrototypeJS on my current project and had no idea that IE didn't support fixed position elements. You saved me a huge amount of time. Thanks]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>215</wp:comment_id>
			<wp:comment_author><![CDATA[Paul Scarrone]]></wp:comment_author>
			<wp:comment_author_email>paul@nurelm.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nurelm.com</wp:comment_author_url>
			<wp:comment_author_IP>96.235.9.216</wp:comment_author_IP>
			<wp:comment_date>2011-01-18 16:47:55</wp:comment_date>
			<wp:comment_date_gmt>2011-01-18 22:47:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I put this together as a quick way to handle fixed position issues between IE and actual browsers. Of course this is pretty specific for my use but the menu div is navMenu and when using the fixed position within a browser like chrome it is necessary to put an empty div behind it of the same width to keep the navMenu from floating over-top of your content

//handles the floating nav that doesn't work in IE because IE is a waste of CPU
      Event.observe(window, 'load', function() {
        if(Prototype.Browser.IE){
          $('navMenu').setStyle({ top: 53 + document.viewport.getScrollOffsets().top + 'px' });
          $('navMenu').setStyle({top: "53px"});
          $('navMenu').setStyle({left: "5px"});
          $('navMenu').setStyle({position: "absolute"});
        }else{
          $('navMenu').setStyle({position:"fixed"});
          $('navHolder').addClassName("span-9");
        }
      });
      Event.observe(window,'scroll', function(evt) {
        // what the y position of the scroll is
        if(Prototype.Browser.IE){
          $('navMenu').setStyle({ top: 53 + document.viewport.getScrollOffsets().top + 'px' });
        }
      });

&nbsp;
    Menu Nav]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Spooky Java Code</title>
		<link>http://coffeaelectronica.com/blog/2008/10/spooky-java-code/</link>
		<pubDate>Thu, 30 Oct 2008 12:24:50 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=432</guid>
		<description></description>
		<content:encoded><![CDATA[Okay, file this under, "Holy crap!", because I just had an odd "I wonder if..." thought last night
that turned into something both interesting and frightening at the same time. I will say this in 
it's own little text box to bring home the oddness:

<blockquote>In Java you can name a member with dollar sign ($) or underscore (_) alone.</blockquote>
    
You might want to read that again so that it sinks in. This means that you can have the following 
code that will compile and run along happily with no errors.

<code lang="java">
public class Odd {

    private static final String $ = "Dollar-sign: ";
    private static final String _ = "Underscore: ";

    public static void $(final String name){
        System.out.println($ + name);
    }

    public static void _(final String name){
        System.out.println(_ + name);
    }
}</code>

Now, the underscore is not all that far out. I knew it could be used __in__ member names, but not
__as__ the member name by itself. The dollar sign just blew my mind.

What I need to find out is whether this is "to spec" or if it's just some oddity of the Mac JVM. I will need to give this a try on my Windows box at home.

Now, in no way do I want to promote the use of these as method or variable names as they lead
to functionally obfuscated code. They should probably never be used, but it seemed like an 
appropriate pre-Halloween posting. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>432</wp:post_id>
		<wp:post_date>2008-10-30 07:24:50</wp:post_date>
		<wp:post_date_gmt>2008-10-30 12:24:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spooky-java-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<category domain="post_tag" nicename="wtf"><![CDATA[WTF]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JavaScript Link Decoration</title>
		<link>http://coffeaelectronica.com/blog/2009/06/javascript-link-decoration/</link>
		<pubDate>Sat, 20 Jun 2009 12:29:33 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=435</guid>
		<description></description>
		<content:encoded><![CDATA[No, not decorating with pretty colors, decorating with additional functionality... specifically click-tracking and confirmation. With a little bit of JavaScript and a little help from <a href="http://prototypejs.org">Prototype</a> you can add functionality to link clicks.

If you have the following links

<code lang="html">
<p><a href="http://dzone.com" class="track">DZone</a></p>
<p><a href="http://cnn.com">CNN</a></p>
<p><a href="http://thinkgeek.com" class="confirm track">Geek Porn</a></p>
</code>

noting that they are annotated with CSS classes. These classes are the key. You can use the following JavaScript:

<code lang="javascript">
Event.observe(window,'load',function(evt){
	$$('a').each(function(it){
		it.observe('click',handleLinkClick);
	});
});

function handleLinkClick(evt){
	var elt = evt.element();

	var cont = true;
	if(elt.hasClassName('confirm')){
		cont = confirm("Are you sure?");
		if(!cont){
			Event.stop(evt);
		}
	}

	if(cont && elt.hasClassName('track')){
		var url = elt.readAttribute('href');
		new Ajax.Request('recorder.jsp?url=' + url,{method:'get'});
	}
}
</code>

The script will catch clicks on the appropriate link and add functionality to it. In the case of a links with the "track" class it will fire off an Ajax request to a request tracking service, while the "confirm" class adds a confirmation dialog which will stop the click event if confirmation is canceled.

You can put a simple dummy link tracker at "recorder.jsp":

<code><% System.out.println( request.getParameter("url") ); %></code>

This decorating works in IE 6+ and in FireFox; however, it will not catch link following events generated by a right-click and "Open in New Tab" selection from the pop-up menu. This seems to be a browser issue that I was unable to find a work-around for. Personally, I tend to open external links that way to preserve the original page... meaning that this procedure will not track clicks from someone like me. Since external links are most likely the ones you want to track, this procedure is mostly useless. I will have to play around with it and see if there is another way.

If you do want to use it you could refactor this a bit and make it use a more object-oriented decorator pattern approach, but this is just to get the general idea out there as an alternative to the old link-modification way of click tracking.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>435</wp:post_id>
		<wp:post_date>2009-06-20 07:29:33</wp:post_date>
		<wp:post_date_gmt>2009-06-20 12:29:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javascript-link-decoration</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spring Multipart Support With Annotations</title>
		<link>http://coffeaelectronica.com/blog/2009/06/spring-multipart-support-with-annotations/</link>
		<pubDate>Sun, 28 Jun 2009 12:46:06 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=441</guid>
		<description></description>
		<content:encoded><![CDATA[In working on the multi-file upload support in <a href="http://springsource.org">Spring</a> (see <a href="http://coffeaelectronica.com/blog/2008/02/spring-multipart-issue/">Spring Multipart Issue</a>), I had to code up a simple example of how it works now. It took me a little searching to figure out how to use multipart support with the new controller annotation configurations, though it turns out to be really easy. I figured I'd post a quick summary of how it's done.

With your standard file upload form:

<code lang="html">
<form action="upload.do" method="post" enctype="multipart/form-data">
    <div>File 1: <input type="file" name="file" /></div>
    <input type="submit" />
</form>
</code>
    
posting to your uploading controller, which is defined as follows:

<code lang="java">
@Controller
@RequestMapping("/upload.do")
public class UploadController {

    @SuppressWarnings("unchecked")
    @RequestMapping(method=RequestMethod.POST)
    public ModelAndView upload(@RequestParam("file") final MultipartFile multipartFile){
        final ModelAndView mav = new ModelAndView("done");

        // do stuff with the file

        return mav;
    }
}
</code>

which just seems way too simple. Don't forget to configure the <tt>MultipartResolver</tt> along with the rest of your spring-mvc config:

<code lang="xml">
<context:annotation-config />
<context:component-scan base-package="com.stehno.springmulti" />

<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="prefix" value="/WEB-INF/jsp/" />
    <property name="suffix" value=".jsp" />
</bean>
    
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="maxUploadSize" value="100000"/><!-- Max size in bytes. -->
</bean>
</code>
    
and that's it.

Like I said, nothing real exciting here, really just a quick setup starting point.

<b>Note:</b> my fix of the multiple-file upload support is on hold until Spring 3.0 is officially released. I know what needs to be done, it's just a waiting game now. :-)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>441</wp:post_id>
		<wp:post_date>2009-06-28 07:46:06</wp:post_date>
		<wp:post_date_gmt>2009-06-28 12:46:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spring-multipart-support-with-annotations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="annotations"><![CDATA[Annotations]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="multipart"><![CDATA[Multipart]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java Regex Search and Replace</title>
		<link>http://coffeaelectronica.com/blog/2008/08/java-regex-search-and-replace/</link>
		<pubDate>Tue, 12 Aug 2008 12:56:54 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=444</guid>
		<description></description>
		<content:encoded><![CDATA[For many years, I felt that there was nothing  "regular" about Regular Expressions, but lately I have been warming up to them a bit. The <a href="http://www.bastian-bergerhoff.com/eclipse/features/web/QuickREx/toc.html">QuickRex</a> Eclipse plug-in has really helped make them easier to manage, but that's not what this post is about.

I recently needed to do a regex-based search and replace operation to convert all the html entities in a string to their actual character equivalents, basically unescape all the entities in an html string (don't ask why). With a little regex and a little searching documentation browsing I found that it is very easy to do. 

Start out with the pattern, which should be a static class member (it is thread-safe once created):

<code lang="java">private static final Pattern entityPattern = Pattern.compile("(&[a-z]*;)");</code>

The pattern will match any html entity, which have the form <tt>&name;</tt>. Next we need the search and replace code:

<code lang="java">
private String unescapeEntities(final String html){
    final StringBuffer buffer = new StringBuffer();
    final Matcher matcher = entityPattern.matcher(html);
    while (matcher.find()) {
        matcher.appendReplacement(buffer, StringEscapeUtils.unescapeHtml(matcher.group()));
    }
    matcher.appendTail(buffer);

    return buffer.toString();
}
</code>

Your <tt>StringBuffer</tt> will end up with the replaced content of your string. The <tt>StringEscapeUtils</tt> class is from the <a href="http://commons.apache.org/lang">Jakarta Commons - Lang</a> API.

Sorry, this isn't much of a tutorial... it's more of a code snippet for future use.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>444</wp:post_id>
		<wp:post_date>2008-08-12 07:56:54</wp:post_date>
		<wp:post_date_gmt>2008-08-12 12:56:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-regex-search-and-replace</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="regex"><![CDATA[Regex]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Calling Parent Code from IFrame</title>
		<link>http://coffeaelectronica.com/blog/2008/10/calling-parent-code-from-iframe/</link>
		<pubDate>Wed, 15 Oct 2008 17:37:26 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=452</guid>
		<description></description>
		<content:encoded><![CDATA[Every now and then I have needed to access the parent page enclosing an <tt>IFrame</tt> and I have never really found a good straight-forward example of how to do it, so I end up having to work it out each time I need it. So, for a parent (enclosing page) with an <tt>IFrame</tt> as follows:

<code lang="html">
<html>
    <head>
        <title>IFrame test</title>
        <script type="text/javascript">
        function closeIFrame(){
            if(confirm("Are you sure you want to close the iframe?")){
                document.getElementById("frame").style.display = 'none';
            }
        }
        </script>
    </head>
    <body>
        <iframe id="frame" src="visitor.html" width="200" height="200"></iframe>
    </body>
</html>
</code>

where the "visitor.html" page called by the <tt>IFrame</tt> is given as:

<code lang="html">
<html>
    <head>
        <title>Visitor</title>
        <script type="text/javascript">
        function closeMe(){
            parent.closeIFrame();
        }
        </script>
    </head>
    <body>
        <p>Hello, just visiting.</p>
        <button onclick="closeMe()">Close Me</button>
    </body>
</html>
</code>
    
When the "Close Me" button is clicked, the parent page will dispose of the <tt>IFrame</tt>, but the JavaScript function to do this actually resides in the parent page. 

One thing to note, is that both pages must reside on the same domain (or sub-domain) or else the script will not work, due to security restrictions.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>452</wp:post_id>
		<wp:post_date>2008-10-15 12:37:26</wp:post_date>
		<wp:post_date_gmt>2008-10-15 17:37:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>calling-parent-code-from-iframe</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="html"><![CDATA[HTML]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ant Input Prompting and Private Targets</title>
		<link>http://coffeaelectronica.com/blog/2008/10/ant-input-prompting-and-private-targets/</link>
		<pubDate>Tue, 21 Oct 2008 17:42:40 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=455</guid>
		<description></description>
		<content:encoded><![CDATA[I have found the <a href="http://ant.apache.org">Ant</a> <tt>input</tt> tag useful lately for setting up runtime parameters of an Ant build. We have a few different server configuration settings that vary based on which server the artifact is being built for and the <tt>input</tt> tag makes this really easy:

<code lang="xml"><input message="Enter configuration name: " addproperty="config.name" defaultvalue="${config.name.default}" /></code>

The downside of this is that it will prompt you to enter this every time you run the build, which can become annoying and really prohibits automated building. This is where the <tt>unless</tt> attribute of the <tt>target</tt> tag comes into play.

First create a private target (one whose name starts with "-") that will prompt for the config name:

<code lang="xml">
<target name="-prompt-for-config">
    <input message="Enter configuration name: " addproperty="config.name" defaultvalue="${config.name.default}" />
</target>
</code>
    
Then add the <tt>unless</tt> attribute to check for the presence of the <tt>config.name</tt> property:

<code lang="xml">
<target name="-prompt-for-config" unless="config.name">
    <input message="Enter configuration name: " addproperty="config.name" defaultvalue="${config.name.default}" />
</target>
</code>

which will cause this task to be run only if the specified property is not set. The you can have other tasks depend on this private task, which will only run if you have not specified the <tt>config.name</tt> property on the ant command line.

<code lang="xml">
<target name="compile" depends="-prompt-for-config" description="Compiles the java sources.">
    <!-- do stuff -->
</target>
</code>
    
Calling ant with the following will not prompt the user for the <tt>config.name</tt>:

<pre>ant compile -Dconfig.name=foo</pre>
    
I have used this in a few places now to make the build a bit more flexible, such as for doing server deployments, artifact installations, etc. It is a handy ant trick to keep in mind.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>455</wp:post_id>
		<wp:post_date>2008-10-21 12:42:40</wp:post_date>
		<wp:post_date_gmt>2008-10-21 17:42:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ant-input-prompting-and-private-targets</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ant"><![CDATA[Ant]]></category>
		<category domain="post_tag" nicename="building"><![CDATA[Building]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My Top Tools (Windows)</title>
		<link>http://coffeaelectronica.com/blog/2009/04/my-top-tools-windows/</link>
		<pubDate>Thu, 23 Apr 2009 12:25:22 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=480</guid>
		<description></description>
		<content:encoded><![CDATA[After reading list after list of top-ten this and that, I figured I would add my own to the pile. Here are my top ten most useful tools that I have found for every-day usage/development on Windows (some are available on other OSes too). I am excluding programming specific tools, such as <a href="http://eclipse.org">Eclipse</a>, and scripting languages such as <a href="http://groovy.codehaus.org">Groovy</a> and <a href="http://ruby-lang.com">Ruby</a>... though of course I just mentioned all three.

In no particular order, even though they are numbered:

<ol>
<li><a href="http://launchy.net">Launchy</a> - quick application launcher; never search for an application again.</li>
<li><a href="http://openoffice.org">OpenOffice.org</a> - It's like MS Office, without the pain.</li>
<li><a href="http://7-zip.com">7-zip</a> - compress and decompress in various formats with a good UI.</li>
<li><a href="http://uvnc.com">UltraVnc</a> - excellent full-features VNC client and server.</li>
<li><a href="http://winmerge.org">Winmerge</a> - visual diff tool for windows.</li>
<li><a href="http://truecrype.org">TrueCrypt</a> - creates strongly encrypted filesystems with various algorithms available.</li>
<li><a href="http://www.cygwin.com/">Cygwin</a> - a must have since MS never saw fit to add real command line support to Windows.</li>
<li><a href="http://notepad-plus.sourceforge.net/">Notepad++</a> - great text (and code) editor with a lot of features.</li>
<li><a href="http://keepass.info/">KeePass</a> - you have to store all those passwords somewhere.</li>
<li><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">Putty</a> - excellent network client.</li>
</ol>

Honorable mention - ok, there are a few more that I felt should have made the list, but just were not really in the top ten, so here are the honorable mentions:

<ul>
<li><a href="http://mozilla.com/firefox">Firefox</a> - simply the best browser; not on the list above because I really don't consider it a tool.</li>
<li><a href="http://www.fileshredder.org/">FileShredder</a> - good for keeping your drive clean of hidden personal data.</li>
<li><a href="http://cdexos.sourceforge.net/">CDex</a> - great tool for ripping CDs, though not really needed any more since I only buy MP3s.</li>
<li><a href="http://winscp.net">WinScp</a> - visual SCP client, because sometimes command line can be a pain in the butt.</li>
</ul>

Oh yeah, I forgot to mention that all of these are free. Enjoy!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>480</wp:post_id>
		<wp:post_date>2009-04-23 07:25:22</wp:post_date>
		<wp:post_date_gmt>2009-04-23 12:25:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-top-tools-windows</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RockBox</title>
		<link>http://coffeaelectronica.com/blog/2009/04/rockbox/</link>
		<pubDate>Mon, 27 Apr 2009 12:35:43 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=483</guid>
		<description></description>
		<content:encoded><![CDATA[My aging iPod Nano decided to stop shutting down the other day and the only "fix" I could find on-line was to reinstall the firmware from Apple. I am by no means a fan of Apple and I have never really been happy about having to install iTunes and various other pieces of software whenever my iPod gets homesick (i.e. decides it needs an update/re-installation). So I decided to take the plunge and install <a href="http://www.rockbox.org/">Rockbox</a> on my iPod to give it a try.

[caption id="attachment_484" align="alignleft" width="300" caption="RockBox Nano"]<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2009/10/rockbox_view.jpg"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/10/rockbox_view.jpg" alt="RockBox Nano" title="rockbox_view" width="300" height="213" class="size-full wp-image-484" /></a>[/caption]Installation from my Windows Vista box took only a couple minutes using the installer application; the one thing that hung me up was that you should really mount the iPod as a drive and delete everything on it (or transfer it locally) before installing Rockbox. I kept running out of space because it does not delete the stuff already on the iPod. 

Now I have all the features of my iPod that I ever used (playing music) plus I can now play other formats, such as Ogg, I can now mount the iPod and simply transfer files to/from just like a normal drive - no more music loading plugins, iTunes, etc, and Rockbox is extensible so that if I want to change the skinning or add/remove applications, I can.

Rockbox may or may not have all the other iPod basic features, you will have to check to see if your favorites are in there, but I would be surprised if they were not. Rockbox has been around for a while and seems to have a very good development community behind it.

The screenshot to the left is of the main menu, something the web site seemed to be lacking any pictures of. The interface is very colorful, clean and functional. Oh yeah, it sounds great too. 

If for some reason you don't like Rockbox, you can uninstall it and then reinstall the Apple firmware with no leftovers or consequences.

Ah, the joys of free software.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>483</wp:post_id>
		<wp:post_date>2009-04-27 07:35:43</wp:post_date>
		<wp:post_date_gmt>2009-04-27 12:35:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rockbox</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="media"><![CDATA[Media]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Finding Duplicate Ints: PHP</title>
		<link>http://coffeaelectronica.com/blog/2008/08/finding-duplicate-ints-php/</link>
		<pubDate>Wed, 13 Aug 2008 18:53:58 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=535</guid>
		<description></description>
		<content:encoded><![CDATA[In my over-long running thread about <a href="http://coffeaelectronica.com/blog/2008/02/interview-question-find-2-matching-ints/">Finding Matching Ints</a> (initial posting), I have have come across another solution from a php developer that I recently interviewed... in php.

<code lang="php">
function findInts($array){
    $out = Array();
    foreach($array as $num){
        if(array_exist($out,$num){
            return $num;
        }
        array_push($num);
    }
}
</code>

He also mentioned the pre-sorting approach as well in order to speed things up. I still need to fully validate the php functions that he mentions, but it seems correct. I also didn't go into the error-case much with him, not really being a php expert myself.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>535</wp:post_id>
		<wp:post_date>2008-08-13 13:53:58</wp:post_date>
		<wp:post_date_gmt>2008-08-13 18:53:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>finding-duplicate-ints-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="php"><![CDATA[Php]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Finding Matching Ints Using Regex</title>
		<link>http://coffeaelectronica.com/blog/2008/06/matching-ints-with-regex/</link>
		<pubDate>Wed, 04 Jun 2008 18:59:15 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=538</guid>
		<description></description>
		<content:encoded><![CDATA[If you are following along you may have noticed that I have been compiling a long list of solutions to my <a href="http://coffeaelectronica.com/blog/2008/02/interview-question-find-2-matching-ints/">Finding Matching Ints</a> problem. I was talking to one of my co-workers, who is not a developer but used to do some Perl hacking, and he suggested that it could be done with regular expressions. Lo and behold, with the help of another of my more regular-expression-ized co-workers we found this to be true:

<code lang="java">
public int findDuplicate(final int[] array){
    final Pattern p = Pattern.compile(".*?(\\d+. ).*?\\1.*");
    final Matcher m = p.matcher(join(array));
    if(m.find()){
        return Integer.valueOf(m.group(1).trim());
    }
    throw new IllegalArgumentException("No match found!");
}

private String join(final int[] array){
    final StringBuilder str = new StringBuilder();
    for(final int i : array){
        str.append(i).append(" ");
    }
    return str.toString();
}
</code>

Granted, it's not quite as straight-forward as the other solutions, but it is a very novel approach to solving the problem... leave it to a Perl guy. :-) I wonder what the runtime of this would be?

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>538</wp:post_id>
		<wp:post_date>2008-06-04 13:59:15</wp:post_date>
		<wp:post_date_gmt>2008-06-04 18:59:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>matching-ints-with-regex</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<category domain="post_tag" nicename="regex"><![CDATA[Regex]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[538]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Boilerplate Ant Build</title>
		<link>http://coffeaelectronica.com/blog/2009/01/boilerplate-ant-build/</link>
		<pubDate>Wed, 28 Jan 2009 23:33:39 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=543</guid>
		<description></description>
		<content:encoded><![CDATA[I have found it very useful to create a reusable boiler plate <a href="http://ant.apache.org">Ant</a> <tt>build.xml</tt> file that I use as a starting point for all my projects. With a little bit of configuration property tweaking and perhaps a task modification here or there you have a standardized build environment which can be used by your IDE or on the command line.

I have provided a copy of my boilerplate build file at the bottom of this posting. It is provided for use under a creative commons license (<a rel="license" target="_blank" href="http://creativecommons.org/licenses/by/3.0/us/">Creative Commons Attribution 3.0 United States License</a>), so please maintain the copyright header if you use or extend it.

If you look at the file you will see that the first section has all the properties you need. I used in-file properties rather than a separate properties file because I don't really change them often for any given project and it keeps everything all in one neat little file. Technically you could get more re-usability by using properties files, but that assumes that you wont be modifying the build file itself for your project, which is something I do from time to time if something is not quite right for the project.

The first thing you will want to do is update the project name attribute to reflect the name of your project. Then you will want to update the configuration properties so that everything is correct for your build environment. I tried to keep everything pretty standard so that they don't need to change much between projects.

The first property is the <tt>war.name</tt> which is the name you want the generated war file to have. I usually leave it set to the default, which is the project name.

<code lang="xml"><property name="war.name" value="${ant.project.name}" /></code>
	
The next set of properties are the locations of your source directories, which default to the same values that I have set in my IDE.

<code lang="xml">
<property name="src.dir" value="src" />
<property name="test.src.dir" value="test" />
<property name="web.src.dir" value="web" />
</code>

and then your external library directory.

<code lang="xml"><property name="lib.dir" value="lib" /></code>

There has been some confusion around the external library directory property when I have shown this to others. This is not where all your libraries go, but where you put the libraries you <em>don't</em> want in the war file. Things like JUnit and JMock jars go in there so that they are usable for testing and compiling but you don't really want them to go into your deployed artifact. I the jars in this directory mapped on my classpath in my IDE too while those in the WEB-INF/lib are picked up by default.

The next group of properties define the artifact build locations:

<code lang="xml">
<property name="build.dir" value="build" />
<property name="src.build.dir" value="${build.dir}/classes" />
<property name="test.build.dir" value="${build.dir}/test-classes" />
<property name="test.report.dir" value="${build.dir}/test-reports" />
<property name="webapp.build.dir" value="${build.dir}/webapp" />
</code>

As you can see, even if your <tt>build</tt> directory is called something else, like <tt>bin</tt> you can change everything else by updating that one property, <tt>build.dir</tt>. 

The next property is the location of your local web server, where the war file would be deployed locally. The default is my symlink to the <tt>webapps</tt> directory for my local <a href="http://tomcat.apache.org">Tomcat</a> server installation.

<code lang="xml"><property name="deploy.local.dir" value="/usr/local/tomcat/webapps" /></code>

The final two properties are more environmental. You want to specifiy the JVM version you are targetting and whether or not you want debugging information to be compiled with your classes.

<code lang="xml">
<property name="jvm.version" value="1.6" />
<property name="debug.enabled" value="true" />
</code>

You probably wont change these all that often, though it might be a good idea to disable debugging on production builds; I will have to look into supporting that. The <tt>jvm.version</tt> setting is nice because I think Ant still defaults to 1.3 or something like that.
	
The next section of the file contains all the task definitions. You will want to tweak these every now and then if you have special needs. You can run the Ant project help command (<tt>ant -p</tt>) to see the descriptions for all the tasks. Yes, I actually added descriptions for all of them.

Some common tasks I use a lot are:

<pre>ant clean-all test</pre>
	
Run all the tests on a clean build.
	
<pre>ant clean-all redeploy-local</pre>

Clean the build content and do a full local server redeployment.
	
<pre>ant clean-all test war</pre>
	
Run all the tests on a clean build and produce the war file.

I have used this in about five different projects now and it comes in really handy to have a standardized base point, especially when you are in a hurry and trying to do a quick command line build of the project; your commands are the same across your projects.

The follow-up article to this one will delve more into using the Ant build as a tool set and about adding scripting layers on top of the build to make repeated tasks bulletproof and quick.

Let me know if you have any suggestions for modifications or additions to this basic build script. It is a work in progress as I try to bring more simplicity into my development processes.

<code lang="xml">
<?xml version='1.0' ?>

<!--
    Ant Build Template (v1.0)
    Copyright (c) 2009 Christopher J. Stehno (chris@stehno.com)
    Creative Commons Attribution 3.0 United States License (http://creativecommons.org/licenses/by/3.0/us/)
    You are permitted to use this file in any personal and/or commercial product as long as you adhere to the above license.
-->

<project name="project-name" default="war">
	
	<!-- ============== -->
	<!-- Configurations -->
	<!-- ============== -->
	
    <property name="war.name" value="${ant.project.name}" />

    <property name="src.dir" value="src" />
    <property name="test.src.dir" value="test" />

    <property name="web.src.dir" value="web" />
    <property name="lib.dir" value="lib" />

    <property name="build.dir" value="build" />
    <property name="src.build.dir" value="${build.dir}/classes" />
    <property name="test.build.dir" value="${build.dir}/test-classes" />
    <property name="test.report.dir" value="${build.dir}/test-reports" />
    <property name="webapp.build.dir" value="${build.dir}/webapp" />

    <property name="deploy.local.dir" value="/usr/local/tomcat/webapps" />

    <property name="jvm.version" value="1.6" />
    <property name="debug.enabled" value="true" />

    <path id="classpath">
        <fileset dir="${web.src.dir}/WEB-INF/lib" includes="**/*.jar" />
        <fileset dir="${lib.dir}" includes="**/*.jar" />
    </path>

    <path id="test.classpath">

        <path refid="classpath" />
        <pathelement path="${src.build.dir}" />
    </path>

    <path id="test.runtime.classpath">
        <path refid="test.classpath" />
        <pathelement path="${test.build.dir}" />
    </path>

    <!-- ======= -->
    <!-- Targets -->
	<!-- ======= -->
	
    <target name="compile" description="Compiles the java sources.">
        <echo>Compiling java sources...</echo>
        <mkdir dir="${src.build.dir}" />
        <javac destdir="${src.build.dir}" classpathref="classpath" source="${jvm.version}" target="${jvm.version}" debug="${debug.enabled}">
            <src path="${src.dir}" />
            <include name="**/*.java" />
        </javac>

        <echo>Compiling java test sources...</echo>
        <mkdir dir="${test.build.dir}" />
        <javac destdir="${test.build.dir}" classpathref="test.classpath" source="${jvm.version}" target="${jvm.version}" debug="${debug.enabled}">
            <src path="${test.src.dir}" />
            <include name="**/*.java" />
        </javac>

        <echo>Copying over confg files...</echo>
        <copy todir="${src.build.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.xml" />
                <include name="**/*.properties" />
            </fileset>
        </copy>
    </target>

    <target name="clean-compile" description="Cleans up the compiled java sources.">
        <delete dir="${src.build.dir}" />
        <delete dir="${test.build.dir}" />
    </target>

    <target name="test" depends="compile" description="Runs all the tests (compiles if necessary).">
        <echo>Running unit tests...</echo>
        <mkdir dir="${test.report.dir}" />

        <junit printsummary="yes" haltonfailure="yes">
            <classpath refid="test.runtime.classpath" />
            <formatter type="plain" />
            <batchtest fork="yes" todir="${test.report.dir}">
                <fileset dir="${test.build.dir}" includes="**/*Test.class" />
            </batchtest>
        </junit>
    </target>

    <target name="clean-test" description="Cleans out all of the tests and test data.">
        <delete dir="${test.report.dir}" />
    </target>

    <target name="webapp" depends="compile" description="Builds the exploded web application (compiles if necessary).">
        <echo>Building web application...</echo>

        <mkdir dir="${webapp.build.dir}" />
        <copy todir="${webapp.build.dir}">
            <fileset dir="${web.src.dir}">
                <include name="**/*.*" />
            </fileset>
        </copy>

        <mkdir dir="${webapp.build.dir}/WEB-INF/classes" />
        <copy todir="${webapp.build.dir}/WEB-INF/classes">
            <fileset dir="${src.build.dir}">
                <include name="**/*.*" />
            </fileset>
        </copy>
    </target>

    <target name="clean-webapp" description="Cleans up the exploded web application.">
        <delete dir="${webapp.build.dir}" />
    </target>

    <target name="war" depends="webapp" description="Builds the war file (builds the webapp if necessary).">
        <echo>Building the war file...</echo>
        <jar destfile="${build.dir}/${war.name}.war">
            <fileset dir="${webapp.build.dir}" />
        </jar>
    </target>

    <target name="clean-war" description="Cleans up the war file.">
        <delete file="${build.dir}/${war.name}.war" />
    </target>

    <target name="clean-all" depends="clean-compile,clean-test,clean-webapp,clean-war" description="Cleans up all generated content." />

    <target name="deploy-local" depends="war" description="Deploys the war to the locally configured server location.">
        <echo>Deploying war to local server (${deploy.local.dir})...</echo>
        <copy todir="${deploy.local.dir}" file="${build.dir}/${war.name}.war">
        </copy>
    </target>

    <target name="undeploy-local" description="Removes the war (and exploded webapp) from the local server.">
        <delete file="${deploy.local.dir}/${war.name}.war" />
        <delete dir="${deploy.local.dir}/${war.name}" />
    </target>

    <target name="deploy-remote" depends="war,-prompt-for-server" description="Deploys the war file to the configured remote server (scp only).">
        <echo>Deploying war file to remote server via scp...</echo>
        <scp file="${build.dir}/${war.name}.war" todir="${deploy.remote.conn}" />
        <echo>You will need to finish the deployment from the server box.</echo>
    </target>

    <target name="-prompt-for-server" unless="deploy.remote.conn">
        <input message="Enter connection string (user:pass@server:path):" addproperty="deploy.remote.conn" defaultvalue="" />
    </target>

    <target name="archive" depends="clean-all" description="Cleans up and archives the project in a time-stampped zip file one directory up.">
        <echo>Creating archive of project...</echo>
        <tstamp />
        <zip destfile="../${ant.project.name}-${DSTAMP}-${TSTAMP}.zip" compress="yes" basedir="." />
    </target>

    <target name="sync-webapp" description="Syncs up the locally configured webapp content with the project.">
        <echo>Sync-ing the web code with local exploded war...</echo>
        <copy todir="${deploy.local.dir}/${war.name}">
            <fileset dir="${web.src.dir}">
                <exclude name="WEB-INF/**/*.*" />
            </fileset>
        </copy>
    </target>

    <target name="redeploy-local" depends="undeploy-local,deploy-local" description="Redeploys the local webapp (undeploy and deploy)." />
</project>
</code>

<blockquote>You can find an updated version of this build script in my <a href="http://github.com/cjstehno/AntBoilerplate">AntBoilerplate</a> project.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>543</wp:post_id>
		<wp:post_date>2009-01-28 18:33:39</wp:post_date>
		<wp:post_date_gmt>2009-01-28 23:33:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>boilerplate-ant-build</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ant"><![CDATA[Ant]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Layered Build Scripting</title>
		<link>http://coffeaelectronica.com/blog/2009/02/layered-build-scripting/</link>
		<pubDate>Tue, 17 Feb 2009 23:44:35 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=548</guid>
		<description></description>
		<content:encoded><![CDATA[In a recent posting, <a href="http://coffeaelectronica.com/blog/2009/01/boilerplate-ant-build/">Boilerplate Ant Build</a>, I presented my basic Ant build starting point. This post takes that one step farther and presents suggestions for using an <a href="http://ant.apache.org">Ant</a> build file as a tool box for building more "smart" build tools.

As a developer you should strive to keep your project buildable and accessible to all the bells and whistles of your IDE while also maintaining a simple straight-forward command line interface for use in other tools or at those times when you don't need/want to fire up your IDE for a simple task. Ant is a great build automation tool that is supported on the command line and by all the major IDEs.

With your Ant Build Script you can compile, test, and deploy the project with simple command line entries or IDE actions. As I started to use this approach more and more I found that I ended up using the same commands over and over and some of them were on the long-ish side especially when typed in the command line:

<pre>ant clean-all test deploy-remote -Ddeploy.remote.conn=myuname:mypword@server:/home/myuname/artifacts</pre>
    
Not hard to pull from memory after you do it a few times, but when you are in a hurry you are more apt to make a mistake. What I like to do, and I recommend, is to create simple shortcut helper scripts for running these common commands. Your first thought might be to just add them to the build.xml file, and this is not a horrible idea, but I prefer keeping them separate from the "official" builder since in some cases these scripts may only work for my environment or under special circumstances. They are secondary tools that make use of your build tool kit.

So how should you write them? You could create a second Ant build file for your tasks and just call ant with that file, which could make ant calls into the main build
script.

<pre>ant -f yourfile.xml clean-dev-deploy</pre>
    
Nothing wrong with that, but I recommend learning a multi-platform scripting language such as <a href="http://groovy.codehaus.org">Groovy</a> or <a href="http://ruby-lang.org">Ruby</a> and doing your secondary script using that language. Apart from keeping your skills fresh and learning a new language, it also provides a very rich scripting environment that can be used on any platform supported by the language (Groovy and Ruby are supported on Windows, Linux and Mac). You may wonder why I am not promoting bash shell scripting here and one reason is that I have never been very fond of it, but also it is more tied to the operating system and less functional when compared with the other two I mentioned.

These scripts should reside in the root of the project directory right along side your build.xml file for ease of management and use. They should be checked into your source control, though you may want to XXX-out passwords (meaning you will need to checkout a copy and customize it for your use - and not check it back in) or parametrize it to add those in at run time.

The deployment command line I mentioned previously becomes simple and repeatable with a little Ruby foo...

<code lang="ruby">puts `ant clean-all test deploy-remote -Ddeploy.remote.conn=myuname:mypword@server:/home/myuname/artifacts`</code>
    
I end up with a simple script that will run the same set of tasks every time without a chance of me flubbing the directory or username. I tend to give them short concise names that distinguish what they are used for, such as <tt>devpush.rb</tt> in this case. You can point your IDE to this script and have it run it with the click of a button (at least in <a href="http://eclipse.org">Eclipse</a> you can, not sure of others). You can also run it on the command line

<pre>ruby devpush.rb</pre>

which is the most portable way, or if you make the script executable (<tt>chmod +x</tt>):

<pre>./devpush.rb</pre>
    
I have these scripts for every server that I deploy code to. Once you get the hang of your chosen scripting language you can also find a lot of other build/deployment related tasks to script such as the script I have for doing a tomcat deployment of a war file. It stops the server, archives the existing context, copies out the new war, cleans the log files and starts the server... all using a ruby script.

There are also some other interesting alternatives to Ant that I have taken an interest in lately, <a href="http://gant.codehaus.org/">Gant</a> and <a href="http://www.gradle.org/">Gradle</a>, both of which are build scripting DSLs based on Groovy; Gant is ant-like, while Gradle is more maven-esque. They both seem quite promising.

Keep your builds simple, fast and unambiguous so that you can focus on the real work of developing software <em>of</em> your project not <em>for</em> your project.

<blockquote><strong>Side note on choosing between Groovy and Ruby</strong>

I love both Ruby and Groovy as scripting languages so it's hard to really push one over the other. They each have their strengths and weaknesses. Ruby is great for build scripting and general command line task scripting. It has a rich library of built in functionality, it's fast and you can get a lot of function for very little code. Groovy is best when you really need Java integration or Database integration, which is much simpler using JDBC... or when you need to do something more advanced that, as a Java developer you know how to do in Java, but not in Ruby. Groovy is just an extension of Java, though a very powerful one.</blockquote>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>548</wp:post_id>
		<wp:post_date>2009-02-17 18:44:35</wp:post_date>
		<wp:post_date_gmt>2009-02-17 23:44:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>layered-build-scripting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ant"><![CDATA[Ant]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Adding Ivy to the Ant Boilerplate</title>
		<link>http://coffeaelectronica.com/blog/2009/04/adding-ivy-to-the-ant-boilerplate/</link>
		<pubDate>Thu, 16 Apr 2009 23:52:18 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=551</guid>
		<description></description>
		<content:encoded><![CDATA[I have wanted to delve deeper into <a href="http://ant.apache.org/ivy">Ivy</a> for a while now, but something always pulled me away before I got very far into it. Well today I had some time, so I did a little digging.

Ivy is a dependency management system along similar lines to that provided by <a href="http://maven.apache.org">Maven</a> but without all of Maven's other features. Ivy <em>just</em> does dependency management. Ivy uses a project (module) description file for project configuration, generally named <tt>ivy.xml</tt> and put in the root of your project. Then you can add additional ant tasks to manage the dependencies.

Dependency management puts the common jars you (and everyone else) use in a common repository so that you can have quick standardized access to the jar and version that you need for each project. Ivy knows how to find these based on the configuration of your dependencies in the <tt>ivy.xml</tt> file. The dependencies are then cached locally for your use and added to projects as required.

A simple <tt>ivy.xml</tt> file is shown below:

<code lang="xml">
<ivy-module version="2.0" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ant.apache.org/ivy/schemas/ivy.xsd">
                
    <info organisation="com.stehno" module="foobar" />
    
    <configurations>
        <conf name="prod" description="Production environment conf."/>
        <conf name="dev" transitive="false" description="Testing environment conf."/>
    </configurations>
    
    <dependencies>
        <!-- For Production -->
      
        <dependency org="org.springframework" name="spring-webmvc" rev="2.5.6" conf="prod->default">
            <exclude org="commons-attributes"/>
            <exclude org="commons-digester" />
            <exclude org="jexcelapi" module="jxl"/>
            <exclude org="velocity" />
            <exclude org="org.apache.poi" />
            <exclude org="struts" />
            <exclude org="org.apache.tiles" />
            <exclude module="freemarker" />
            <exclude module="xml-apis" />
            <exclude module="jasperreports" />
            <exclude module="velocity-tools-generic" />
            <exclude module="velocity-tools-view" />
            <exclude module="itext" />
            <exclude module="jfreechart" />
            <exclude module="jcommon" />
        </dependency>
        
        <dependency org="commons-lang" name="commons-lang" rev="2.4" conf="prod->default"/>
        
        <!-- For Development -->
      
        <dependency org="junit" name="junit" rev="4.4" conf="dev->default"/>
       
        <dependency org="org.springframework" name="spring-test" rev="2.5.6" conf="dev->default" />
    </dependencies>
</ivy-module>
</code>

You see basic module information (info element) which is used to identify your project. The configurations define various configurations available. In this case I have one <tt>prod</tt> and one <tt>dev</tt> configuration so that I can define one set of dependencies that will be pushed out with the production artifact and one that is only used locally for testing and development. The dependencies are defined in dependency elements using the standard Maven repository conventions, the conf attribute being a reference to which configuration the dependency belongs to. The <tt>->default</tt> is something I am not totally clear on, but I think it means that the dependency will also be associated with the <tt>default</tt> configuration.

One downside I have noticed about Ivy is that when it pulls down dependencies, it pulls them all down without prejudice. So when you have something like <a href="http://springframework.org">Spring</a> which has a lot of non-required dependencies, you get them all and have to exclude those you don't want (as I did in the sample with the exclude elements). It's not horrible but you have to do it by hand. If you don't really care about the size of your application you can just forget about it and let it pull down everything. Something missing along these lines is a general exclusion that would exclude a dependent jar from any module. The way it stands, if module A and module B both depend on the module C, which is not required, you will have to exclude it from both dependency definitions.

The dependency management strategy that I am going with here is one that I hope will "stay out of my way". I was thinking about when dependency resolution is really needed. Maven checks for dependency changes whenever you do anything (at least pre-2.0 did, I am not sure about 2.0) so that even running <tt>clean</tt> caused a dependency check... how wasteful is that? In my opinion, dependency management should be done when you want it done. When is it relevant?

<ul>
<li>when you add or remove a dependency</li>
<li>when you change a dependency version</li>
</ul>

How often do these events really happen? In a structured working environment these events often require buy-in from other developers and/or managers. Even at home on your own projects, they only happen when you feel the need to change one... not every time you run your build script. On a related note, IDEs tend to get cranky when you keep adding/removing jars out from under them too.

This leads me to add three new targets to my <a href="http://coffeaelectronica.com/blog/2009/01/boilerplate-ant-build/">Boilerplate Ant File</a>:

The <tt>depends</tt> target to update the local dependencies in your project. 

<code lang="xml">
<target name="depends" description="Update the dependencies for the project.">
    <ivy:retrieve sync="true" conf="prod" pattern="${web.src.dir}/WEB-INF/lib/[artifact].[ext]" />
    <ivy:retrieve sync="true" conf="dev" pattern="${lib.dir}/[artifact].[ext]" />
</target>
</code>

The <tt>clean-depends</tt> target to clean out the dependency directories.

<code lang="xml">
<target name="clean-depends" description="Clean out the managed dependencies.">
    <delete>
        <fileset dir="${web.src.dir}/WEB-INF/lib" includes="*.jar" />
        <fileset dir="${lib.dir}" includes="*.jar" />
    </delete>
</target>
</code>

And finally, the <tt>depends-report</tt> target to generate a nice report of all the project dependencies.
   
<code lang="xml">
<target name="depends-report" depends="depends" description="Generates dependency report for the project.">
    <ivy:report todir="${depends.report.dir}" conf="dev,prod" />
</target>
</code>

<strong>NOTE:</strong> At this point you will have to add these to the boilerplate file if you are using it - I will be creating a project for this build management stuff and sharing it out soon in a more official manner so stay tuned.

With these new targets you can refresh your dependencies and be ready to code with:

<pre>ant clean-all clean-depends depends test</pre>

Do this whenever you add/update/remove dependencies or when you pull the project out of source control... you don't want to put your jars in source control any more if you are currently doing that. You can usually write rules/configurations in your source control to keep out the jar files. This keeps the storage space down and the transfer time down since you will have the jars stored in your local cache when you need them.

If you have never done automated dependency management you may not really see the value of it. You get the most benefit when you are working in a multi-project environment, which I will be supporting and blogging about soon.

Be warned that this post really only scratches the surface of what ivy can do. I recommend visiting their web site and checking out the documentation. They have decent documentation of all the config elements; however, their examples are a little on the weak side. You have to get into their sample code to get a real helpful guide.


<blockquote>You can find an updated version of this build script in my <a href="http://github.com/cjstehno/AntBoilerplate">AntBoilerplate</a> project.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>551</wp:post_id>
		<wp:post_date>2009-04-16 18:52:18</wp:post_date>
		<wp:post_date_gmt>2009-04-16 23:52:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>adding-ivy-to-the-ant-boilerplate</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ant"><![CDATA[Ant]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="ivy"><![CDATA[Ivy]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ServletContext Revelations</title>
		<link>http://coffeaelectronica.com/blog/2009/07/servletcontext-revelations/</link>
		<pubDate>Sun, 19 Jul 2009 22:51:21 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=4</guid>
		<description></description>
		<content:encoded><![CDATA[From the <tt>ServletContext</tt> JavaDocs

<blockquote>There is one context per "web application" per Java Virtual Machine. (A "web application" is a collection of servlets and content installed under a specific subset of the server's URL namespace such as /catalog and possibly installed via a .war file.)</blockquote>

I never really thought too deeply about how the <tt>ServletContext</tt> behaved until I saw it used differently at my new job. I am used to getting an instance of  <tt>ServletContext</tt> and accessing it directly, which is fine in the case of web applications that consist of a single context (or .war file); however, now I am dealing with an application that spans across multiple application contexts (and .war files)...  <tt>ServletContext</tt> can be used a bit differently under such circumstances.

Consider two web applications, Foo and Bar, each deployed on the same server. In the "Foo" application, if you call <tt>getServletContext()</tt> and then <tt>getContextPath()</tt>, it will be "/Foo", and likewise on "Bar" the same code would yield "/Bar". The interesting part of this is that if, in "Foo" set an attribute on the  <tt>ServletContext</tt>, it will not be directly accessible on "Bar"; however, you can get it by getting a reference to the "Foo"  <tt>ServletContext</tt>... this is the part I had never seen before.

<code lang="java">
// on Foo
getServletContext().setAttribute("foo","I have foo");

// on Bar
getServletContext().getAttribute("foo") // is null
getServletContext("/Foo").getAttribute("foo"); // is "I have foo"
</code>

It makes sense when you think about it but it surprised me that after all the years I have been working with web applications, that I had never run across a multi-war application that needed to cross-communicate.

You can also, it seems, use "/", but perhaps that is only if you have a ROOT context available... I will have to test that one a little more. Along those same lines, you can use the full path to resolve the context, such as a servlet path, though I would imagine that it does have to be a valid path. If you do try and use a context that does not exist, you will get an error.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date>2009-07-19 17:51:21</wp:post_date>
		<wp:post_date_gmt>2009-07-19 22:51:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>servletcontext-revelations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="servlet"><![CDATA[Servlet]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tour de Mock 1: Spring-Mock</title>
		<link>http://coffeaelectronica.com/blog/2009/07/tour-de-mock-spring/</link>
		<pubDate>Mon, 20 Jul 2009 17:16:11 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[A common practice used in unit testing is the use of "<a href="http://en.wikipedia.org/wiki/Mock_object">Mock Objects</a>", usually called "mocking". There are a handful of robust, mature mocking APIs available and it can be difficult to determine which approach works best for you and your project. With this series of posts I intend to compare some (if not all, over time) of the more well-known and seasoned mocking APIs to showcase their usage, benefits, and drawbacks.

To accomplish this comparison I will be writing tests using each API to exercise a simple, yet not-too-trivial test case, requiring the mocking of both interfaces and concrete classes. I will be writing the test cases using <a href="http://junit.org">JUnit 4</a> with annotations.

For example purposes, let's suppose we have a servlet which is used to retrieve a list of email addresses when given a list name, <tt>listName</tt> request parameter:

<code lang="java">
public class EmailListServlet extends HttpServlet {

	private EmailListService emailListService;

	public void init() throws ServletException {
		final ServletContext servletContext = getServletContext();
		this.emailListService = (EmailListService)servletContext.getAttribute(EmailListService.KEY);

		if(emailListService == null) throw new ServletException("No ListService available!");
	}

	protected void doGet(final HttpServletRequest req, final HttpServletResponse res) throws ServletException, IOException {
		final String listName = req.getParameter("listName");
		final List<String> list = emailListService.getListByName(listName);
		PrintWriter writer = null;
		try {
			writer = res.getWriter();
			for(final String email : list){
				writer.println(email);
			}
		} finally {
			if(writer != null) writer.close();
		}
	}
}
</code>

You will notice that the servlet pulls the list from an <tt>EmailListService</tt> service interface:

<code lang="java">
public interface EmailListService {
	public static final String KEY = "com.stehno.mockery.service.EmailListService";

	/**
	 * Retrieves the list of email addresses with the specified name. If no list
	 * exists with that name an IOException is thrown.
	 */
	List<String> getListByName(String listName) throws IOException;
}
</code>

Okay, so it's not great design, but this is what you get sometimes... if it makes you feel better you can say that you started working on a project and this is one of the servlets you are supposed to write a test for. Feel better now?

To start off with, let's just say we are going to write a unit test for the servlet without any help from a mocking API. You create the test case (just a plain old class with <tt>@Test</tt> annotations in it with JUnit 4 and realize that the first thing you need to do is mock out the <tt>EmailListService</tt> interface. That's not too hard; it's an interface so you can simply implement it with your own <tt>MockEmailListService</tt> class. Not bad at all.

Next you realize that you need to get this service class into the <tt>ServletContext</tt> by way of a <tt>ServletConfig</tt> instance. Both of these are interfaces with no server-independent implementations... and they have quite a few methods to implement. What's worse is that you will eventually need to implement <tt>HttpServletRequest</tt> and <tt>HttpServletResponse</tt>. Go look at their JavaDocs. You will end up writing more code for your mock implementations than there are lines of code in the rest of the project and you won't be using more than about 25% of it for this test.

Now, you could figure it's just the price you pay for testing and trudge onward, but wait, <a href="http://http://springsource.org">SpringFramework</a> to the rescue. The spring-mock (called spring-test in later releases) module provides a good set of web-related mock implementations, and this is the first stop on our mocking tour.

The <tt>org.springframework.mock.web</tt> package provides <tt>ServletConfig</tt>, <tt>ServletContext</tt>, <tt>MockHttpServletRequest</tt> and a <tt>MockHttpServletResponse</tt> mock implementations so that we don't have to implement them ourselves. Let's create our first example test, called <tt>EmailListServlet_SpringMockTest</tt>. 

In the <tt>@Before public void before()</tt> method you will see the instantiation of our <tt>MockEmailListService</tt> (yes, we still have to create that one) and it's injection into the <tt>ServletContext</tt> by way of the <tt>ServletConfig</tt>. The request and response mocks are also instantiated for use in the test methods. (If you are unfamiliar with JUnit 4 testing, you may want to check out the documentation, or just understand that the <tt>@Before</tt> annotation means that the method will be called before each test method, annotated with <tt>@Test</tt>).

<code lang="java">
@Before
public void before() throws ServletException {
	final MockEmailListService emailListService = new MockEmailListService();
	final MockServletConfig servletConfig = new MockServletConfig();

	servletConfig.getServletContext().setAttribute(EmailListService.KEY, emailListService);
	this.servlet = new EmailListServlet();

	servlet.init(servletConfig);

	this.request = new MockHttpServletRequest();
	this.response = new MockHttpServletResponse();
}</code>

Our implementation of the <tt>EmailListService</tt> simply returns a list of emails when a non-null list name is used, and throws an exception if a null list name is passed:

<code lang="java">
private static class MockEmailListService implements EmailListService {
	@Override
	public List<String> getListByName(final String listName) throws IOException {
		if(listName == null){
			throw new IOException();
		} else {
			return Arrays.asList("larry@stooge.com","moe@stooge.com","curley@stooge.com");
		}
	}
}</code>

The first test to write is a simple test of the exception thrown when no list name is specified:

<code lang="java">
@Test(expected=IOException.class)
public void doGet_without_list() throws Exception {
	servlet.doGet(request, response);
}</code>	

That's pretty simple. Now, let's test the case when a list name is actually passed in:
<code lang="java">
@Test
public void doGet_with_list() throws Exception {
	request.setParameter("listName", "foolist");

	servlet.doGet(request, response);

	assertEquals(
            "larry@stooge.com" + sep + "moe@stooge.com" + sep + "curley@stooge.com" + sep,
            response.getContentAsString()
        );
}</code>

Again, it's pretty straight-forward. The whole test class is as follows:

<code lang="java">
public class EmailListServlet_SpringMockTest {

	private static final String sep = System.getProperty("line.separator");
	private EmailListServlet servlet;
	private MockHttpServletRequest request;
	private MockHttpServletResponse response;

	@Before
	public void before() throws ServletException {
		final MockEmailListService emailListService = new MockEmailListService();

		final MockServletConfig servletConfig = new MockServletConfig();
		servletConfig.getServletContext().setAttribute(EmailListService.KEY, emailListService);

		this.servlet = new EmailListServlet();
		servlet.init(servletConfig);

		this.request = new MockHttpServletRequest();
		this.response = new MockHttpServletResponse();
	}

	@Test(expected=IOException.class)
	public void doGet_without_list() throws Exception {
		servlet.doGet(request, response);
	}

	@Test
	public void doGet_with_list() throws Exception {
		request.setParameter("listName", "foolist");

		servlet.doGet(request, response);

		assertEquals("larry@stooge.com" + sep + "moe@stooge.com" + sep + "curley@stooge.com" + sep,response.getContentAsString());
	}

	private static class MockEmailListService implements EmailListService {
		@Override
		public List<String> getListByName(final String listName) throws IOException {
			if(listName == null){
				throw new IOException();
			} else {
				return Arrays.asList("larry@stooge.com","moe@stooge.com","curley@stooge.com");
			}
		}
	}
}</code>

The spring mocking API is great, when you can use it, but it only has mocks for common (known) APIs; for anything beyond that you will have to do the mocking yourself. I try to use it whenever I can since it provides the implementation plumbing that you would need for some of the other mocking techniques.

<blockquote>You can find the source code used in this posting in my <a href="http://github.com/cjstehno/TourDeMock">TourDeMock</a> project.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2009-07-20 12:16:11</wp:post_date>
		<wp:post_date_gmt>2009-07-20 17:16:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tour-de-mock-spring</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="mocking"><![CDATA[Mocking]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="servlet"><![CDATA[Servlet]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[geek.shrek]]></wp:comment_author>
			<wp:comment_author_email>miss_cool_666@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>123.243.12.103</wp:comment_author_IP>
			<wp:comment_date>2009-08-06 10:20:05</wp:comment_date>
			<wp:comment_date_gmt>2009-08-06 15:20:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

I would like to download your example.
How can I checout the source code from svn?

I've tried http://svn.sourceforge.net/viewvc/sjrf/trunk/tourdemock/
but it doesn't work.

Thanks,]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email>chris.stehno@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://ChrisStehno.info</wp:comment_author_url>
			<wp:comment_author_IP>24.238.212.63</wp:comment_author_IP>
			<wp:comment_date>2009-08-08 09:49:14</wp:comment_date>
			<wp:comment_date_gmt>2009-08-08 14:49:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The svn browser seems to be working now, SourceForge can get a little flaky sometimes and putting files into their download system can be a real pain in the butt. I emailed you the zip archive of the files. Let me know if you have any further problems.

This gives me an interesting idea for a little application... something to pull down source from a repo without the need for installing svn. I will have to see if anything like that exists.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Tour de Mock 2: JMock</title>
		<link>http://coffeaelectronica.com/blog/2009/07/tour-de-mock-2-jmock/</link>
		<pubDate>Tue, 21 Jul 2009 17:51:37 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[The next mocking API to consider is one that I have used for years, <a href="http://jmock.org">JMock</a>, specifically JMock 2 (for a discussion of JMock 1 usage, please see my older posting "<a href="http://coffeaelectronica.com/blog/2006/09/are-you-mocking-me/">Are You Mocking Me?</a>"). JMock uses a more Domain Specific Language approach to mocking that is very flexible and very expressive, though it can be a bit daunting to someone who's never used it before.

One of the first things you will notice about the test in the <tt>EmailListServlet_JMockTest</tt> is that it uses the <tt>@RunWith</tt> annotation provided by <a href="http://junit.org">JUnit</a>. This annotation tells JUnit to use a test runner other than the default. In this case, JMock provides a test runner to simplify use of its Mockery construct (you will see it as one of the instance variables). The Mockery is used to create and manage the mocking system. Using the JMock runner allows JUnit to handle the mockery verification step after each test so that you don't have to do it yourself. You may also notice that I have defined a constructor for this test to set the "imposteriser" (mock creator) used. Since we have both interfaces and classes to mock, the "legacy" imposteriser must be used.

<code lang="java">
@RunWith(JMock.class)
public class EmailListServlet_JMockTest {
    private Mockery mockery = new JUnit4Mockery();

    public EmailListServlet_JMockTest(){
        mockery.setImposteriser(ClassImposteriser.INSTANCE);
    }
}</code>

The <tt>@Before</tt> method in this example is a bit more complex than that of the Spring mocking example, since you have to do a bit more of the binding work yourself:

<code lang="java">
@Before
public void before() throws ServletException {
    this.emailListService = mockery.mock(EmailListService.class);

    final ServletConfig servletConfig = mockery.mock(ServletConfig.class);
    mockery.checking(new Expectations(){
        {
            final ServletContext servletContext = mockery.mock(ServletContext.class);
            one(servletConfig).getServletContext(); will(returnValue(servletContext));
            one(servletContext).getAttribute(EmailListService.KEY); will(returnValue(emailListService));
        }
    });

    this.servlet = new EmailListServlet();
    servlet.init(servletConfig);

    this.request = mockery.mock(HttpServletRequest.class);
    this.response = mockery.mock(HttpServletResponse.class);
}</code>

The <tt>mockery.checking()</tt> method is one of the most used constructs in mocking with JMock. It allows you to provide your test expectations. In this case you can see that we are expecting one call to <tt>servletConfig.getServletContext()</tt>, which will return the mock <tt>ServletContext</tt> we have created. We are also expecting one call to the <tt>getAttribute()</tt> method of the mocked servlet context with the email service key, which will return our mocked <tt>EmailListService</tt> (note, in this test we don't actually implement the service interface, we just mock it like everything else).

The "no list name" exception-checking test is also a bit more complicated than the previous example:

<code lang="java">
@Test(expected=IOException.class)
public void doGet_without_list() throws Exception {
    mockery.checking(new Expectations(){
        {
            one(request).getParameter("listName"); will(returnValue(null));
            one(emailListService).getListByName(null); will(throwException(new IOException()));
        }
    });

    servlet.doGet(request, response);
}</code>

We actually need to code the behavior for a null return of the "listName" parameter and cause the exception to be thrown by the service. The other test, the "with list name" test is the more interesting of the two now:

<code lang="java">
@Test
public void doGet_with_list() throws Exception {
    final PrintWriter writer = mockery.mock(PrintWriter.class);
    final Sequence printSequence = mockery.sequence("printSequence");
    mockery.checking(new Expectations(){
        {
            one(request).getParameter("listName"); will(returnValue("foolist"));

            final List<String> list = Arrays.asList("larry@stooge.com","moe@stooge.com","curley@stooge.com");
            one(emailListService).getListByName("foolist"); will(returnValue( list ));

            one(response).getWriter(); will(returnValue(writer));

            one(writer).println("larry@stooge.com"); inSequence(printSequence);
            one(writer).println("moe@stooge.com"); inSequence(printSequence);
            one(writer).println("curley@stooge.com"); inSequence(printSequence);
            one(writer).close(); inSequence(printSequence);
        }
    });

    servlet.doGet(request, response);
}</code>
	
You will see again, that the basic call behavior is specified as is the service return value, but here, also we actually see some of the benefit of all this extra code. Notice the sequence behavior. You can define a sequence of calls which must be performed in the order specified or the test will fail. This is useful in cases like this where, if nothing else, you want to ensure that the <tt>close()</tt> method is called after all of the <tt>println()</tt> calls on the writer.

The whole test case is as follows:
	
<code lang="java">
@RunWith(JMock.class)
public class EmailListServlet_JMockTest {
	private Mockery mockery = new JUnit4Mockery();
	private EmailListServlet servlet;
	private HttpServletRequest request;
	private HttpServletResponse response;
	private EmailListService emailListService;

	public EmailListServlet_JMockTest(){
		mockery.setImposteriser(ClassImposteriser.INSTANCE);
	}

	@Before
	public void before() throws ServletException {
		this.emailListService = mockery.mock(EmailListService.class);

		final ServletConfig servletConfig = mockery.mock(ServletConfig.class);
		mockery.checking(new Expectations(){
			{
				final ServletContext servletContext = mockery.mock(ServletContext.class);
				one(servletConfig).getServletContext(); will(returnValue(servletContext));
				one(servletContext).getAttribute(EmailListService.KEY); will(returnValue(emailListService));
			}
		});

		this.servlet = new EmailListServlet();
		servlet.init(servletConfig);

		this.request = mockery.mock(HttpServletRequest.class);
		this.response = mockery.mock(HttpServletResponse.class);
	}

	@Test(expected=IOException.class)
	public void doGet_without_list() throws Exception {
		mockery.checking(new Expectations(){
			{
				one(request).getParameter("listName"); will(returnValue(null));
				one(emailListService).getListByName(null); will(throwException(new IOException()));
			}
		});

		servlet.doGet(request, response);
	}

	@Test
	public void doGet_with_list() throws Exception {
		final PrintWriter writer = mockery.mock(PrintWriter.class);
		final Sequence printSequence = mockery.sequence("printSequence");
		mockery.checking(new Expectations(){
			{
				one(request).getParameter("listName"); will(returnValue("foolist"));

				final List<String> list = Arrays.asList("larry@stooge.com","moe@stooge.com","curley@stooge.com");
				one(emailListService).getListByName("foolist"); will(returnValue( list ));
				one(response).getWriter(); will(returnValue(writer));
				one(writer).println("larry@stooge.com"); inSequence(printSequence);
				one(writer).println("moe@stooge.com"); inSequence(printSequence);
				one(writer).println("curley@stooge.com"); inSequence(printSequence);
				one(writer).close(); inSequence(printSequence);
			}
		});

		servlet.doGet(request, response);
	}
}</code>

JMock has a good amount of development time under its belt so it is pretty well documented and tested itself. It's got a great API for writing your own parameter matchers, method matchers and expectations. It can be a bit cumbersome at times when the test cases get large and full of a lot of mock plumbing. I tend to try and treat test code with the same refactoring attention that I do normal code... pulling out shared expectations, and creating useful shared assertions, etc, then it's not so bad. There is definitely more code involved with this approach than with something like spring mock; however, you do have quite a wide range of mock-ability that you don't really get with predefined mock implementations.

<blockquote>You can find the source code used in this posting in my <a href="http://github.com/cjstehno/TourDeMock">TourDeMock</a> project.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2009-07-21 12:51:37</wp:post_date>
		<wp:post_date_gmt>2009-07-21 17:51:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tour-de-mock-2-jmock</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jmock"><![CDATA[JMock]]></category>
		<category domain="post_tag" nicename="mocking"><![CDATA[Mocking]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="servlet"><![CDATA[Servlet]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tour de Mock 3: Mockito</title>
		<link>http://coffeaelectronica.com/blog/2009/07/tour-de-mock-3-mockito/</link>
		<pubDate>Wed, 22 Jul 2009 13:09:21 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=44</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://mockito.org">Mockito</a> is a fairly new player in the mocking arena, but one that I have found particularly interesting. It's as expressive and flexible as <a href="http://jmock.org">JMock</a> (from what I have seen so far) but it's a bit more compact and concise, which is something I really like. It's also got some nice annotation support that really helps cleans up the code.

If you look at the <tt>EmailListServlet_MockitoTest</tt> class you will see that again (as with JMock) the <tt>@RunWith</tt> annotation is used to provide a special test runner for Mockito. In this case it is used to evaluate the Mockito annotations. Another thing that you will notice is that instance variable mocks can be done with annotations in Mockito, using the <tt>@Mock</tt> annotation, very useful.

<code lang="java">@RunWith(MockitoJUnit44Runner.class)
public class EmailListServlet_MockitoTest {

	private EmailListServlet servlet;

	@Mock
	private HttpServletRequest request;
}
</code>

The <tt>@Before</tt> method is somewhere between the Spring-mock and JMock complexity level:

<code lang="java">@Before
public void before() throws ServletException {
	final ServletConfig servletConfig = mock(ServletConfig.class);
	final ServletContext servletContext = mock(ServletContext.class);

	when(servletConfig.getServletContext()).thenReturn(servletContext);
	when(servletContext.getAttribute(EmailListService.KEY)).thenReturn(emailListService);

	this.servlet = new EmailListServlet();
	servlet.init(servletConfig);
}</code>

Its as expressive as JMock but with less of the distracting overhead (no instance initialization block expectations) so it's a bit easier to read, and to maintain. The "without list name" test is almost as simple as it was in the spring-mock version:

<code lang="java">@Test(expected=IOException.class)
public void doGet_without_list() throws Exception {
	when(request.getParameter("listName")).thenReturn(null);
	when(emailListService.getListByName(null)).thenThrow(new IOException());

	servlet.doGet(request, response);
}</code>

Notice, too, that it reads fairly clear as to what is going on. "When you get this method call, return this". Again with the "with list name" test we see that Mockito also has good sequential call support:

<code lang="java">@Test
public void doGet_with_list() throws Exception {
	final PrintWriter writer = mock(PrintWriter.class);

	when(request.getParameter("listName")).thenReturn("foolist");

	final List&lt;String&gt; list = Arrays.asList("larry@stooge.com","moe@stooge.com","curley@stooge.com");
	when(emailListService.getListByName("foolist")).thenReturn(list);

	when(response.getWriter()).thenReturn(writer);

	servlet.doGet(request, response);

	final InOrder order = inOrder(writer);
	order.verify(writer).println("larry@stooge.com");
	order.verify(writer).println("moe@stooge.com");
	order.verify(writer).println("curley@stooge.com");
	order.verify(writer).close();
}
</code>

Another thing to point out here is that with Mockito, there is nothing special you need to to in order to mock out concrete classes, it just works. The whole test case using Mockito is shown below:

<code lang="java">@RunWith(MockitoJUnit44Runner.class)
public class EmailListServlet_MockitoTest {

	private EmailListServlet servlet;

	@Mock
	private HttpServletRequest request;

	@Mock
	private HttpServletResponse response;

	@Mock
	private EmailListService emailListService;

	@Before
	public void before() throws ServletException {
		final ServletConfig servletConfig = mock(ServletConfig.class);
		final ServletContext servletContext = mock(ServletContext.class);

		when(servletConfig.getServletContext()).thenReturn(servletContext);
		when(servletContext.getAttribute(EmailListService.KEY)).thenReturn(emailListService);

		this.servlet = new EmailListServlet();
		servlet.init(servletConfig);
	}

	@Test(expected=IOException.class)
	public void doGet_without_list() throws Exception {
		when(request.getParameter("listName")).thenReturn(null);
		when(emailListService.getListByName(null)).thenThrow(new IOException());

		servlet.doGet(request, response);
	}

	@Test
	public void doGet_with_list() throws Exception {
		final PrintWriter writer = mock(PrintWriter.class);

		when(request.getParameter("listName")).thenReturn("foolist");

		final List&lt;String&gt; list = Arrays.asList("larry@stooge.com","moe@stooge.com","curley@stooge.com");
		when(emailListService.getListByName("foolist")).thenReturn(list);

		when(response.getWriter()).thenReturn(writer);

		servlet.doGet(request, response);

		final InOrder order = inOrder(writer);
		order.verify(writer).println("larry@stooge.com");
		order.verify(writer).println("moe@stooge.com");
		order.verify(writer).println("curley@stooge.com");
		order.verify(writer).close();
	}
}</code>

I plan on spending some more time with Mockito as I could see it becoming my favourite mocking API.

<blockquote>You can find the source code used in this posting in my <a href="http://github.com/cjstehno/TourDeMock">TourDeMock</a> project.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2009-07-22 08:09:21</wp:post_date>
		<wp:post_date_gmt>2009-07-22 13:09:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tour-de-mock-3-mockito</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="mocking"><![CDATA[Mocking]]></category>
		<category domain="post_tag" nicename="mockito"><![CDATA[Mockito]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="servlet"><![CDATA[Servlet]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tour de Mock 4: EasyMock</title>
		<link>http://coffeaelectronica.com/blog/2009/07/tour-de-mock-4-easymock/</link>
		<pubDate>Thu, 23 Jul 2009 18:00:22 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=79</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://easymock.org">EasyMock</a> is a bit of a different breed. The latest version (2.5.x) seems more expressive than the previous version but it has an odd, and in my opinion cumbersome, need to call a replay method, while most of the other mocking APIs seemingly either negate the need for this or do it under the covers so you don't have to worry about it.

The <tt>@Before</tt> method is nothing very different from the other examples:

<code lang="java">@Before
public void before() throws ServletException {
        this.emailListService = createMock(EmailListService.class);

        final ServletConfig servletConfig = createMock(ServletConfig.class);
        final ServletContext servletContext = createMock(ServletContext.class);

        expect(servletConfig.getServletContext()).andReturn(servletContext);
        expect(servletContext.getAttribute(EmailListService.KEY)).andReturn(emailListService);

        replay(servletConfig,servletContext);

        this.servlet = new EmailListServlet();
        servlet.init(servletConfig);

        this.request = createMock(HttpServletRequest.class);
        this.response = createMock(HttpServletResponse.class);
}</code>

However, the code is reasonably expressive and gets the functional point across in a reasonable amount of code.

The exception test is expressive; however, again as in the <tt>before()</tt> method we see that clunky <tt>replay()</tt> method that just feels like an out-of-place artifact of a poor design decision.

<code lang="java">@Test(expected=IOException.class)
public void doGet_without_list() throws Exception {
	expect(request.getParameter("listName")).andReturn(null);
	expect(emailListService.getListByName(null)).andThrow(new IOException());

	replay(request,emailListService);

	servlet.doGet(request, response);
}
</code>

The sequential handling, in the "with list" test is fairly straight-forward, probably the least invasive of all the APIs so far in handling method invocation sequences.

<code lang="java">@Test
public void doGet_with_list() throws Exception {
	expect(request.getParameter("listName")).andReturn("foolist");

	final List<String> list = Arrays.asList("larry@stooge.com","moe@stooge.com","curley@stooge.com");
	expect(emailListService.getListByName("foolist")).andReturn(list);

	final PrintWriter writer = createMock(PrintWriter.class);
	checkOrder(writer,true);
	expect(response.getWriter()).andReturn(writer);

	writer.println("larry@stooge.com");
	writer.println("moe@stooge.com");
	writer.println("curley@stooge.com");
	writer.close();

	replay(request,response,writer,emailListService);

	servlet.doGet(request, response);
	verify(writer);
}</code>

The code for the entire test case is as follows:

<code lang="java">public class EmailListServlet_EasyMockTest {

	private EmailListServlet servlet;
	private HttpServletRequest request;
	private HttpServletResponse response;
	private EmailListService emailListService;

	@Before
	public void before() throws ServletException {
		this.emailListService = createMock(EmailListService.class);

		final ServletConfig servletConfig = createMock(ServletConfig.class);
		final ServletContext servletContext = createMock(ServletContext.class);

		expect(servletConfig.getServletContext()).andReturn(servletContext);
		expect(servletContext.getAttribute(EmailListService.KEY)).andReturn(emailListService);

		replay(servletConfig,servletContext);

		this.servlet = new EmailListServlet();
		servlet.init(servletConfig);

		this.request = createMock(HttpServletRequest.class);
		this.response = createMock(HttpServletResponse.class);
	}

	@Test(expected=IOException.class)
	public void doGet_without_list() throws Exception {
		expect(request.getParameter("listName")).andReturn(null);
		expect(emailListService.getListByName(null)).andThrow(new IOException());

		replay(request,emailListService);

		servlet.doGet(request, response);
	}

	@Test
	public void doGet_with_list() throws Exception {
		expect(request.getParameter("listName")).andReturn("foolist");

		final List<String> list = Arrays.asList("larry@stooge.com","moe@stooge.com","curley@stooge.com");
		expect(emailListService.getListByName("foolist")).andReturn(list);

		final PrintWriter writer = createMock(PrintWriter.class);
		checkOrder(writer,true);
		expect(response.getWriter()).andReturn(writer);

		writer.println("larry@stooge.com");
		writer.println("moe@stooge.com");
		writer.println("curley@stooge.com");
		writer.close();

		replay(request,response,writer,emailListService);

		servlet.doGet(request, response);

		verify(writer);
	}
}</code>

Maybe it's because I am used to a different mocking strategy, or perhaps it's just an older API (I think EasyMock was one of the first), but I am not really fond of EasyMock. It's another tool in the toolbox and I know there are quite a few developers out there who swear by it. It's not one that I will use often.

<blockquote>You can find the source code used in this posting in my <a href="http://github.com/cjstehno/TourDeMock">TourDeMock</a> project.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2009-07-23 13:00:22</wp:post_date>
		<wp:post_date_gmt>2009-07-23 18:00:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tour-de-mock-4-easymock</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="easymock"><![CDATA[EasyMock]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="mocking"><![CDATA[Mocking]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="servlet"><![CDATA[Servlet]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DiscGear Title Exporting</title>
		<link>http://coffeaelectronica.com/blog/2009/07/discgear-exporting/</link>
		<pubDate>Fri, 24 Jul 2009 23:48:55 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=98</guid>
		<description></description>
		<content:encoded><![CDATA[We bought a few of the DVD storage units from <a href="http://www.discgear.com/">DiscGear</a>, which I highly recommend if you have more than a few CDs or DVDs that you want to keep in physical rather than digital form. 

You get a storage unit to keep all the discs in with a pull-out drawer listing all the contents of that unit. You also have a book filled with the literature from your discs (covers, inserts, etc.). Once you get all the setup you can then type it all up using a little application they give you so that it's not all handwritten. The downside of the little title manager application is that pretty much all it is good for is printing out the title index sheets... but ah, wait, did I mention that it's written in Java?

The index manager is a small Java Swing application that uses a serialized Hashtable as its save file. I wanted to pull out the titles and other information I entered so that I could use it in our other media management software. I wrote a little Java and put the discgear.jar file on the classpath... loaded the database file and piece of cake!

<code lang="java">public class Extractor {
	private static final String[] UNITS = {"A","B"};

	public static void main(final String[] args) {
		final String objfile = "database.ser";
		final String outfile = "discs.txt";

		final Hashtable<String, StorageUnit> container = loadObject(objfile);

		PrintWriter writer = null;
		try {
			writer = new PrintWriter(new FileWriter(outfile));

			for(final String unit : UNITS){
				final StorageUnit storageUnit = container.get(unit);

				writer.println();
				writer.print("=== ");
				writer.print(storageUnit.label);
				writer.println(" ===");

				final Vector<Disc> discs = storageUnit.discs;
				for(int d=0; d<discs.size(); d++){
					writer.print(d+1);
					writer.print('\t');
					writer.println(discs.get(d).getTitle());
				}
			}

		} catch(final Exception e){
			e.printStackTrace();
		} finally {
			if(writer != null){
				try { writer.close(); } catch(final Exception e){}
			}
		}
	}

	private static Hashtable<String, StorageUnit> loadObject(final String objfile) {
		Hashtable<String, StorageUnit> container = null;

		InputStream instr = null;
		try {
			instr = new BufferedInputStream(new FileInputStream(new File(objfile)));
			container = (Hashtable<String, StorageUnit>)SerializationUtils.deserialize(instr);
		} catch(final Exception e){
			e.printStackTrace();
		} finally {
			if(instr != null){
				try { instr.close(); } catch(final Exception ex){}
			}
		}
		return container;
    }
}</code>

The output is fairly simple, though you could spruce it up a bit if you needed to. Basically it generates a text file with the titles grouped by box in order as they appear in the storage unit (numbered so that you can find them in the box).


<pre>
=== A ===
1	Mad Max (1980)
2	Journey to the Center of the Earth
3	Misery (1990)
...

=== B ===
1	Spaceballs
2	Rush
3	The Great Escape
...
</pre>

It's pretty down and dirty and I would have done it in <a href="http://groovy.codehaus.org">Groovy</a>; however, I did not have it installed on the computer I was using and this was pretty simple to pull together.

I am posting this just in case someone else comes across the need.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2009-07-24 18:48:55</wp:post_date>
		<wp:post_date_gmt>2009-07-24 23:48:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>discgear-exporting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[michael]]></wp:comment_author>
			<wp:comment_author_email>michael@cd3.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>204.57.109.208</wp:comment_author_IP>
			<wp:comment_date>2009-09-25 09:09:42</wp:comment_date>
			<wp:comment_date_gmt>2009-09-25 14:09:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice - what version of Discware Lite are you using?  I'm curious to the file output - may I see a copy?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>4</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Christopher J. Stehno]]></wp:comment_author>
			<wp:comment_author_email>chris.stehno@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://ChrisStehno.info</wp:comment_author_url>
			<wp:comment_author_IP>24.238.212.63</wp:comment_author_IP>
			<wp:comment_date>2009-09-25 10:13:31</wp:comment_date>
			<wp:comment_date_gmt>2009-09-25 15:13:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am using Discware Lite, version 1.6. I have added a sample of the output to the posting (towards the end).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>7</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Java Preferences API</title>
		<link>http://coffeaelectronica.com/blog/2009/07/java-preferences-api/</link>
		<pubDate>Sat, 25 Jul 2009 12:44:30 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[The Java Preferences API (java.util.preferences) appeared in the 1.4.x release of the JDK with little fanfare or ceremony; it was just one of the new features in the release and it is not one that you hear about very often. I don't think I have ever seen it being used anywhere, but it is quite flexible and useful.

Preferences are references hierarchical by package name, similar to the Java Logging API (or <a href="http://logging.apache.org">Log4J</a>). This allows for preferences to be stored a various levels (nodes) of the hierarchy.

There are two node branches availabe, the <tt>UserNode</tt> branch and the <tt>SystemNode</tt> branch. The JavaDocs state that

<blockquote>The precise description of "user" and "system" will vary from implementation to implementation.</blockquote>

But, in general "user" preferences will be different for each user of an application, while system preferences are more global in scope such as application configuration details.

You retrieve the preferences for the class you are working with with the following statement:

<code lang="java">
Preferences userPrefs = Preferences.userNodeForPackage(com.you.MyClass.class);
Preferences systemPrefs = Preferences.systemNodeForPackage(com.you.MyClass.class);
</code>

You can really use any class in your application as a reference point, as long as it is a logical association. Once you have a Preferences object, you can get and set values with simple accessor methods:

<code lang="java">
userPrefs.putInt("historyCount",10);
int histCnt = userPrefs.getInt("historyCount",5);

systemPrefs.putBoolean("allowEdit",true);
boolean allowEdit = systemPrefs.getBoolean("allowEdit",false);
</code>

Notice, that in the <tt>getInt()</tt> method the second parameter is a default value of the preference so that if it has not been defined yet, you still have a value to fall back on. Also, the data is persisted automatically… you don’t need to explicitly save it.

If you want to export your preferences for backup or import into another system, the API provides two export methods, one for just the current node, and the other for the current node and its child nodes.

<code lang="java">
userPrefs.exportNode( outstream ); // for just the one node, no child nodes

userPrefs.exportSubtree( outstream ); // for the node and its child nodes
</code>

Importing preferences is done using the <tt>importPreferences(InputStream)</tt> method, which will import all the given preferences into the local preference system.

<code lang="java">
Preferences.importPreferences( instream );
</code>

The import/export format for preferences is a defined XML format (see JavaDocs for DTD). The preferences I detailed earlier would look something like (results may vary):

<code lang="xml">
<preferences>
    <root type="user">
        <node name="com">
            <node name="you">
                <node name="MyClass">
                    <map>
                        <entry key="historyCount" value="10" />
                    </map>
                </node>
            </node>
        </node>
    </root>
    <root type="system">
        <node name="com">
            <node name="you">
                <node name="MyClass">
                    <map>
                        <entry key="allowEdit" value="false" />
                    </map>
                </node>
            </node>
        </node>
    </root>
</preferences>
</code>

One more point of interest is that you can register a listener for node and preference change events:

<code lang="java">
userPrefs.addNodeChangeListener( listener );
userPrefs.addPreferenceChangeListener( listener );
</code>

Node change events occur when a node is modified by adding or removing a child node. Preference change events are fired when the data contained in a preference node is modified. These could be useful for cases when you have interrelated preferences such that when you delete or change one of them, you need to modify the others accordingly.

So, the next time you think about using a <tt>Properties</tt> object, reconsider and think about whether or not a <tt>Preferences</tt> object might serve your needs better.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2009-07-25 07:44:30</wp:post_date>
		<wp:post_date_gmt>2009-07-25 12:44:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-preferences-api</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="preferences"><![CDATA[Preferences]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Online Storage Options</title>
		<link>http://coffeaelectronica.com/blog/2009/07/online-storage-options/</link>
		<pubDate>Sun, 26 Jul 2009 17:20:27 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=124</guid>
		<description></description>
		<content:encoded><![CDATA[I have been using <a href="http://mozy.com">Mozy Home</a> to do online backups for a little over a year now and it has been great, though I must admit, I have never needed to do more than restore one or two files at a time.

Mozy has been out of the way, doing its backups in the background or at times when the computer is otherwise idle, but it is missing one important feature, in my opinion... there is no Linux client. If you are using Linux all you have available is the web client, which is really just for management of your account and working with a few files at a time.

Also on the down side is that Mozy Home is not exactly cheap when you are using more than the free 2GB of storage, coming out to just over $59/year. It's unlimited storage, but it's a flat rate and you can only use it on one computer (which you can get around my mapping drives, but it's still a pain).

I started checking out some of the alternatives and came across a few good contenders, <a href="http://jungledisk.com">JungleDisk</a>, <a href="http://www.getdropbox.com">DropBox</a> and <a href="http://box.net">Box.net</a>.

I will admit that I have used DropBox in the past and found it very useful for transferring files between computers (work and home, etc); however, it too has a 2GB free limit and then you can upsell to either a 50GB or 100GB "premium" account, for $99/year and $199/year respectively. 

DropBox has a good interface (both cross-platform desktop client and web client) but it really feels more like the cloud version of a flash drive rather than a solid backup and storage tool. I would recommend using it for personal stuff under the 2GB limit, and I will continue to do so (it is free). They also provide some social tools like file sharing (public and private) of documents and photos.

Box.net right off the bat looks more like a collaboration tool for project teams (and to their credit, that is how they present it). It has a wealth of features and a good range of scaling options from a 1GB free account up to "mostly unlimited" Enterprise level account running $25/user/month, with a couple options in between. Box.net is very much geared towards business users and their needs... not really what I am looking for, but something to keep in mind.

The final option that I considered was JungleDisk. JungleDisk embraces the whole "cloud" concept that has come to the forefront of software development. With their storage you pay $2/month + storage fees, which you can get as low as $0.15/GB/month. That doesn't sound bad at all... but say you have 40GB that you want to backup:

<pre>($2 * 12 months) + (40GB * $0.15 * 12 months) = $96</pre>

Ouch! Considering I pay $59/year for unlimited storage with Mozy, that's pretty expensive. Granted you can use JungleDisk across all three platforms (on as many computers as you want) and it has a web interface. I may just have to bite the bullet and reduce my backup size down to the bare minimum and maybe diversify my storage across a few of the free options to keep cost down.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date>2009-07-26 12:20:27</wp:post_date>
		<wp:post_date_gmt>2009-07-26 17:20:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>online-storage-options</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="storage"><![CDATA[Storage]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Trimming a StringBuffer</title>
		<link>http://coffeaelectronica.com/blog/2009/07/trimming-a-stringbuffer/</link>
		<pubDate>Wed, 29 Jul 2009 12:34:22 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=134</guid>
		<description></description>
		<content:encoded><![CDATA[I was working with a StringBuffer recently refactoring some code that was doing a lot of string concatenation and I realized that there is no <tt>trim()</tt> method in StringBuffer. I found this to be an odd omission, so I wrote a little utility method to do it.

<code lang="java">
public static final StringBuffer trim(final StringBuffer sb){
	if(sb == null) return null; 
	while( sb.length() > 0 && Character.isWhitespace( sb.charAt(sb.length()-1) ) ){
		sb.deleteCharAt(sb.length()-1);
	}
	while( sb.length() > 0 && Character.isWhitespace( sb.charAt(0) ) ){
		sb.deleteCharAt(0);
	}
	return sb;
}
</code>

It's nothing pretty but it works. If you have a better algorithm for doing this more efficiently, I would love to hear about it.

You could do the same with <tt>StringBuilder</tt>; however, since they do not share a common interface with the required methods, it would have to be a copy of the above method with <tt>StringBuilder</tt> replacing <tt>StringBuffer</tt>.

As a bonus, here is a little test of the method:

<code lang="java">
@Test
public void trim(){
	final StringBuffer buf = new StringBuffer("  alpha bravo charlie   ");

	final StringBuffer sbuf = StringBufferUtils.trim(buf);

	assertEquals(sbuf,buf);
	assertSame(sbuf,buf);
	assertEquals("alpha bravo charlie",buf.toString());
}</code>

I will eventually put this into one of my shared libraries once they come available, but for now, enjoy!


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date>2009-07-29 07:34:22</wp:post_date>
		<wp:post_date_gmt>2009-07-29 12:34:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>trimming-a-stringbuffer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git Over Your Legacy Environment</title>
		<link>http://coffeaelectronica.com/blog/2009/07/git-over-legacy/</link>
		<pubDate>Fri, 31 Jul 2009 01:28:27 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=142</guid>
		<description></description>
		<content:encoded><![CDATA[I struggled for a good title for this posting so I am sorry if it's not very clear. The basic goal here is to show how <a href="http://git-scm.org">Git</a> can help you overcome a poor or obsolete development environment which you have no control over.


Let's say you are stuck with a sub-par source control (that you cannot change) and an IDE that is tightly bound to the server and/or very out-of-date.

I have been looking for ways to maintain my code with the required source control system and run it on the integrated IDE, while doing the bulk of my development on a modern full-featured IDE. (No, I cannot just check out the code and work with it, trust me). I finally got close to what I need by using Git. Basically you create a git repository from the source control managed project and then clone it to another directory so you can pull changes back and forth as needed.

Go into your normal source control managed project and type



<code>git init</code>



to create a git repository. Then you will want to add and commit all your relevant files using



<code>
git add *

git commit -m "initial commit"


</code>

though your needs may vary. Once you have everything in git you can clone this repository into another directory
 (non-existant)


<code>git clone -l --no-hardlinks . ../path/newdir
</code>


On the original repository you can make modifications and changes then go into the new repository and run



<code>git pull
</code>


to pull those changes into it. Once you make changes in the new location you can get (git) them into the original repository using 



<code>git pull ../path/newdir</code>



Just make sure you are doing commits to get the changes into git otherwise nothing will be transferred.


I don't really recommend this for this use if you can avoid it but it does show you how you can do a quick one-off workspace if needed... or as in my case, a modern working environment that does not interfere with the legacy systems.



Alas, even all of this does not help my in what I needed it for. Our source control at work is one of those micro-managing ones that considers itself the master of everything. The files are marked read-only, which is not a big deal but in order to get the scm to recognize the modification you need to check out the file, modify it, and check it back in which can only be done through the client interface (no command line). The only option would be to checkout the entire project, but it's also one of those SCMs that makes a big fuss if anyone has your file checked out.

Oh well.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date>2009-07-30 20:28:27</wp:post_date>
		<wp:post_date_gmt>2009-07-31 01:28:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-over-legacy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[Git]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="scm"><![CDATA[SCM]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>﻿Non-Trivial Code Examples</title>
		<link>http://coffeaelectronica.com/blog/2009/07/%ef%bb%bfnon-trivial-code-examples/</link>
		<pubDate>Sat, 01 Aug 2009 01:07:06 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=148</guid>
		<description></description>
		<content:encoded><![CDATA[Something I am striving for with the postings here on CoffeaElectronica.com is the presentation of concepts using non-trivial examples. I find that a lot of the documentation, books and even blog posts out there present their content using some really simple example which makes the task seem deceptively easy, through no fault of the writer.

The problem is that it's no trivial task (pardon the pun) to create non-trivial and meaningful examples without either clouding the issue at hand or going off into some big project just to detail a small piece of it.
 I think what we (the blogging development community) need are a set of litmus tests for development. Of course, there is no one-size-fits-all solution, but a set of micro-projects that represent different aspects of development without being too complex. They should be the development equivalent of the "white rat" bred for testing and themselves benign and understandable without much fuss.

The "white rat" projects should be built around a specification, for cases when the development itself is being presented; however, there should also be a set of base implementations to provide a common starting point for other discussions, perhaps a Servlet / JSP implementation, one using Spring-MVC, and one using Struts. These generic starting points should provide the bare minimum implementation needed to get the job done without becoming an over-important part of the topic being discussed.

I used a simple email list Servlet example for my "<a href="http://coffeaelectronica.com/blog/?s=Tour+de+Mock">Tour de Mock</a>" series of postings and, in my opinion, that seemed to work quite well since all I really needed was some code to test that actually had a little functionality to it.

Perhaps this is something that will just have to be considered on a case by case basis with attention to providing more complex examples of functionality without losing track of what you are really trying to showcase.
 Something to keep in mind going forward.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date>2009-07-31 20:07:06</wp:post_date>
		<wp:post_date_gmt>2009-08-01 01:07:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%ef%bb%bfnon-trivial-code-examples</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Generics and Comparison</title>
		<link>http://coffeaelectronica.com/blog/2009/08/generics-and-comparison/</link>
		<pubDate>Sat, 01 Aug 2009 15:23:52 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=158</guid>
		<description></description>
		<content:encoded><![CDATA[A few years back, I wrote a post about how to use the <tt>Comparable</tt> and <tt>Comparator</tt> interfaces for comparing objects, "<a href="http://coffeaelectronica.com/blog/2004/10/two-if-by-comparison/">Two, If By Comparison</a>". While I was bringing the post over to this new site, I realized that it was written in the age long ago before Java generics. I decided to do a quick update to show how adding generics makes is a little easier.

Our first update will be the Comparable version of the Person class:

<code lang="java"> 
public class Person implements Comparable<Person> {
    private String id, firstName, lastName;
    private int age;

    // not showing all the getters and setters here...

    public int compareTo(Person person){
            // compare the last names using their compareTo methods
            return(lastName.compareTo(person.getLastName()));
    }
}</code>

Note the Person parameter in the <tt>Comparable</tt> interface and the Person parameter in the <tt>compareTo()</tt> method. It gets rid of a few lines and makes the code a little more clear.

The <tt>Comparator</tt>s become a bit more straight-forward as well:

<code lang="java">
public class LastNameComparator implements Comparator<Person> {

    public boolean equals(Object obj){
            // we're just going to say that any LastNameComparators are equal
            return(obj instanceof LastNameComparator);
    }

    public int compare(Person p1, Person p2){
            // compare their lastNames
            return(p1.getLastName().compareTo(p2.getLastName()));
    }
}

public class AgeComparator implements Comparator<Person> {

    public boolean equals(Object obj){
            // we're just going to say that any AgeComparators are equal
            return(obj instanceof AgeComparator);
    }

    public int compare(Person p1, Person p2){
            // compare their ages
            int result = 0; // defaults to equal
            if(p1.getAge() > p2.getAge()){
                    result = 1;
            } else if(p1.getAge() < p2.getAge()){
                    result = -1;
            }

            return(result);
    }
}</code>

Okay, so it's nothing really astounding or Earth-shattering, but I felt the need to give a little update.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date>2009-08-01 10:23:52</wp:post_date>
		<wp:post_date_gmt>2009-08-01 15:23:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>generics-and-comparison</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="comparator"><![CDATA[Comparator]]></category>
		<category domain="post_tag" nicename="generics"><![CDATA[Generics]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sell Out... Fail</title>
		<link>http://coffeaelectronica.com/blog/2009/08/sell-out-fail/</link>
		<pubDate>Sun, 02 Aug 2009 16:00:57 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=166</guid>
		<description></description>
		<content:encoded><![CDATA[Wow, I can't even sell out if I try! I decided that I would look into putting Google AdSense advertisements on this site for a while, so I went through their sign-up procedure and after a couple days I got back an account rejection email:

<blockquote>
Hello Christopher,

Thank you for your interest in Google AdSense. Unfortunately, after
reviewing your application, we're unable to accept you into Google AdSense
at this time.

We did not approve your application for the reasons listed below.

Issues:

- Under construction

---------------------

Further detail:

Under construction: We've found that your site's pages are incomplete or
under construction. To be considered for AdSense, we require websites to
be fully launched and functioning, allowing users to navigate throughout
your site with a menu, sitemap, or appropriate links. Your site must also
contain enough content for our specialists to review and to display
relevant ads. Once the majority of your site is complete and functional,
we'll be happy to reconsider your application.
</blockquote>

Huh? I will admit that not ALL of my posts have been moved over to this new site, but this is as "complete" as it gets. Oh well, I guess I will have to just keep doing this for free... I will have to look into those donation and tip sites. Maybe I am worthy enough for one of those. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date>2009-08-02 11:00:57</wp:post_date>
		<wp:post_date_gmt>2009-08-02 16:00:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sell-out-fail</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Android Love</title>
		<link>http://coffeaelectronica.com/blog/2009/08/android-love/</link>
		<pubDate>Sat, 08 Aug 2009 15:26:09 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=174</guid>
		<description></description>
		<content:encoded><![CDATA[I went out on opening day and picked up a shiny new <a href="http://www.t-mobilemytouch.com/">T-Mobile myTouch</a> (android) phone. This is quite a step up from the <a href="http://www.tracfone.com/">TracFone</a> I have been using for a few years now:

[caption id="attachment_175" align="alignleft" width="200" caption="TracFone"]<img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/tracfone.png" alt="TracFone" title="tracfone" width="200" height="226" class="size-full wp-image-175" />[/caption]The TracFone is an older Motorola model with no usable keyboard, but that's okay, since it really doesn't do much more than make/receive phone calls.

The myTouch, on the other hand is a beautiful piece of modern technology. The back is that slightly rubberized matte finish, obviously I chose the black model, but it does come in white and red also. [caption id="attachment_177" align="alignright" width="200" caption="T-Mobile myTouch"]<img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/mytouch.png" alt="T-Mobile myTouch" title="mytouch" width="200" height="339" class="size-full wp-image-177" />[/caption]

I am very happy with the myTouch so far and have no real strong complaints. The virtual keyboard takes a little getting used to but its really not bad once you get the hang of it. It has a nice feature that tells you which key you have pressed before actually committing to it so you can change if its the wrong one. It sounds like it gets in your way, but it doesn't. The password entry fields are the most annoying though. You get the normal password hiding except for the last character you typed, which is nice, but if you have a strong password it's kind of a pain since you have to keep switching from numbers to letters and back.

There is a noticeable delay reorienting the phone between portrait view and landscape view, but it is nothing unlivable. This may be present on the G1 and even the iPhone for all I know.

The applications I have tried out have been pretty responsive and useful. The App Store is not quite as friendly as I would like, though other than screen shots of the apps, I am not quite sure what could be done to make it better. It's hard to find what you want unless it's popular or you know exactly what it's called. I will have to do some App reviews later, but my favorite so far is the Last.fm app since I have been scrobbling to Last.fm for a while now, my "station" has most of my music in it. The down-side is that it's pretty stream-intensive so it really only works well in a 3G area or on a wireless network.

Web browsing is a bit odd, but nothing all that different from what I experienced playing with an iPhone. You have to work with the tiny screen somehow and Android does a good job of keeping the navigation fairly intuitive and smooth. 

The camera (3.2MP) works well and the auto-focus locks on fast; however, the lack of a flash is a bit of a bummer. Here is a picture I took with it. It was taken in the morning so that lighting is not the best.

[caption id="attachment_182" align="alignleft" width="225" caption="Photo from myTouch"]<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/2009-08-06-06.38.15.jpg"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/2009-08-06-06.38.15-225x300.jpg" alt="Photo from myTouch" title="2009-08-06 06.38.15" width="225" height="300" class="size-medium wp-image-182" /></a>[/caption]

The video is also decent, though to me it's more of a frill as I would not expect high quality video from a phone. It could come in handy some time.

The sound quality is good from both the earpiece and the speaker. You could actually use the built in speaker to listen to music or other audio content if there is not too much ambient noise, but the headphones that come with the unit suck -- I really don't like in-ear headphones anyway. A short adapter cable (about 3in) is provided to convert normal headphone connectors to the mini-usb required by the phone, and it works great. It even has a pause/play button built in that ties to the default music player. If you get a charging stand, it also has a normal headphone jack so you can use it while it's being charged. The charging stand does not seem to allow USB synching though, which seems odd to me.

I am using the default music player which seems fine to me as I would not be using this for an MP3 player all that often; it does everything I feel is necessary. You can list the songs/artists/albums pick what you want and play them, pause them, etc. and even go off and do other activities with the music player running in the background.

I have some app ideas already coming together and I am working my way through the "<a href="http://www.amazon.com/gp/product/1934356174?ie=UTF8&tag=coffeael-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=1934356174">Hello, Android</a><img src="http://www.assoc-amazon.com/e/ir?t=coffeael-20&l=as2&o=1&a=1934356174" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />" book, so expect more Android posts and maybe an App or two here pretty soon.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date>2009-08-08 10:26:09</wp:post_date>
		<wp:post_date_gmt>2009-08-08 15:26:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>android-love</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Unit Testing and You</title>
		<link>http://coffeaelectronica.com/blog/2009/08/unit-testing-and-you/</link>
		<pubDate>Sun, 09 Aug 2009 16:33:30 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=219</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/green-bar.png" alt="green-bar" title="green-bar" width="208" height="124" class="alignleft size-full wp-image-188" />Unit testing seems to be one of the more misunderstood development practices. It tends to be viewed as adding too much development time or maintenance overhead, when in the long run the reality is that you save development time and maintenance overhead by taking care of potential bugs before they happen at the time when you are most engaged in the code, rather than weeks or months later when you may have forgotten half what was done or are looking through someone else's code.

The devoted unit testers often talk about being "test infected", and it really does happen. As unit testing becomes more second nature to you and just part of your development cycle, you will feel a loss or uneasy about the times when you cannot write tests for the code you are developing (generally a case when starting at a new company that has not yet embraced unit testing). You feel wrong about not testing and that is a good thing.

In my opinion, there is no excuse for not having at least some unit testing of your code. Ideally, the more coverage the better; however, some is better than none. You don't have to get into "Test Driven Development" if you don't want to... it does not appeal to every one, just learn to do "Test-centric Development", which is a phrase we coined at a company I used to work for. It means development with good unit testing, though not necessarily done before the code.

So, before I get too far off topic, let's go into the "Why", the "What" and the "Where" of unit testing, and then I will talk about the basic tools you need to start testing. 

<strong>Why Write Unit Tests</strong>

Why should you write unit tests? It's a question that I have heard many times. The best answer I have heard is 

<blockquote>"how do you know your code works, if you don't test it?"</blockquote>

... and no, QA testing does not count because I have yet to come across a QA department that will regression test an entire application every time you make a change to the code, they may exists, but not in any company I have ever heard of. Unit testing your code provides a first line of defense against bugs and proof that your code does what it should. In writing testing you are also using your code in a similar way that another developer will, meaning that your unit tests can serve as a 100% accurate usage example and source of functional documentation. How often do your JavaDoc comments actually reflect the behavior of the code? Unit test "documentation" will never be out of sync with the code; it can't be, if it's not it will fail and you will have to fix it.

Unit testing also provides a level of confidence around making changes. If you have ever had to change a significant amount of code with and without unit tests, you will agree that you feel much more confident when you have good unit test coverage to prove that your changes did not break anything unexpectedly.

The last point as to why we write unit test is that you can then have them runnable on command and/or automated by the build process, before check-ins, etc. so that you know you are building your artifacts or checking into source control a clean set of code... again part of the confidence.

<strong>What do I Unit Test?</strong>

Ideally, unit testing should be all-pervasive; every path through every method of every class (not interfaces) should be tested through various scenarios including normal values, boundary conditions and exceptions. Unfortunately, this ideal case is not always practical. So it boils down to "do the best you can".

Most of us are not lucky enough to be starting a project from scratch. When you come into an untested project a month or a year into it's development you need to be realistic and draw a "line in the sand" such that from this point forward we will unit test our code to the best of our abilities. The older "legacy" code can be picked at and tested as feature requests and bugs cause you to delve into those untested waters.

<strong>Where do Unit Tests Go?</strong>

[caption id="attachment_192" align="alignleft" width="300" caption="Separation of production source and test source"]<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/testing-separation.png"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/testing-separation-300x213.png" alt="Separation of production source and test source" title="testing-separation" width="300" height="213" class="size-medium wp-image-192" /></a>[/caption] Unit test source code should reside in a separate directory structure from the "production" source code, and should also be compiled into a separate class directory structure; however, the package structure in the test source and production source directories should be the same.

Generally you should not release test source or compiled test code into a production environment, or in most cases even a testing/QA environment (unless you have specific test cases that are run in QA only). The separation of test source and classes from the production source and classes makes this filtering easier. The world will not end if you do allow your testing code into production; it is really more a matter of limiting the bulk of your production artifacts.

This separation does not in any way hinder your ability to have your test classes access the classes they are trying to test. Everything is still on the same classpath. In your IDE you would just mount both as source directories and everything would work seamlessly. Some IDEs do provide additional support for defining test directories in a slightly different way than normal source directories, but you will have to look into that on your own.

<strong>Running Unit Tests</strong>

There are a variety of ways to run your unit tests. You can run tests using the JUnit test runner from the command line (from <a href="http://junit.org">JUnit</a>):

<pre>java org.junit.runner.JUnitCore TestClass1.class [...other test classes...]</pre>

If you are using <a href="http://ant.apache.org/">Ant</a>, you can add a target to run your tests:

<code lang="xml">
<target name="test" depends="compile">
    <junit printsummary="yes" haltonfailure="yes">
        <classpath refid="test.runtime.classpath" />
        <formatter type="plain" />
        <batchtest fork="yes" todir="${test.report.dir}">
            <fileset dir="${test.build.dir}" includes="**/*Test.class" />
        </batchtest>
    </junit>
</target>
</code>

Once that is in place you can run your tests with:

<pre>ant test</pre>

You can use <a href="http://maven.apache.org">Maven</a>, which will "strongly suggest" where you should put your production and test source code, following the convention over configuration approach to development. Once your tests are in place or you have reconfigured Maven to your project setup you can run:

<pre>mvn test</pre>

which will generate a simple console-based test report.

<pre>
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running net.sourceforge.codeperks.io.zip.ZipBuilderTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.159 sec
Running net.sourceforge.codeperks.io.IoTemplateTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec

Results :

Tests run: 7, Failures: 0, Errors: 0, Skipped: 0
</pre>

Generally, you will probably be running your tests in your editor-of-choice, rather than the command line.

[caption id="attachment_196" align="alignleft" width="150" caption="Eclipse JUnit Runner Results"]<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/testing-runineclipse.png"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/testing-runineclipse-150x150.png" alt="Eclipse JUnit Runner Results" title="testing-runineclipse" width="150" height="150" class="size-thumbnail wp-image-196" /></a>[/caption] Or you can run JUnit tests from pretty much any IDE on the market. The image is an example of the <a href="http://eclipse.org">Eclipse</a> JUnit test runner and its results. As you can see it shows you which tests passed and which tests failed, if any. It also shows you how long each took to run.

You also see the "green bar" that you will hear avid testers talk about. If any of your tests do not pass, the green bar will be red to let you know that bad things have happened (hence the logo at the beginning of this article, "Embrace the Green Bar").

That should be enough project setup and general testing talk, how about we set up some good habits now with a healthy dose of "best practices" for unit testing.

<strong>Best Practices</strong>

When you write unit tests, you should treat them like real code. Pull out common code into shared classes, refactor repeated functionality into methods just like you would with the code you are testing. Also, you should use expressive names for your tests; the test case class should be named the same as the class you are testing with "Test" added to the end and your actual test methods should be named with underscores rather than the normal camel case notation (this is one of those opinion items, but the underscores do read better in test reports). As an example:

<code lang="java">public void handleRequest_with_null_userId(){}</code>

reads a bit more easily, in my opinion, than

<code lang="java">public void handleRequestWithNullUserId(){}</code>

Either is fine and technically correct, though some developers prefer one over the other.

One very important concept in good unit testing is the practice of coding to interfaces rather than implementations. Components such as services and DAOs should be interface-driven, meaning that you have an interface <tt>SomeDao</tt> that is implemented by <tt>SomeHibernateDao</tt> so that your code uses the interfaces rather than the actual implementation class. This promotes decoupling and allows for greater flexibility in testing as well as stronger unit test isolation.

The example below shows an API for some temperature sensing hardware. The <tt>TemperatureHardware</tt> interface has a standard implementation called <tt>DX39TemperatureHardware</tt> (made up) which access the hardware layer to get data from thermocouples regarding the temperature.

<code lang="java">
public interface TemperatureHardware {
    double getTemperature( short tcid );
}

public class DX39TemeratureHardware implements TemperatureHardware {
    public double getTemperature( short tcid ){
        // some fancy native hardware-specific stuff
    }
}
</code>

So now in testing this code, you can base your testing around the use of the interface because chances are you don't actually have the hardware itself. Coding to interfaces makes it much easier to integrate mock objects into your unit testing, and mock objects, you will eventually find to be an indispensable part of unit testing.

I have written quite a few posts about <a href="http://coffeaelectronica.com/blog/tag/mocking/">testing with mocks</a> but to summarize; mocking is the replacement of the complex (or even not so complex) dependencies of the object being tested with mocked out versions of those objects so that you can control their behavior and help isolate the test. There are a number of great mocking APIs availble, three of which are such as <a href="http://jmock.org">JMock</a> (<a href="http://coffeaelectronica.com/blog/tag/jmock/">related posts</a>), <a href="http://mockito.org">Mockito</a> (<a href="http://coffeaelectronica.com/blog/tag/mockito/">related posts</a>) and <a href="http://easymock.org">EasyMock</a> (<a href="http://coffeaelectronica.com/blog/tag/easymock/">related posts</a>).

I will leave the mocking examples to the referred postings as they go into the uses of mocking in greater detail than I would here.

<strong>Conclusion</strong>

<div style="float:right;padding:2px;"><iframe src="http://rcm.amazon.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=coffeael-20&o=1&p=8&l=as1&m=amazon&f=ifr&asins=0974514012" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></div>

That about summarizes my thoughts on unit testing. Most of this has been gone over and over on various blogs, books, and presentations, but I felt it important enough to present it one more time. Unit testing often gets lumped into the same box as agile and extreme programming which can put a bad taste on it when some projects/teams are looking into testing. I have nothing against extreme programming, but I have run across organizations that have a real negative attitude towards it and see unit testing as just "another one of those fluffy feel good code-hippie things". It's really not. Embrace the green bar and join us on the testing side.

As a foot note I recommend reading "<a href="http://www.amazon.com/gp/product/0974514012?ie=UTF8&tag=coffeael-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0974514012">Pragmatic Unit Testing in Java with JUnit</a><img src="http://www.assoc-amazon.com/e/ir?t=coffeael-20&l=as2&o=1&a=0974514012" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />" and the <a href="http://junit.org">JUnit</a> web site documentation for more information about testing with JUnit.

As a foot note to the foot note, I will also add that JUnit is not the only unit testing tool available for Java, there is another called <a href="http://testng.org">TestNG</a>, which I tried a few years back. It seemed good and some people swear by it; however, the tool support for it seemed to lag behind that for JUnit and I have always been comfortable with the features provided by JUnit, so I never saw a need to switch.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date>2009-08-09 11:33:30</wp:post_date>
		<wp:post_date_gmt>2009-08-09 16:33:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unit-testing-and-you</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Unit Testing: Coverage</title>
		<link>http://coffeaelectronica.com/blog/2009/08/unit-testing-coverage/</link>
		<pubDate>Mon, 10 Aug 2009 13:34:04 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=258</guid>
		<description></description>
		<content:encoded><![CDATA[I had originally intended to cover test coverage in my previous post <a href="http://coffeaelectronica.com/blog/2009/08/unit-testing-and-you/">Unit Testing and You</a>; however, it seems that Wordpress has some issues with long posts. So, I broke this out into a separate post.

[caption id="attachment_205" align="alignleft" width="150" caption="Coverage View in Eclipse"]<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/testing-coverage.png"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/testing-coverage-150x150.png" alt="Coverage View in Eclipse" title="testing-coverage" width="150" height="150" class="size-thumbnail wp-image-205" /></a>[/caption] Another key, but often overlooked, part of unit testing is test coverage. Test coverage tools use byte code instrumentation to measure how much of your code is "exercised" during your unit tests. This can make overlooked, normally hidden, paths through your code appear obvious so that you can write tests to cover those cases as well.

The image shows the <a href="http://www.eclemma.org/">EclEmma</a> plug-in coverage results view in Eclipse. You can see that it shows how much your unit tests have "covered" each method of the class. This display is cumulative so that if you run all of your unit tests it will show you what has not been covered by any of them. It will also highlight the source in the editors with red, yellow or green based on the coverage.

If unit testing let's you know whether or not your code works, test coverage lets you know when you are done testing. Now, coverage is not the be-all end-all statistic of how good your unit tests are, but it is a good baseline starting point, and it is something measurable that you can put a pin in.

Coverage has become a bit of a game to me, as I tend to accept anything over 90% as being acceptable unless there is something glaringly easy and untested; however, obtaining that last 10% can be quite an exercise. Full 100% coverage can sometimes be unobtainable due to they way certain code constructs are measured, but like I said... 90% and above is really an obtainable goal. You can decide with your peers and coworkers what your coverage goal should be on your project. As a rule of thumb, if you write a unit test at all you probably have at least 75% coverage without even trying.

There are a handful of tools available for performing coverage evaluation: <a href="http://www.atlassian.com/software/clover/">Clover</a>, <a href="http://emma.sourceforge.net/">Emma</a>, and <a href="http://cobertura.sourceforge.net/">Cobertura</a>. I am sure there are others, that's just what came off the top of my head. 

I recommend using the same coverage tool for both your IDE and your build tools, though you may want to use more than one in each. Keeping a common set of tools let's you better predict how things will work when building in one tool or the other. I tend to use Emma, because it has a good Eclipse plug-in as well as a good maven report plug-in.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date>2009-08-10 08:34:04</wp:post_date>
		<wp:post_date_gmt>2009-08-10 13:34:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unit-testing-coverage</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="coverage"><![CDATA[Coverage]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IoTemplate API</title>
		<link>http://coffeaelectronica.com/blog/2009/08/iotemplate-api/</link>
		<pubDate>Wed, 12 Aug 2009 00:52:29 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=266</guid>
		<description></description>
		<content:encoded><![CDATA[I had an idea recently that I have coded up into my <a href="http://sourceforge.net/projects/codeperks">CodePerks project</a>. I was writing a Spring MVC Controller that had to write the response output directly rather than to a view, but the content written differed based on some other criteria. That got me thinking about how often we write and rewrite the standard IO handling construct.

<code lang="java">
OutputStream out = null;
try {
    out = // create your stream
    // use the stream 
} catch(Exception e){
    // handle it
} finally {
    if(out != null){
        try { out.close(); } catch(Exception ex){}
    }
}
</code>

It's not rocket science code, but I have seen it done wrong more often than you would expect. If nothing else, it gets tedious to write when you have to do it or something like it more than once in a project.

Inspired by the <a href="http://springsource.org">SpringFramework's</a> use of the template pattern and factory methods, I thought that there should be something along those same lines for handling IO streams such that you still maintain the current flexibility while also adding an additional layer of abstraction to remove the repetitive, potentially error-prone parts.

Most of the code in the <a href="http://codeperks.svn.sourceforge.net/viewvc/codeperks/trunk/codeperks-io/src/main/java/net/sourceforge/codeperks/io/">CodePerks IO API</a> is what I came up with to answer that need. Basically what it boils down to is that you have a factory and a callback interface. The Factory is used to create the specific stream or reader/writer you need, while the callback is provided so that operations can be performed on the stream without the need to manage resource cleanup yourself.

<code lang="java">
final OutputStreamFactory<ServletOutputStream> osf = new OutuputStreamFactory<ServletOutputStream>(){
    public ServletOutputStream outputStream() throws IOException {
        return response.getOutputStream();
    }
};

final OutputStreamCallback<ServletOutputStream> osc = new OutputStreamCallback<ServletOutputStream>(){
    public void output(ServletOutputStream out) throws IOException {
        out.println("shun the");
        out.println("nonbeliever");
        out.println("charlie");
    }
};

IoTemplate.output(osf,osc);
</code>

You can even simplify this down for cases such as that shown above, when you already have a stream you are working with. The <tt>IoTemplate</tt> class provides wrapper methods as a convenience for the standard IO types.

<code lang="java">
final OutputStreamCallback<ServletOutputStream> osc = new OutputStreamCallback<ServletOutputStream>(){
    public void output(ServletOutputStream out) throws IOException {
        out.println("shun the");
        out.println("nonbeliever");
        out.println("charlie");
    }
};

IoTemplate.output(response.getOutputStream(), osc);
</code>

Leaving you to focus on writing your functionality, not all that boilerplate code. You could create a reusable factory for your application, or use one of the file-based or adapter implementations provided. Then each time you need to perform an IO operation you could use that factory and create a new callback, or even come up with a reusable set.

I will admit that this does not really cut down on the code all that much and I think I see the reason why Spring has not implemented anything like this. It's hard to do it in an elegant manner without injecting a lot of assumptions and/or restrictions. I went for the shotgun approach of trying to cover everything.

Also, there are APIs such as the <a href="http://commons.apache.org/io">Jakarta Commons IO API</a> which do a much more compact job of reading/writing data all at once; however, that is not really what this API is for. CodePerks IO is meant for those situations where you need a bit more fine-grained control over how things are handled but still want some re-usability and abstraction from boilerplate code.

Perhaps someone else will find it useful too. I will be maintaining that project and will eventually produce a release. Drop me an email if you are using it or would like to use it... sometimes that can get me to move things along faster. :-)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date>2009-08-11 19:52:29</wp:post_date>
		<wp:post_date_gmt>2009-08-12 00:52:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>iotemplate-api</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kindling</title>
		<link>http://coffeaelectronica.com/blog/2009/08/kindling/</link>
		<pubDate>Wed, 12 Aug 2009 23:59:55 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=269</guid>
		<description></description>
		<content:encoded><![CDATA[﻿I had an idea recently that I thought would make for an interesting Android app. Overall, it was not very original but the details are what made it different. I thought it would be interesting to write a short story reader app that would allow the user to purchase short stories by independent authors for some small amount, say under one dollar per story. The price could be specified by the author. The content format would either be open or closed based on the authors specification, meaning that if the authors wanted to protect their work tightly they could provide content that could only be viewed with the reader app, whereas other authors could allow their content to be used openly once paid for (an honor system). The authors could be anybody, but there would be a rating system to help separate the good from the not-so-good. Also, the "house" would get a cut of every story sold.



Sounds familiar doesn't it? Yes, it's basically the Amazon Kindle delivery system but minus the annoyances or restrictions (also minus the need to be a big time published author). The content you buy would be managed by you, though you could keep your story files on our server as a backup. I saw this as a place for new writers to get their work out to the public, and hopefully it would also bring some "big names" in at some point.



I cannot follow through with this idea.


No, it's not a technical problem. Every technical aspect of this idea is something I have done before or could do without much trouble. I could probably bring in some of my peers on this one too. So, what's the problem?



Patents.



Yes, my little idea would be squashed completely by either Amazon or Discovery Network, who holds a pile of ebook-related patents, including delivery and security methods. Oh, yeah, I could probably get away with it if I were to do all of this at no cost... maybe. Assuming that I would not get sued or told to cease and desist, I don't think ad revenue would make enough to cover the development and hosting costs. Also, being that I would not be able to pay the authors anything, the content would probably languish into mediocrity.


I guess to a certain degree that is what patents and licensing is all about; squashing out your competition.


Oh well. I will just have to keep thinking.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date>2009-08-12 18:59:55</wp:post_date>
		<wp:post_date_gmt>2009-08-12 23:59:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kindling</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jackrabbit</title>
		<link>http://coffeaelectronica.com/blog/2009/07/jackrabbit/</link>
		<pubDate>Fri, 03 Jul 2009 19:22:17 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=491</guid>
		<description></description>
		<content:encoded><![CDATA[I decided to play around a little with <a href="http://jackrabbit.apache.org">Jackrabbit</a> the other day... here are some of my notes...

I am running on Ubuntu with <a href="http://tomcat.apache.org">Tomcat 6</a> and all I had to do to get started was download the Jackrabbit war distribution and install it in the webapps directory, then add the jcr-1.0.jar (downloaded from Sun) to the TOMCAT/lib directory. Once you start up the server and go into the context you get a nice welcome screen:

[caption id="attachment_492" align="alignnone" width="600" caption="Welcome screen"]<img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/10/jack-screen-1.png" alt="Welcome screen" title="jack-screen-1" width="600" height="291" class="size-full wp-image-492" />[/caption]

I created a content repo in my home directory: 

<pre>/home/cjstehno/.jackrabbit</pre>

Once the repo is configured you get a list of common clients, with links on how to use them:

[caption id="attachment_494" align="alignnone" width="600" caption="Common clients"]<img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/07/jack-screen-2.png" alt="Common clients" title="jack-screen-2" width="600" height="240" class="size-full wp-image-494" />[/caption]

I was interested in Standard WebDAV to do some simple content sharing between a few computers. It seemed simple enough and there is even a WebDAV connection setup in Ubuntu, but I had a heck of a time getting it to work. Finally I just tried pasting the connection URL into Nautilus directly:

<pre>http://localhost:8080/jackrabbit/repository/default</pre>

but that didn't work, so I tried a slight change,

<pre>dav://localhost:8080/jackrabbit/repository/default</pre>

which worked and asked me for a username and password, which the documentation says will take anything until you configure it. It looked like I had everything up and running:

[caption id="attachment_495" align="alignnone" width="600" caption="View from Nautilus"]<img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/07/jack-screen-3.png" alt="View from Nautilus" title="jack-screen-3" width="600" height="316" class="size-full wp-image-495" />[/caption]

Looks can be deceiving... I could add files but not edit them or add directories; however, after a refresh of the WebDAV view my folder was there. It did allow me to copy files from it into other directories and then work with them as normal. It does not seem like a very useful means of accessing the files. I can view everything in the web interface, but that is really not much better.

I decided to try connecting using one of the more programmatic means, the RMI client provided with Jackrabbit. It was actually very easy to connect and use. After digging around for a while with the files I had in the repository, It seems that this content repository stuff is quite flexible and could be very powerful, but the learning curve to make good use of it may be a little high... and there seems to be little documentation.

I wrote a little dumper app, which I called Jackalope so I could see how things were laid out in the repo:

<code lang="java">
public class Jackalope {
   public static void main( final String[] args ) {
        final ClientRepositoryFactory factory = new ClientRepositoryFactory();
        Session session = null;
        try {
            final Repository repo = factory.getRepository( "//localhost/jackrabbit.repository" );
            session = repo.login( new SimpleCredentials("cjstehno", "foo".toCharArray() ) );

            final String user = session.getUserID();
            final String name = repo.getDescriptor(Repository.REP_NAME_DESC);
            System.out.println("Logged in as " + user + " to a " + name + " repository.");

            final Workspace ws = session.getWorkspace();
            System.out.println("Workspace: " + ws.getName());

            final Node node = session.getRootNode();
            System.out.println("Node: " + node.getName());

            final NodeIterator children = node.getNodes();
            System.out.println("Children: " + children.getSize());
            while(children.hasNext()){
                final Node child = (Node)children.next();
                System.out.println("--> " + child.getName() + " [" + child.getPrimaryNodeType().getName() + "]");

                final NodeDefinition nodeDef = child.getDefinition();
                System.out.println("-->\tn: " + nodeDef.getDeclaringNodeType().getName());

                final PropertyIterator props = child.getProperties();
                while(props.hasNext()){
                    final Property prop = (Property)props.next();
                    System.out.println("-->\tp: " + prop.getName() + " = " + prop.getValue().getString());
                }

                if(! child.getPrimaryNodeType().isNodeType( "rep:system" ) ){
                    final VersionHistory history = child.getVersionHistory();
                    System.out.println("--> labels: " + Arrays.toString( history.getVersionLabels() ));
                }

            }

        } catch (final Exception e) {
            e.printStackTrace();
        } finally {
            session.logout();
        }
    }
}
</code>

It's nothing fancy, just a little code to poke around. There was apparently an Eclipse plug-in for navigating through JCR repos, but it has since died away. (Also, if you get errors running the code above, remove the last if block related to versioning... the versioning functionality is not well documented and this was bombing a lot for me).

Interesting stuff, but not really what I was looking for. I will keep it in mind for future use. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>491</wp:post_id>
		<wp:post_date>2009-07-03 14:22:17</wp:post_date>
		<wp:post_date_gmt>2009-07-03 19:22:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jackrabbit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="jackrabbit"><![CDATA[Jackrabbit]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jcr"><![CDATA[JCR]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Charlie the Unicorn</title>
		<link>http://coffeaelectronica.com/blog/2009/08/charlie-the-unicorn/</link>
		<pubDate>Mon, 03 Aug 2009 14:26:59 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=805</guid>
		<description></description>
		<content:encoded><![CDATA[The latest video in the "Charlie the Unicorn" saga is out and I heard that there were coworkers of mine who had never heard of Charlie so I gathered up the links to the official versions of all three:
<ol>
	<li> <a href="http://www.filmcow.com/charlietheunicorn.html">Charlie the Unicorn</a> - Charlie goes to the Candy Mountain Cave.</li>
	<li><a href="http://www.filmcow.com/flash-charlietheunicorn2.html">Charlie the Unicorn 2</a> - Charlie finds the Banana King.</li>
	<li><a href="http://www.filmcow.com/flash-charlietheunicorn3.html">Charlie the Unicorn 3</a> - Charlie finds out that sea creatures love you.</li>
</ol>
They are animated humor that is basically safe for work. I didn't really like "Charlie the Unicorn" the first time I saw it, but after I watched again I couldn't get it out of my head.

Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>805</wp:post_id>
		<wp:post_date>2009-08-03 09:26:59</wp:post_date>
		<wp:post_date_gmt>2009-08-03 14:26:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>charlie-the-unicorn</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="humor"><![CDATA[Humor]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DZone: No Love for Andoid</title>
		<link>http://coffeaelectronica.com/blog/2009/08/dzone-no-love-for-andoid/</link>
		<pubDate>Fri, 14 Aug 2009 23:33:14 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=274</guid>
		<description></description>
		<content:encoded><![CDATA[If you are following along, you know that I recently purchased the new T-Mobile Android phone, the myTouch (see "<a href="http://coffeaelectronica.com/blog/2009/08/android-love/">Android Love</a>"). I have started using it for my morning blog reading, which in general has been great, except that a lot of good links come by way of <a href="http://dzone.com">DZone.com</a> (a developer link aggregation and voting site)... why is this a problem? Well, their site is completely unusable on the Android web browser. You can't even find the link to the actual article as it doesn't seem to even be rendered. Ouch.

Being a good net-citizen and avid reader of DZone, I figured I would post some feedback about the oversight.

<blockquote>
I have loved DZone since way back at the beginnings when it was just Java/Eclipse-Lobby. The site is great, the concept and the content are great... one thing is missing that I recently was shocked to find out. The site is completely unusable on the Android browser. :-(

Are there any plans for a mobile version of the site or a specialized DZone Android App? If it's a need for developers, I would be happy to assist in either approach.

Keep up the great work!

Chris
</blockquote>

DZone started out as a Java and Eclipse article and discussion site and has since morphed into a more broader scope; however, they still seem to be very heavily Java and related technology oriented. The response I got back a few hours later was a bit of a surprise:

<blockquote>
Chris,

At this point we dont have any plans for a website that is Android compatible. We are working on an iPhone app and possibly after that we could revisit the potential for something for Android.

Sorry about the inconvenience.

Brandon
</blockquote>

And with that the ticket was closed. Wow, ok, way to drink the Apple Juice. Would it be that hard to make a light-weight mobile (meaning iphone, android, winme, whatever) version of the site?

Any DZone-loving Android users out there care to help me out writing a DZone Reader App?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date>2009-08-14 18:33:14</wp:post_date>
		<wp:post_date_gmt>2009-08-14 23:33:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dzone-no-love-for-andoid</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="wtf"><![CDATA[WTF]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>﻿Parsing Name/Value Pairs</title>
		<link>http://coffeaelectronica.com/blog/2009/08/%ef%bb%bfparsing-namevalue-pairs/</link>
		<pubDate>Sat, 15 Aug 2009 19:04:33 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=292</guid>
		<description></description>
		<content:encoded><![CDATA[A coding problem I have run into numerous times has been the relatively simple parsing of a sequence of name/value pair data. Say you have something like the following:

<code lang="java">String data = "alpha=100,bravo=200,charlie=300";</code>

which you need to parse into a <tt>Map<String,Integer></tt> for whatever reason. Generally I have taken the brute force (i.e. lazy solution) approach of splitting the string by the grouping token (comma in this case) and then looping through those results and splitting each by the separation token (equals in this case), something like the code shown below:

<code lang="java">
final String[] nvps = StringUtils.split( data, ',' );
for( final String nvp : nvps ){
    final String[] nv = StringUtils.split( nvp, '=' );
    map.put(nv[0], Integer.valueOf(nv[1]) );
}
</code>

It's not a bad solution to the problem, not very efficient, but not bad. Most of the time when I have run into the need for this, efficiency has not really been much of an issue. Sidenote: I used <tt>org.apache.commons.lang.StringUtils.split(String,char)</tt> due to how it handles nulls and blanks safely.

I recently thought about a more efficent approach to this problem. With a little help from regular expressions, you can refactor the above code to:

<code lang="java">
final String[] parts = data.split("=|,");
for(int i=0; i<parts.length; i+=2){
    map.put( parts[i], Integer.valueOf(parts[i+1]) );
}
</code>

which does the same work in almost negligible time when compared to the original. I ran some simple benchmark tests with larger lists of name/value pairs and found that even as the first method took about 32ms, the second method still registered as taking 0ms. I would say that it's an improvement.

Also, with the second approach you would not even really need to have different tokens for the group and the separator since it's really just taking two values at a time and then skipping to the next pair.

Now, generally I am of the opinion that premature optimization is evil; however, I don't relly count things like this as optimization, but rather as "better coding".

As a followup, you can also write a version of the second method using an alternate form of the <tt>StringUtils.split(...)</tt> method, with no noticable loss of efficiency:

<code lang="java">
final String[] parts = StringUtils.split(data,",=");
for(int i=0; i<parts.length; i+=2){
    map.put( parts[i], Integer.valueOf(parts[i+1]) );
}
</code>

which kind of combines the best of both worlds. You get more efficient and simle code without the need for regular expressions and with the extra safety features provided by <tt>StringUtils</tt>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date>2009-08-15 14:04:33</wp:post_date>
		<wp:post_date_gmt>2009-08-15 19:04:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%ef%bb%bfparsing-namevalue-pairs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Light Advertising</title>
		<link>http://coffeaelectronica.com/blog/2009/08/light-advertising/</link>
		<pubDate>Sun, 16 Aug 2009 14:10:28 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=328</guid>
		<description></description>
		<content:encoded><![CDATA[You may have noticed that I have added some advertising to this site. I had originally looked into putting AdSense ads on the site; however, after <a href="http://coffeaelectronica.com/blog/2009/08/sell-out-fail/">first rejecting me</a> and then finally accepting me, I found that their ads are very ugly and their management tools are pretty sub-par. So I took a look at Amazon's Affiliate program. The ads from Amazon are much more attractive and refined so they don't really bring down the look of the page. Also, their management and creation tools are flexible and easy to use.

I have never really liked advertising in general and felt for a long time that I would never use it on any of my sites; however, financial pressure can sometimes influence such opinions. The ads I have implements are out-of-the-way, on the lower-end of the side bar and down in the footer so as not to detract from the site content. I will also use product links in posts when I refer to a book or something.

Lastly, I do get money when you purchase something through one of the links/ads on this site. Actually, I would get Amazon gift certificates... so, it's really win-win for them. :-)

Thank you in advance for any purchases you make through my affiliations. 

If you represent a company and would like to advertise on this site, please feel free to contact me, though be advised that I will be <i>very</i> picky about what ads I would accept.

If you have any comments and/or complaints, you are free to email me at "<script type="text/javascript">document.write('chris');document.write(' at ');document.write('stehno.com');</script>".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>328</wp:post_id>
		<wp:post_date>2009-08-16 09:10:28</wp:post_date>
		<wp:post_date_gmt>2009-08-16 14:10:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>light-advertising</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Goin&#039; Mobile</title>
		<link>http://coffeaelectronica.com/blog/2009/08/goin-mobile/</link>
		<pubDate>Thu, 20 Aug 2009 01:36:33 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=343</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="attachment_344" align="alignleft" width="200" caption="Mobile version of this site."]<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/site-snap.png"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/08/site-snap-200x300.png" alt="Mobile version of this site." title="site-snap" width="200" height="300" class="size-medium wp-image-344" /></a>[/caption]One of the things I have realized while browsing around the internet on a little tiny phone screen is that there are a lot of sites out there with little to no support for mobile devices.

Some sites are generally usable without much pain or tweaking, and some have special versions built specifically to support mobile devices, while there is another category that just does not work at all... I am looking at you DZone. I hate to poke that sore spot but it has been a real pain for me (and yes I am working on an app to take care of it).

In case you did not notice, the image to the left is a screenshot of this site's brand new mobile version. Okay, it's pretty weak, but it's usable. I will keep tweaking it and trying to make it better and more usable.

My <a href="http://android.com">Android</a> development time has been going well. I have written the first sputterings of an app; however, I am having trouble actually deploying it to the real device. I don't really want to setup a Marketplace account for a simple little personal application. I can't seem to figure out how to install an app directly via USB and doing it over the internet seems to have it's own issues. I will figure it out, it will just require some Google time. 

The actual development is quite interesting. It is has aspects of Eclipse RCP development and Google GWT development... just in the feel of how things are done and laid out. The declarative UI system is great and not too hard to use once you get the hang of it.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>343</wp:post_id>
		<wp:post_date>2009-08-19 20:36:33</wp:post_date>
		<wp:post_date_gmt>2009-08-20 01:36:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>goin-mobile</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Android Deployment</title>
		<link>http://coffeaelectronica.com/blog/2009/08/android-deployment/</link>
		<pubDate>Sat, 22 Aug 2009 20:01:52 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=350</guid>
		<description></description>
		<content:encoded><![CDATA[While playing around with <a href="http://android.com">Android</a> app development, I ran into an annoying issue when I tried to deploy my app into my real phone. It was working fine in the emulator, but I kept getting errors when I tried to install it on my phone. 

Here is what I was doing:

<ol>
    <li>I ran the proper Eclipse Wizard to export and sign the APK file</li>
    <li>Pushed the APK file out to my web server</li>
    <li>Pointed the phone's browser to the APK file to download it</li>
    <li>Clicked on the download to install it - and got an error about not being able to find the AndroidManifest.xml file</li>
</ol>

After some poking around the internet I was able to figure out that the mime type of APK files must be correct for the device to install them properly (picky picky). It must be "application/vnd.android.package-archive" for .apk files.

So, I dove into the apache config (often /usr/local/apache/conf/httpd.conf in case you are following along) and found the configuration for mime types referencing an external default mime type configuration file. I opened that file and as expected there was no mime type specified for APK files. I added the correct directive to the apache config to support the new mime type:

<code>AddType application/vnd.android.package-archive .apk</code>

I then restarted Apache and tried to do the install again... with the same results. Ok, how else could I ensure the correct mime type? Ah ha! The <tt>A</tt> tag in HTML has a <tt>type</tt> attribute used to specify the content type of the link contents.

I created an index.html page for my app and added a link with the correct content type:

<code lang="html"><a href="myapp.apk" type="application/vnd.android.package-archive">MyApp</a></code>

Surely, it would work now.

It's didn't work... and don't call me Shirley.

I was getting frustrated because all of the documentation I could find about installing apps on your own phone basically said to "just do it" with no more help than that. I figured that I was doing something stupid or missing something simple so I dropped it there for the night.

I tentatively picked it back up in the morning as a background thought. I knew that web-based delivery of Android apps worked because <a href="http://slideme.org">SlideMe</a> delivers their Android Marketplace app that way. That's when it hit me... what do they do that I am not doing?

I checked the source of their download page and there was nothing special.

I fired up Eclipse's TCP Monitor and downloaded the app through it to view the headers and wondered why I didn't think to do that sooner. The response headers coming back with their download were the following (I removed the cookie information, but the rest is as it came):

<pre>
HTTP/1.1 200 OK
Date: Thu, 20 Aug 2009 13:35:40 GMT
Server: Apache/2.2.3 (CentOS)
X-Powered-By: PHP/5.2.4
Expires: Sun, 19 Nov 1978 05:00:00 GMT
Last-Modified: Thu, 20 Aug 2009 13:35:40 GMT
Cache-Control: store, no-cache, must-revalidate
Cache-Control: post-check=0, pre-check=0
Vary: Accept-Encoding
Content-Encoding: gzip
Content-Type: application/vnd.android.package-archive
Cache-control: private
Set-Cookie: [removed]; expires=Sat, 12 Sep 2009 17:09:00 GMT; path=/; domain=.slideme.org
Set-Cookie: SERVERID=i-5f71cf36; path=/
Connection: close
Transfer-Encoding: chunked
</pre>

When I did the same thing for my download I got the following:

<pre>
HTTP/1.1 200 OK
Date: Thu, 20 Aug 2009 13:37:26 GMT
Server: Apache/2.0.52 (Red Hat)
Last-Modified: Thu, 20 Aug 2009 01:56:29 GMT
ETag: "[removed]"
Accept-Ranges: bytes
Content-Length: 64428
Keep-Alive: timeout=15, max=100
Connection: Keep-Alive
Content-Type: application/vnd.android.package-archive
</pre>

Notice that the content type was set the same in each; however, the slideme.org response header has a bunch of extra cache control headers. I thought maybe they had something to do with it, but because mine was showing up with the correct content type I gave it one more clean try using my phone.

It worked.

All I can figure is that it was either some sort of server or browser caching even though I restarted the server. This may be the reason why slideme.org has all the cache control headers. I will have to play with it for a bit. I will post if I find anything useful.

So what it comes down to is that as long as you have your mime type (content type) set properly, you can install your apps from your web server. The world is right again.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>350</wp:post_id>
		<wp:post_date>2009-08-22 15:01:52</wp:post_date>
		<wp:post_date_gmt>2009-08-22 20:01:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>android-deployment</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My Favorite Android Apps</title>
		<link>http://coffeaelectronica.com/blog/2009/09/my-favorite-android-apps/</link>
		<pubDate>Fri, 04 Sep 2009 22:45:11 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=367</guid>
		<description></description>
		<content:encoded><![CDATA[This was going to be a top 10 list of my favorite Android applications; however, I could not easily narrow it down to ten at this point, so you get the top X (non-games):

<ol>
	<li>Astrid - multipurpose task manager.</li>
	<li>FBreader - ebook reader.</li>
	<li>Here I Am - plots out exactly where you are and allows you to send the location to others.</li>
	<li>Mixzing lite - music player with recommendations</li>
	<li>My Tracks - records your path with time, distance and elevation.</li>
	<li>PicSay - fun photo manipulation.</li>
	<li>Shazam - figures out what a song is from a small bit of it.</li>
	<li>Weather bug - weather app</li>
	<li>Where - a little bit of everything, food, weather, traffic, etc</li>
	<li>Any cut - allows more flexible home shortcuts.</li>
	<li>Barcode scanner - scan bar codes for links, text, etc</li>
	<li>Compare Everywhere - scan a barcode and find out how much and where you can get it.</li>
	<li>Listen - podcast search and recommendations</li>
	<li>Radio finder - finds your local am/fm radio stations.</li>
	<li>Shop Savvy - another barcode scanner comparison shopper app.</li>
	<li>Tip Calc - cool tip calculator and check divider</li>
</ol>

I also have some that I tried and did not really like:

<ul>
<li>Sherpa - not very user-friendly and never really seemed to find anything useful</li>
<li>last.fm - should be called crash.fm and it really only works on a wireless network.</li>
<li>linkedin - not really useful for more than accessing your contact information.</li>
<li>aCast - pod cast management does not really work well.</li>
</ul>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>367</wp:post_id>
		<wp:post_date>2009-09-04 17:45:11</wp:post_date>
		<wp:post_date_gmt>2009-09-04 22:45:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-favorite-android-apps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Highlight Text with JavaScript</title>
		<link>http://coffeaelectronica.com/blog/2009/09/highlight-text-with-javascript/</link>
		<pubDate>Tue, 15 Sep 2009 17:12:08 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=424</guid>
		<description></description>
		<content:encoded><![CDATA[A question arose recently about how to highlight a word or words in the text of a <tt>div</tt> element. It turns out that it's actually pretty easy using <a href="http://prototypejs.org">Prototype</a>.

The example below is the code needed to highlight each occurrance (up to ten of them) of the word 'pick' in the div. The operation will be performed when the content div is clicked.
    
<code lang="html">
<html> 
    <head> 
        <style type="text/css">
            #content span { background-color: yellow; }
        </style>
        <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/prototype/1.6.0.2/prototype.js"></script>
        <script type="text/javascript">
            Event.observe(window,'load',function(){
                $('content').observe('click',highlight);
            });
            
            function highlight(){
                $('content').innerHTML = $('content').innerHTML.sub('pick','<span>pick</span>',10);                
            }
        </script>
    </head>
    <body>
    
        <div id="content">
            Peter Piper picked a peck of pickeled peppers. 
            How many peppers did Peter Piper pick?
        </div>
    
    </body>
</html>
</code>

<b>Note:</b> I used to Google-hosted version of the <a href="http://www.prototypejs.org/2008/5/27/prototype-hosted-on-google-s-servers">prototype library</a> which is handy.

This could easily be refactored to do any sort of style operation to the selected text, or replace it altogether. I will have to give this a try with JQuery as a comparison.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>424</wp:post_id>
		<wp:post_date>2009-09-15 12:12:08</wp:post_date>
		<wp:post_date_gmt>2009-09-15 17:12:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>highlight-text-with-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="prototype"><![CDATA[Prototype]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Unix y2038 Bug</title>
		<link>http://coffeaelectronica.com/blog/2009/09/unix-y2038-bug/</link>
		<pubDate>Sat, 19 Sep 2009 13:09:49 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=448</guid>
		<description></description>
		<content:encoded><![CDATA[Aparently there are still some short-sighted developer date-based issues out there, one of which is the <a href="http://en.wikipedia.org/wiki/Year_2038_problem">Year 2038 Problem</a>, which is a unix-based problem with how the milliseconds since 1970 value is stored... it's a 32-bit value which will wrap around into negative numbers in 2038.

I ran a quick sanity check in Linux:

<code lang="java">Date expiration = new Date(Long.MAX_VALUE);</code>

and found that a Mac and Linux running Sun's JVM seems to be fine:

<pre>Sun Aug 17 01:12:55 CST 292278994</pre>

while GCJ on Linux produced:

<pre>
Exception in thread "main" java.lang.IllegalArgumentException: month out of range:-19461555
at gnu.java.util.ZoneInfo.getOffset(int, int, int, int, int, int) (/usr/lib/libgcj.so.5.0.0)
at java.util.GregorianCalendar.computeFields() (/usr/lib/libgcj.so.5.0.0)
at java.util.Calendar.setTimeInMillis(long) (/usr/lib/libgcj.so.5.0.0)
at java.util.Date.toString() (/usr/lib/libgcj.so.5.0.0)
at java.io.PrintStream.println(java.lang.Object) (/usr/lib/libgcj.so.5.0.0)
at Main.main(java.lang.String[]) (Unknown Source)
</pre>

Ouch!

This is kind of a subtle issue since your JVM may be giving you the correct value; however, your database which may be running on Linux might give you the wrong value from a time-based operation (or an error).

This is one to keep an eye one.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>448</wp:post_id>
		<wp:post_date>2009-09-19 08:09:49</wp:post_date>
		<wp:post_date_gmt>2009-09-19 13:09:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unix-y2038-bug</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="wtf"><![CDATA[WTF]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Highlight Text With JavaScript: JQuery</title>
		<link>http://coffeaelectronica.com/blog/2009/09/highlight-text-with-javascript-jquery/</link>
		<pubDate>Thu, 24 Sep 2009 15:18:49 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=458</guid>
		<description></description>
		<content:encoded><![CDATA[In my recent post about <a href="http://coffeaelectronica.com/blog/2009/09/highlight-text-with-javascript/">Highlighting Text With JavaScript</a> I suggested that I should try doing the same functionality with <a href="http://jquery.com">JQuery</a>. 

So I did, and I am really starting to like JQuery. Below are the modifications to the HTML shown in the previous posting; basically you just swap out the two script elements in the <a href="http://prototypejs.org">Prototype</a> version with those shown below:

<code lang="html">
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script>
<script type="text/javascript">
    jQuery(function(){
        $('#content').bind('click',highlight);
    });
    
    function highlight(){
        var htm = $('#content').html();
        var str = '';
        
        jQuery.each( htm.split(' '), function(){
           if(jQuery.trim(this) != ''){
            str += this.replace('pick','<span>pick</span>');
           }
           str += ' ';
        });
        
        $('#content').html(str);
    }
</script>
</code>

JQuery does on-load event handling and event-handling in general, from what I have seen, in a very similar way to how Prototype does it. The <tt>highlight()</tt> function is a bit more complex in this version as JQuery does not seem to have the same level of String manipulation support out of the box; however, maybe I missed it in the documentation or perhaps there is a good plugin that adds better string handling.

This post is not really meant to compare the two libraries overall; it was more to satisfy my curiousity and get some practice with JQuery when solving a problem I have already solved with Prototype.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>458</wp:post_id>
		<wp:post_date>2009-09-24 10:18:49</wp:post_date>
		<wp:post_date_gmt>2009-09-24 15:18:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>highlight-text-with-javascript-jquery</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[JQuery]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Another Online Storage Option</title>
		<link>http://coffeaelectronica.com/blog/2009/09/another-online-storage-option/</link>
		<pubDate>Fri, 25 Sep 2009 17:14:10 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=464</guid>
		<description></description>
		<content:encoded><![CDATA[A while back I wrote a post about available <a href="http://coffeaelectronica.com/blog/2009/07/online-storage-options/">Online Storage Options</a> and their benefits and pricing. I have started looking into another option, <a href="http://spideroak.com">SpiderOak</a>; odd name, interesting product.

SpiderOak provides 2GB of free storage and then has a volume-based pricing plan from their. They also have a web interface, backup/sync clients for Windows, Mac, and Linux, personal file sharing "rooms", and all of their storage is by volume not by computer; you can have 20 computers using the same account as long as you are within your storage limit.

Their pricing is simple, either $10/100GB/month, or $100/100GB/year, which for my 40GB calculation in the other posting would put me at either $120 or $100 per year for 40GB of storage across all computers. I dont even have 100GB of stuff to store right now.

Granted $100/year is a bit more than I really want to spend (though only slightly more than what I was looking at through Jungle Disk), but the multi-computer aspect and cross-platform support are very appealing.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>464</wp:post_id>
		<wp:post_date>2009-09-25 12:14:10</wp:post_date>
		<wp:post_date_gmt>2009-09-25 17:14:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>another-online-storage-option</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="storage"><![CDATA[Storage]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Christopher J. Stehno]]></wp:comment_author>
			<wp:comment_author_email>chris.stehno@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://ChrisStehno.info</wp:comment_author_url>
			<wp:comment_author_IP>24.238.212.63</wp:comment_author_IP>
			<wp:comment_date>2009-09-25 13:51:41</wp:comment_date>
			<wp:comment_date_gmt>2009-09-25 18:51:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hold the phone! I just tried to sign up for a year-long account with SpiderOak and was unable to make my payment. I decided to checkout their forum to see if others were having issues... and yes, it seems like SpiderOak may not be all that great after all. I am going to keep on looking.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>﻿Google Ajax APIs</title>
		<link>http://coffeaelectronica.com/blog/2009/09/%ef%bb%bfgoogle-ajax-apis/</link>
		<pubDate>Sat, 26 Sep 2009 12:18:35 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=468</guid>
		<description></description>
		<content:encoded><![CDATA[I came across the <a href="http://code.google.com/apis/ajaxlibs/">Google Hosted Ajax Libraries</a> recently and have since found them to be quite useful, especially in quick testing situations where you really don't want to have to setup a project. You can do everything in one nice text file.



To use the library you want, simply link to it using the external script source link:



<code lang="html">

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script>

</code>



Google has them hosted, minimized and cached so they are nice and fast. Pretty handy.



I mentioned this quickly in my post about <a href="http://coffeaelectronica.com/blog/2009/09/highlight-text-with-javascript/">Highlighting Text With JavaScript</a>, but I felt that it needed its own little post so that it doesn't get lost.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>468</wp:post_id>
		<wp:post_date>2009-09-26 07:18:35</wp:post_date>
		<wp:post_date_gmt>2009-09-26 12:18:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%ef%bb%bfgoogle-ajax-apis</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[Ajax]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="html"><![CDATA[HTML]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Herding Jackrabbits</title>
		<link>http://coffeaelectronica.com/blog/2009/10/herding-jackrabbits/</link>
		<pubDate>Sat, 10 Oct 2009 19:22:07 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=487</guid>
		<description></description>
		<content:encoded><![CDATA[I have been playing with <a href="http://jackrabbit.apache.org">Jackrabbit</a>, Apache's Java Content Repository (JCR 1.0) (see also <a href="http://jcp.org/en/jsr/detail?id=170">JSR-170</a>) implementation. So far, the JCR is a very interesting and seemingly under-utilized API, but I for the purpose of this discussion I am going to assume that you already have a bare minimum of understanding of Jackrabbit and the JCR. The documentation is a little thin in some parts so I decided to share some of my experimentation with NodeType registry and SQL searching of Nodes.

The registration of custom NodeTypes is apparently not part of the 1.0 spec, since the only implementation for registering custom node types seems to be in a Jackrabbit-specific class, though it does have a note about changes in JCR 2.0 moving the functionality into the core interface, which is nice. The basic code needed to load and register node types is as follows:

<code lang="java">
final NodeTypeManagerImpl manager = (NodeTypeManagerImpl)session.getWorkspace().getNodeTypeManager();
manager.registerNodeTypes(new FileInputStream(cndFile), NodeTypeManagerImpl.TEXT_X_JCR_CND, true);
</code>

The <tt>registerNodeTypes(...)</tt> boolean parameter being true forces a reload of the node types even if they have already been installed. You will notice that the node types are contained in a separate "cnd" file (see <a href="http://jackrabbit.apache.org/node-type-notation.html">Node Type Definition</a>). The file I used for my test was as follows:

<code>
<baggage = 'http://baggage.sourceforge.net/baggage'>

[baggage:Note]

> nt:base

- baggage:text (string) = ''

primary

mandatory autocreated

version
</code>

I am not sure at this point whether or not this is a grammar that they created themselves or if it is some external standard. It seems a bit clunky, but it gets the job done. Basically I am creating a namespace called "baggage" and adding a new node type to it called "baggage:Note" which will have one auto-created required property called "baggage:text".

It seems from some other tests I have done that you really need your own node types if you are going to do any querying of your content. You can use the default types but it could get really cluttered and cause your searches to slow down (Note: it uses Lucene internally for indexing and searching).

Once the new node types have been registered we can use them simply by creating nodes with them:

<code lang="java">
final Node root = session.getRootNode();
final Node notesRoot = root.addNode("notes-root");

final Node node1 = notesRoot.addNode("Something Interesting","baggage:Note");
node1.setProperty("baggage:text","This is some note that I would write.");

final Node node2 = notesRoot.addNode("Another Note","baggage:Note");
node2.setProperty("baggage:text","More really cool text content.");
</code>

which creates a "notes-root" node off of the main root node and then adds some "baggage:Note" nodes to it.

Once you have a few nodes with content it might be nice to search through them. The JCR gives you a fairly straight-forward query functionality using either XPath or SQL. I chose SQL for my test. Let's find all the "baggage:Note" nodes that contain the text 'cool'. The following code shows how this is done:

<code lang="java">
final QueryManager queryManager = session.getWorkspace().getQueryManager();

final String sql = "select * from baggage:Note where contains(baggage:text,'cool')";
final Query xq = queryManager.createQuery(sql, Query.SQL);
final QueryResult result = xq.execute();

final RowIterator rows = result.getRows();
log.info("Found: " + rows.getSize());
while(rows.hasNext()){
    final Row row = rows.nextRow();
    for(final String col : result.getColumnNames()){
        log.info(col + " = " + row.getValue(col).getString());
    }
    log.info("---");
}
</code>

Using my sample nodes, it will find one matching node and send the following output to the log appender:

<pre>
556  [main] INFO  net.sourceforge.baggage.jcrex.JcrExp2  - Found: 1
560  [main] INFO  net.sourceforge.baggage.jcrex.JcrExp2  - baggage:text = More really cool text content.
560  [main] INFO  net.sourceforge.baggage.jcrex.JcrExp2  - jcr:primaryType = baggage:Note
563  [main] INFO  net.sourceforge.baggage.jcrex.JcrExp2  - jcr:path = /notes-root/Another Note
564  [main] INFO  net.sourceforge.baggage.jcrex.JcrExp2  - jcr:score = 5035
564  [main] INFO  net.sourceforge.baggage.jcrex.JcrExp2  - ---
</pre>

The code for the whole test class is shown below:

<code lang="java">
public class JcrExp2 {

    private static final Logger log = LoggerFactory.getLogger(JcrExp2.class);

    public static void main(final String[] args) throws Exception {
        final Repository repository = new TransientRepository();
        final Session session = repository.login(new SimpleCredentials("username", "password".toCharArray()));

        final String cndFile = "baggage.cnd";

        final NodeTypeManagerImpl manager = (NodeTypeManagerImpl)session.getWorkspace().getNodeTypeManager();
        manager.registerNodeTypes(new FileInputStream(cndFile), NodeTypeManagerImpl.TEXT_X_JCR_CND, true);
        log.info("Registered Node types");

        try {
            final Node root = session.getRootNode();

            final Node notesRoot = root.addNode("notes-root");
            log.info("Added NotesRoot: " + notesRoot);

            final Node node1 = notesRoot.addNode("Something Interesting","baggage:Note");
            node1.setProperty("baggage:text","This is some note that I would write.");

            final Node node2 = notesRoot.addNode("Another Note","baggage:Note");
            node2.setProperty("baggage:text","More really cool text content.");

            session.save();

            // query

            final QueryManager queryManager = session.getWorkspace().getQueryManager();

            //          final String sql = "select * from baggage:Note";
            final String sql = "select * from baggage:Note where contains(baggage:text,'cool')";
            final Query xq = queryManager.createQuery(sql, Query.SQL);
            final QueryResult result = xq.execute();

            final RowIterator rows = result.getRows();
            log.info("Found: " + rows.getSize());
            while(rows.hasNext()){
                final Row row = rows.nextRow();
                for(final String col : result.getColumnNames()){
                    log.info(col + " = " + row.getValue(col).getString());
                }
                log.info("---");
            }

            // cleanup

            notesRoot.remove();
            session.save();

        } catch(final Exception e){
            log.error("Something bad has happened! " + e.getMessage(),e);

        } finally {
            session.logout();
        }
    }
}
</code>

You will need the JCR 1.0 jar as well as the jackrabbit 1.6 jar, both of which can be downloaded from the Jackrabbit downloads page.

The JCR seems pretty useful and flexible. I am surprised that it is not used more than it seems to be.




]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>487</wp:post_id>
		<wp:post_date>2009-10-10 14:22:07</wp:post_date>
		<wp:post_date_gmt>2009-10-10 19:22:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>herding-jackrabbits</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="jackrabbit"><![CDATA[Jackrabbit]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jcr"><![CDATA[JCR]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spring Multifile Uploading Bug: Fixed</title>
		<link>http://coffeaelectronica.com/blog/2009/10/spring-multifile-uploading-bug-fixed/</link>
		<pubDate>Thu, 15 Oct 2009 22:26:49 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=513</guid>
		<description></description>
		<content:encoded><![CDATA[Well, they beat me to it; the <a href="http://coffeaelectronica.com/blog/2008/02/spring-multipart-issue/">Spring Multipart Issue</a> has been fixed as of Spring 3.0-RC1. I am happy to see that though a little bummed because I was looking forward to fixing it and submitting a patch. Nice work, to whoever fixed it!

I wrote a general posting about how to do file uploads with the new spring annotations (see <a href="http://coffeaelectronica.com/blog/2009/06/spring-multipart-support-with-annotations/">Spring Multipart Support With Annotations</a>) so now, with the new multi-file support you can have more than one input file with the same form input name.

The input form becomes

<code lang="html">
<form action="upload.do" method="post" enctype="multipart/form-data">
    <div>File 1: <input type="file" name="files" /></div>
    <div>File 2: <input type="file" name="files" /></div>
    <input type="submit" />
</form>
</code>

to provide two files with the same form field name. 

The controller code does not really change much, other than the fact that the multi-file support does not seem to extend to the <tt>@RequestParam()</tt> annotation support by default, so I had to use a different method signature.

<code lang="java">
@Controller
@RequestMapping("/upload.do")
public class MultifileUpload {

	@RequestMapping(method=RequestMethod.POST)
	public ModelAndView upload(final MultipartHttpServletRequest request){
		final ModelAndView mav = new ModelAndView("done");

		final List<MultipartFile> multipartFiles = request.getFiles("files");

		// do stuff with the file
		System.out.println("found " + multipartFiles.size() + " files");

		return mav;
	}
}
</code>

It's nice to see that this bug got fixed, and they seem to have dropped the provided support for other upload APIs, though you could still write your own implementation as needed.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>513</wp:post_id>
		<wp:post_date>2009-10-15 17:26:49</wp:post_date>
		<wp:post_date_gmt>2009-10-15 22:26:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spring-multifile-uploading-bug-fixed</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="multipart"><![CDATA[Multipart]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Learning Java</title>
		<link>http://coffeaelectronica.com/blog/2009/10/learning-java/</link>
		<pubDate>Fri, 16 Oct 2009 19:12:09 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=516</guid>
		<description></description>
		<content:encoded><![CDATA[I recently had another request for help on how to start learning Java. It's been a while since I wrote my last suggestions about where to start (<a href="http://coffeaelectronica.com/blog/2004/05/so-you-want-to-learn-java/">So, You Wanna Learn Java?</a>), so I decided to update things a bit, at least from a link stand point.

Download Java 5 or 6 at Sun's <a href="http://java.sun.com/javase/reference/api.jsp">Java SE</a> page.

I would recommend working through some of the tutorials and/or books before signing up for any paid classes.

Some of the Sun tutorials are a good starting point:
<ul>
    <li><a href="http://java.sun.com/docs/books/tutorial/index.html">The Java Tutorials</a></li>
    <li><a href="http://java.sun.com/developer/onlineTraining/Programming/BasicJava1/">Essentials of the Java Language I</a></li>
    <li><a href="http://java.sun.com/developer/onlineTraining/Programming/BasicJava2/">Essentials of the Java Language II</a></li>
</ul>

Also, there are some good books out there:
<ul>
    <li><a href="http://www.amazon.com/gp/product/0596008732?ie=UTF8&tag=coffeael-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0596008732">Learning Java</a><img src="http://www.assoc-amazon.com/e/ir?t=coffeael-20&l=as2&o=1&a=0596008732" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
    <li><a href="http://www.amazon.com/gp/product/0596009208?ie=UTF8&tag=coffeael-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0596009208">Head First Java, 2nd Edition</a><img src="http://www.assoc-amazon.com/e/ir?t=coffeael-20&l=as2&o=1&a=0596009208" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
    <li><a href="http://www.amazon.com/gp/product/0672329433?ie=UTF8&tag=coffeael-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=0672329433">Sams Teach Yourself Java 6 in 21 Days (5th Edition)</a><img src="http://www.assoc-amazon.com/e/ir?t=coffeael-20&l=as2&o=1&a=0672329433" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></li>
</ul>

You might want to check out a good used book store for these before you buy them too... some of them are older. Or, you could always start out with an older edition (though nothing older than Java 1.5 a.k.a Java 5).

Happy learning.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>516</wp:post_id>
		<wp:post_date>2009-10-16 14:12:09</wp:post_date>
		<wp:post_date_gmt>2009-10-16 19:12:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>learning-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IntelliJ Community Edition</title>
		<link>http://coffeaelectronica.com/blog/2009/10/intellij-community-edition/</link>
		<pubDate>Sat, 17 Oct 2009 17:39:34 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=519</guid>
		<description></description>
		<content:encoded><![CDATA[The big IDE news recently was that the often touted <a href="http://jetbrains.com">IntelliJ</a> now has an OpenSource <a href="http://www.jetbrains.com/idea/nextversion/free_java_ide.html">Community Edition</a>... and that has all it's rabid fans predicting the total downfall of <a href="http://eclipse.org">Eclipse</a> and <a href="http://netbeans.org">NetBeans</a>. Uh... did anybody actually <em>look</em> at what they offer in the free edition? If you look at their <a href="http://www.jetbrains.com/idea/nextversion/editions_comparison_matrix.html">feature comparison chart</a>, you can see that for free you can get a glorified text editor... way to go!

Proponents of IntelliJ always complain about how you have to install a lot of plug-ins with Eclipse and NetBeans in order to match the built-in features of their IDE. Well, now with the Community Edition you not only don't get that functionality, but you can't even add it with plug-ins. Bravo! It reminds me a little of Visual Studio and their Educational Edition with most of the really necessary features disabled until you shell out the cash.





]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>519</wp:post_id>
		<wp:post_date>2009-10-17 12:39:34</wp:post_date>
		<wp:post_date_gmt>2009-10-17 17:39:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>intellij-community-edition</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ide"><![CDATA[IDE]]></category>
		<category domain="post_tag" nicename="intellij"><![CDATA[IntelliJ]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<category domain="post_tag" nicename="wtf"><![CDATA[WTF]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Squeezing in Clojure</title>
		<link>http://coffeaelectronica.com/blog/2009/10/squeezing-in-clojure/</link>
		<pubDate>Tue, 20 Oct 2009 17:18:52 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=522</guid>
		<description></description>
		<content:encoded><![CDATA[I had originally decided to make <a href="http://www.scala-lang.org/">Scala</a> my Language of the year for 2009, but other things came to the forefront that kept me on other tasks, both personal and development-related so I have decided to try and squeeze in <a href="http://clojure.org">Clojure</a> before the year ends. A little light reading over lunch.

Clojure is pretty interesting so far. I found this example very interesting (from <a href="http://pragprog.com/titles/shcloj/programming-clojure">Programming Clojure by Stuart Halloway</a>)

<code lang="java">
public class StringUtils {
    public static boolean isBlank(String str) {
        int strLen;
        if (str == null || (strLen = str.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if ((Character.isWhitespace(str.charAt(i)) == false)) {
                return false;
            }
        }
        return true;
    }
}</code>

The <tt>isBlank()</tt> method checks to see whether a string is blank: either empty or consisting of only whitespace. Here is a similar implementation in Clojure:

<code>(defn blank? [s] (every? #(Character/isWhitespace %) s))</code>

if you know me, you know I like nice tight code... so this makes me happy. 

I also decided that since I have spent some time on the Android platform this year, which is very standard, though limited, Java, I figured it would be a nice bit of mental exercise to learn something so completely different. Clojure is a LISP style functional language, which as can be seen from the example above, is a bit of a stretch from Java. The nice thing to note is that Clojure is a JVM-language so it runs on the standard JVM and has access to any/all Java APIs.

I have noticed that I tend to favor JVM-based languages more than others... I guess I like to learn something new without straying too far from the power and flexability that I already have avaiable. I like to keep things practical so that if/when the need arises to use one of the alternate languages that I know, I will be functional with it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>522</wp:post_id>
		<wp:post_date>2009-10-20 12:18:52</wp:post_date>
		<wp:post_date_gmt>2009-10-20 17:18:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>squeezing-in-clojure</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Finding Duplicate Ints: Clojure</title>
		<link>http://coffeaelectronica.com/blog/2009/10/finding-duplicate-ints-clojure/</link>
		<pubDate>Fri, 23 Oct 2009 11:13:59 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=526</guid>
		<description></description>
		<content:encoded><![CDATA[Finding Duplicate Ints: Clojure

I return to my common interview question (see <a href="http://coffeaelectronica.com/blog/2008/02/interview-question-find-2-matching-ints/">Interview Question: Find 2 Matching Ints</a>) with a solution based on <a href="http://clojure.org">Clojure</a>.

I worked on the solution to this problem in a few steps, which I will share. First, I assumed that the list of numbers has been sorted:

<code>
(defn find-dupint [intseq]
    (loop [result nil its intseq]
        (if (= result (peek its))
            result
            (recur (peek its) (pop its))
        )
    )
)
</code>

This function simmply iterates over the list of numbers and returns the first number whose value matches the next number in the sequence. This code will fail if the numers are not in order and the problem definition says that they can be in any order, so I worked up the following code to sort the numbers before looping through them:

<code>
(defn find-dupint [intseq]
	(let [sorint (sort intseq)]
        (loop [result nil its sorint]
            (if (= result (first its))
                result
                (recur (first its) (rest its))
            )
        )
    )
)
</code>

Notice that I changed <tt>(peek coll)</tt> and <tt>(pop coll)</tt> to <tt>(first coll)</tt> and <tt>(rest coll)</tt>, which work on sequences rather than stacks. I kept getting a <tt>ClassCastException</tt> the other way.

Now all that's left is to have an exception thrown when no duplicated number is found. The function as written returns a <tt>nil</tt>, which is ok for Clojure I guess but not really the same behavior as the other versions of this code as it is defined, so I dipped into the Java interoperability features to add some exception throwing for the finished product:

<code>
(defn find-dupint [intseq]
	(let [sorint (sort intseq)]
        (loop [result nil its sorint]
            (if (= result (first its))
                (if (nil? result)
                    (throw (new IllegalArgumentException "No duplicate found!"))
                    result
                )
                (recur (first its) (rest its))
            )
        )
  )
)
</code>

Note: the <tt>IllegalArgumentException</tt> does not need to be fully qualified because the <tt>java.lang</tt> package is imported by default, just as it is in Java.

The output from using this function is shown below:

<pre>
1:1 user=> (find-dupint [1 2 3])
java.lang.IllegalArgumentException: No duplicate found! (repl-1:1)

1:2 user=> (find-dupint [1 2 3 2])
2
</pre>

An intesting side-effect of this version is that you are not constrained to use ints, or even numbers for that matter. You could actually use any <tt>Comparable</tt> object. (It would not be that difficult to add the ability to really generalize the function by passing in a comparator)

A few other comparable objects are tested below:

<pre>
1:1 user=> (find-dupint ["a" "c" "b" "a"])
"a"

1:2 user=> (find-dupint [1.1 1.4 1.3 1.22 1.1])
1.1
</pre>

I guess I should rename the function "find-dup" to reflect the broader scope than just integers.

At this point, reviewing the code, it's not all that less verbose than the Java version, but it gets the job done. I will have to come back to this problem again as I get more experience with Clojure... I am willing to bet there is a more concise way to achieve the same results.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>526</wp:post_id>
		<wp:post_date>2009-10-23 06:13:59</wp:post_date>
		<wp:post_date_gmt>2009-10-23 11:13:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>finding-duplicate-ints-clojure</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Versioning with Jackrabbit (JCR)</title>
		<link>http://coffeaelectronica.com/blog/2009/10/versioning-with-jackrabbit-jcr/</link>
		<pubDate>Thu, 29 Oct 2009 00:37:38 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=555</guid>
		<description></description>
		<content:encoded><![CDATA[With my recent exploration into <a href="http://jackrabbit.apache.org">Jackrabbit</a>, the JCR implementation, I figured out the basics of how to use its versioning functionality and decided I should do a little post about it so that I don't lose the code somewhere in the shuffle that is my project-space.

I'm going to start out by dumping out the code for my little test runner:

<code lang="java">
public class JcrVersioning {

    private static final Logger log = LoggerFactory.getLogger(JcrVersioning.class);

    public static void main(final String[] args) throws Exception {
        final Repository repository = new TransientRepository();
        final Session session = repository.login(new SimpleCredentials("username", "password".toCharArray()));

        try {
            final Node root = session.getRootNode();

            // Store content
            final Node textNode = root.addNode("mynode");

            final Node noteNode = textNode.addNode("alpha");
            noteNode.addMixin("mix:versionable");
            noteNode.setProperty("content", "I like jackrabbit");

            session.save();
            noteNode.checkin();

            // Retrieve content
            final Node node = root.getNode("mynode/alpha");
            log.info("Path: " + node.getPath() + " --> " + node.getProperty("content").getString());

            noteNode.checkout();
            noteNode.setProperty("content","Jackrabbit is cool");

            session.save();
            noteNode.checkin();

            log.info("After Modification: " + noteNode.getPath() + " --> " + noteNode.getProperty("content").getString());

            ////
            final VersionHistory vh = noteNode.getVersionHistory();
            final VersionIterator vi = vh.getAllVersions();

            vi.skip(1);
            while (vi.hasNext()) {
                final Version v = vi.nextVersion();
                final NodeIterator ni = v.getNodes();

                while (ni.hasNext()) {
                    final Node nv = ni.nextNode();
                    log.info(" - Found version: " + v.getCreated().getTime() + " --> " + nv.getProperty("content").getString());
                }
            }

            noteNode.checkout();

            final VersionHistory versionHistory = noteNode.getVersionHistory();
            final VersionIterator versionIterator = versionHistory.getAllVersions();

            versionIterator.skip(versionIterator.getSize()-2);

            noteNode.restore(versionIterator.nextVersion(), true);
            noteNode.checkin();

            log.info("After Restore: " + noteNode.getPath() + " --> " + noteNode.getProperty("content").getString());

            // Remove content
            root.getNode("mynode").remove();
            session.save();

        } finally {
            session.logout();
        }
    }
}
</code>

which creates a couple nodes, one of which has content. The content is set, modified and then restored to it's initial revision using the JCR versioning functionality. The enabler for versioning the the <tt>mix:versionable</tt> mixin set on the versionable node. Once that is set you need to be cautious of how your <tt>save()</tt> and <tt>checkout()</tt> and <tt>checkin()</tt> calls interact.

When you run this example you will get something like:

<pre>
INFO  JcrVersioning  - Path: /mynode/alpha --> I like jackrabbit
INFO  JcrVersioning  - After Modification: /mynode/alpha --> Jackrabbit is cool
INFO  JcrVersioning  -  - Found version: Wed Oct 28 19:26:59 CDT 2009 --> I like jackrabbit
INFO  JcrVersioning  -  - Found version: Wed Oct 28 19:26:59 CDT 2009 --> Jackrabbit is cool
INFO  JcrVersioning  - After Restore: /mynode/alpha --> I like jackrabbit
</pre>

Like I said this is really just a storage are for some sample code I came up with... it is what it is. Hopefully it can help if you are stuck with JCR versioning.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>555</wp:post_id>
		<wp:post_date>2009-10-28 19:37:38</wp:post_date>
		<wp:post_date_gmt>2009-10-29 00:37:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>versioning-with-jackrabbit-jcr</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="jackrabbit"><![CDATA[Jackrabbit]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jcr"><![CDATA[JCR]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Find Matching Ints with JavaScript</title>
		<link>http://coffeaelectronica.com/blog/2009/10/find-matching-ints-with-javascript/</link>
		<pubDate>Fri, 30 Oct 2009 23:27:43 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=560</guid>
		<description></description>
		<content:encoded><![CDATA[I realized that I had yet to come up with a JavaScript solution for my duplicate ints interview question, (see <a href="http://coffeaelectronica.com/blog/2008/02/interview-question-find-2-matching-ints/">Interview Question: Find 2 Matching Ints</a>) so I decide a quick implementation would be fun.

<code lang="html">
<html>
    <head>
        <script type="text/javascript">
            function findDup(items){
                items.sort();
                for( var i=0; i<items.length-1; i++){
                    if( items[i] == items[i+1] ) return items[i];
                }
                throw "No duplicate values!";
            }
        </script>
    </head>
    <body onload="alert( findDup( new Array( 6, 9, 2, 5, 1, 6) ) )">
    </body>
</html>
</code>

There is not much to it, and nothing really exciting. I also worked up quick versions using <a href="http://prototypejs.org">Prototype</a> and <a href="http://jquery.com">JQuery</a>; however, neither one really provided any useful deviation from the standard JavaScript approach.]]></content:encoded>
		<excerpt:encoded><![CDATA[I realized that I had yet to come up with a JavaScript solution for my duplicate ints interview question, (see <a href="http://coffeaelectronica.com/blog/2008/02/interview-question-find-2-matching-ints/">Interview Question: Find 2 Matching Ints</a>) so I decide a quick implementation would be fun.]]></excerpt:encoded>
		<wp:post_id>560</wp:post_id>
		<wp:post_date>2009-10-30 18:27:43</wp:post_date>
		<wp:post_date_gmt>2009-10-30 23:27:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>find-matching-ints-with-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Accessing Ajax Response Headers</title>
		<link>http://coffeaelectronica.com/blog/2009/11/accessing-ajax-response-headers/</link>
		<pubDate>Tue, 03 Nov 2009 23:40:58 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=563</guid>
		<description></description>
		<content:encoded><![CDATA[One way to handle error responses with Ajax requests is to add an HTTP Response Header to the response, denoting the resulting command status, while still returning content or data related to the error in the response. Generally when using Ajax calls you don't want a raw exception or server error to bubble up to your JavaScript handlers.

Let's say we have a simple quote service at "blurb.jsp":

<code lang="html">
<%@page import="java.util.Random"%>
<%!
	private static final Random rng = new Random();
	private static final String[] quotes = {
		"I regret that I have but one life to live for my country.",
		"To be or not to be, that is the question...",
		"I drank what?",
		"I am what I am and that's all I am"
	};
%>
<%
	try {
        // WARNING: intentional random error below
		final String quote = quotes[rng.nextInt(quotes.length+1)];
		
		response.setContentType("text/plain");
		response.setHeader("X-Status","OK");
		out.write(quote);
		
	} catch(Exception e){
		response.setHeader("X-Status","ERR");
		out.write("Something bad has happened: " + e.getMessage());
	} finally {
		out.close();
	}
%>
</code>

All this does is setup some simple quote strings and randomly provide one of them as a text response. I have added an error condition by allowing the random number generated to exceed the maximum index of the array so that we can get a random error response. In both cases, success or failure, the response header "X-Status" is given a value of "OK" or "ERR" respectively to denote the type of response being sent.

Handling this response with <a href="http://prototypejs.com">Prototype</a> is pretty simple:

<code lang="html">
<html> 
    <head> 
        <script type="text/javascript" 
            src="http://ajax.googleapis.com/ajax/libs/prototype/1.6.1.0/prototype.js"></script>
        <script type="text/javascript">
            Event.observe(window,'load',function(){
                $('quote').observe('click',handleClick);
            });
            
            function handleClick(evt){
				new Ajax.Request('blurb.jsp', {
					onSuccess: function(response) {
						var quoteElt = $('quote');
						if( 'ERR' == response.getHeader('X-G-Status') ){
							quoteElt.setStyle({color:'red'});
						} else {
							quoteElt.setStyle({color:'black'});
						}
						quoteElt.update(response.responseText);
					}
				});
            }
        </script>
    </head>
    <body>
    
        <blockquote id="quote" style="border:1px dashed green;padding:4px;">Click me for a quote...</blockquote>
    
    </body>
</html>
</code>

Basically, in your "onSuccess" handler function you just pull the header value out of the response object. You could conceivably do any kind of response handling you wanted for an "error" response. In the little demo, you will get a quote from the server each time you click on the quote box; successful quotes will be black, while errors will be in red text.

For the heck of it, I decided to try the same thing in <a href="http://jquery.com">JQuery</a> (without making a whole separate post about it). I am just including the script sections, since they are the only difference:

<code lang="html">
<script type="text/javascript" 
    src="http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js"></script>
<script type="text/javascript">
    jQuery(function(){
        $('#quote').bind('click',handleClick);
    });
    
    function handleClick(evt){
        var jqr = jQuery.get(
            'blurb.jsp', 
            function(text){
                var quoteElt = $('#quote');
                if( 'ERR' == jqr.getResponseHeader('X-Status') ){
                    quoteElt.css('color','red');
                } else {
                    quoteElt.css('color','black');
                }
                quoteElt.html(text);
            },
            'text'
        );
    }
</script>
</code>

Surprisingly enough, this was a bit more difficult (or convoluted) to do with JQuery since JQuery does not seem to provide any wrapper access to the response itself. You have to use the XMLHTTPRequest object, which works fine but as you can see in the Ajax callback it leads to some interesting code; the <tt>jqr</tt> varible contains the request object and is used inside the callback function. It just feels a lot less clean. 

Maybe I am not clear on how to use the JQuery Ajax support yet and I am missing something simple... or the developers of JQuery decided that since the times you actually need the response object itself are pretty limited, they could get away without providing direct access. Ultimately though, the support is there and that's what's really important.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>563</wp:post_id>
		<wp:post_date>2009-11-03 17:40:58</wp:post_date>
		<wp:post_date_gmt>2009-11-03 23:40:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>accessing-ajax-response-headers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ajax"><![CDATA[Ajax]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[JQuery]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="prototype"><![CDATA[Prototype]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Development Environment</title>
		<link>http://coffeaelectronica.com/blog/2009/11/development-environment/</link>
		<pubDate>Sat, 14 Nov 2009 00:00:25 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=569</guid>
		<description></description>
		<content:encoded><![CDATA[One of the tasks I have been given at work is to help modernize the "old school" organization and implement more standardized Java development practices; it has gotten me thinking a lot about what makes a good development procedure/environment.

The list I came up with, should be very familiar to most developers, and though they are most often considered part of "agile" development, they are in my opinion, just good development practices that go beyond any specific development methodology:

<ul>
    <li>Coding to interfaces</li>
    <li>Unit testing</li>
    <li>Decoupled tools</li>
    <li>Automated build (with command line ability)</li>
    <li>Good source control</li>
    <li>Continuous integration</li>
    <li>Good bug tracking</li>
</ul>

<strong>Coding to Interfaces</strong>

Write your services and DAOs based on interfaces rather than concrete classes. This allows you to test code in a more decoupled manner and allows you greater implementation flexability. It also makes team development more manageable, since you can agree on some interfaces early on in the project and then code to them separately withough the need to wait for the missing pieces.

<strong>Unit Testing</strong>

Again... how do you know that your code works without proof. Unit testing in some automated, reproducable format is crucial to providing confidence that your code does what it is supposed to do. Into this category I also throw code coverage, which gives you some clues as to how thoroughly you have tested your code.

<strong>Decoupled Tools</strong>

Your tools should work for you, not against you. Your IDEs, servers, build tools, etc should not be tied together in any way. Developers should be able to use whatever IDE/tools (other than servers) that they are familiar with.

<strong>Automated Build</strong>

Your project(s) should be buildable from the command line in a repeatable manner with little effort. Tools like <a href="http://ant.apache.org">Ant</a> and <a href="http://maven.apache.org">Maven</a> provide rich environments for build production, while still allowing good integration with most IDEs. This goes along somewhat with the previous point about decoupled tools. There is no reason why a developer should not be able to easity edit a file with a plain text editor, run the tests and produce build from the command line with no less confidence than working in a full-featured IDE.

<strong>Source Control</strong>

Whether it's a personal project, a prototype, or a project for work, it should have some sort of good source control setup for it. There are tons of free options (<a href="http://gitscm.org/">git</a>, <a href="http://subversion.tigris.org/">svn</a>, <a href="http://bazaar-vcs.org/en/">bazar</a>, <a href="http://mercurial.selenic.com/">mercurial</a>, cvs) and even some good commercial options (<a href="http://perforce.com">perforce</a>), each with varrying levels of IDE integration and ease of use. A good source control system should provide good IDE integration as well as good command line usability.

<strong>Continuous Integration</strong>

If you have more than one person committing code to a project you will need a continuous integration server (<a href="http://cruisecontrol.sourceforge.net/">CruiseControl</a>, <a href="http://hudson-ci.org/">Hudson</a>, <a href="http://continuum.apache.org/">Continuum</a>) setup to do automated builds at least once a day. Having a build kicked off after a checkin is made is also very helpful.

CI builds provide an addition level of assurance that the project compiles and is testable on something other than the developers machine. It also provides help with larger teams in keeping the repository clean from bad code commits. A failing build becomes a red flag that should be fixed right away.

<strong>Bug Tracking</strong>

A good means of logging and managing bug tickets is very important to keeping track of what has been done as well as what needs to be done. Don't use an in-house spreadsheed, access database or some other bogus bug tracker. Intall one of the many free options (<a href="http://www.bugzilla.org/">bugzilla</a>, <a href="http://trac.edgewall.org/">trac</a>, redmine, <a href="http://www.mantisbt.org/">mantis</a>) or one of the commercial options (fogbugz). A good tracker should provide a number of access points so that developer tools can also integrate with the tracker and provide a more rich interaction experience.

I am sure that most of this is nothing new, but I wanted to get it all down in one place for future reference. Let me know if I have missed or over/under-stated anything.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>569</wp:post_id>
		<wp:post_date>2009-11-13 18:00:25</wp:post_date>
		<wp:post_date_gmt>2009-11-14 00:00:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>development-environment</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ubuntu for the Noncomittal</title>
		<link>http://coffeaelectronica.com/blog/2009/11/ubuntu-for-the-noncomittal/</link>
		<pubDate>Sat, 14 Nov 2009 21:02:25 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=572</guid>
		<description></description>
		<content:encoded><![CDATA[Some people are reluctant to do a full conversion from the familiarity and comfort of a Windows OS to the unknown environment that is Linux. Fear not, there are a couple ways you can give it a try with very little commitment.

The first thing you will need to do in each option is to download the <a href="http://ubuntu.com">Ubuntu</a> <dfn title="CD image file">ISO</dfn> file for your specific hardware (generally 32-bit desktop version). I choose Ubuntu because it is very easy to use and very well supported, and of course its free.

<strong>1. Virtual Machine</strong>

Using <a href="http://www.virtualbox.org">VirtualBox</a> (free) from Sun Microsystems, you can setup a virtual computer that runs on your current Windows OS. Basically VirtualBox runs as an appliation that "hosts" another operating system.

Once you have VirtualBox installed you can create a virtual machine using the Ubuntu ISO file to "install" the OS.

<strong>2. Wubi Dual Boot</strong>

Another low-impact means of trying out linux is to use the <a href="http://wubi-installer.org">Wubi Installer</a> which will install Ubuntu on your windows machine, creating a dual boot so that you can select which OS to enter when you start up your computer. The benefit of wubi is that if/when you no longer want ubuntu around (or if you break it) you can just go into windows and uninstall wubi just like uninstalling any other software. (I fibbed a little at the start of this posting, you don't actually need the ISO for this installation method).

<strong>3. Extra Computer</strong>

The third option assumes that you have an older (though still somewhat modern) computer laying around unused. You will need to take the ISO file and burn it to a CD, I recommend using using <a href="http://imgburn.com">ImgBurn</a>. Once that is done boot up the target computer and be sure that the BIOS is set to boot from the CD. It should start up with some Ubuntu options; you can either take the plunge and install it, or you can play around with the liveCD version for a bit first.

Installing Ubuntu is very friendly and generally better and faster than
installing a windows os.

<strong>Disclaimer</strong>

I am only providing the top-level pieces of how to do these installations; you should still read any and all relevant documentation before getting into this, especially if you are doing this on your only computer. Generally, these installation methods are very safe, but you can still cause damage if you do something stupid (you do still have full access to your host OS in the first two options, so you could conceivably delete your windows OS files if, for example). I take no ownership or responsability for any harm caused by these installations.

Now go have some fun.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>572</wp:post_id>
		<wp:post_date>2009-11-14 15:02:25</wp:post_date>
		<wp:post_date_gmt>2009-11-14 21:02:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ubuntu-for-the-noncomittal</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[Ubuntu]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Andreview</title>
		<link>http://coffeaelectronica.com/blog/2009/11/andreview/</link>
		<pubDate>Sun, 15 Nov 2009 18:04:25 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=575</guid>
		<description></description>
		<content:encoded><![CDATA[I am going to start doing more formal reviews of the Android apps that I use or have tested. I will describe each app and delve into its benefits and drawbacks based on three main criteria: usability, functionality and stability which will each be given a rating of 1 to 5. At the end of the rewiew I will summarize with an average score as well as an overall rating for the app; the overall rating will be based on the average of the other three scores with a bump up or down (+/-1) based on my overall feeling of the app. This overall score gives me a little leeway for times when the average may not really reflect the actual feeling of the app (for better or worse).

<dl>
    <dt>Usability</dt>
    <dd>The ease of use and how the user-needs are met in a simple straight-forward manner.</dd>
    
    <dt>Functionality</dt>
    <dd>Does the app do what you would expect for an app of its type?</dd>
    
    <dt>Stability</dt>
    <dd>How often does the app crash, if ever? How peppy is it?</dd>
</dl>

At the bottom of each review I will add a simple score card with additional information about the app. It will look basically like this:

    <div><a href="http://someappsite.com" title="http://someappsite.com">Some App</a> (price) - <span title="Usability"><b>U:</b>3</span>, <span title="Functionality"><b>F:</b>3</span>, <span title="Stability"><b>S:</b>3</span>, <span title="Overall"><b>O:</b>3</span></div>

If you have an app that you would like me to try out and review, please feel free to let me know.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>575</wp:post_id>
		<wp:post_date>2009-11-15 12:04:25</wp:post_date>
		<wp:post_date_gmt>2009-11-15 18:04:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>andreview</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="review"><![CDATA[Review]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Andreview: Astrid</title>
		<link>http://coffeaelectronica.com/blog/2009/11/andreview-astrid/</link>
		<pubDate>Tue, 17 Nov 2009 00:09:31 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=580</guid>
		<description></description>
		<content:encoded><![CDATA[I am going to start off a new series of postings called <a href="">Andreview</a> by reviewing <a href="http://weloveastrid.com/">Astrid</a>. Astrid is a simple task manager with priorities, tags, reminders, and alerts.

<strong>Usability (4)</strong>

Astrid is very easy to use. It has a simple straight-forward interface based on lists of tasks that can be filtered by tag or other criteria. It also provides calendar integration for scheduling tasks as well as easy task creation options.

<strong>Functionality (4)</strong>

Astrid is all about task management. It is generally responsive and does what you expect from a task manager. It will also sync up with your <a href="http://rememberthemilk.com">Remember The Milk</a> tasks, if you have an account. The only piece of functionality that I think would make Astrid better would be some sort of desktop or web-based client so that Astrid could better integrate with other systems. The RTM integration is nice, but an Astrid-specific application would be better.

<strong>Stability (4)</strong>

To my recollection after having used Astrid for a couple months now, I have never had it crash. It does currently have an annoying bug that is causing me problems right now, but I may join in with the effort to fix it (basically you can't get a view of all tasks from the widget).

<strong>Overall (4)</strong>

Overall I think Astrid is the best task-manager I have seen for the Android OS. It's clean, fast and simple. Also, baring the one bug I have run into, it's stable and responsive.

<div style="text-align:right"><a href="http://weloveastrid.com" title="http://weloveastrid.com">Astrid</a> (free) - <span title="Usability"><b>U:</b>4</span>, <span title="Functionality"><b>F:</b>4</span>, <span title="Stability"><b>S:</b>4</span>, <span title="Overall"><b>O:</b>4</span></div>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>580</wp:post_id>
		<wp:post_date>2009-11-16 18:09:31</wp:post_date>
		<wp:post_date_gmt>2009-11-17 00:09:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>andreview-astrid</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="review"><![CDATA[Review]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Clojure, in Closing</title>
		<link>http://coffeaelectronica.com/blog/2009/11/clojure-in-closing/</link>
		<pubDate>Tue, 17 Nov 2009 18:12:41 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=585</guid>
		<description></description>
		<content:encoded><![CDATA[After reading the book, "<a href="http://pragprog.com/titles/shcloj/programming-clojure">Programming Clojure</a>" by Stuart Halloway, I think that I have run out of parenthesis. All kidding aside, <a href="http://clojure.org">Clojure</a> seems like a very powerful and flexible language, if you can get a hand around it. The basic concepts are fairly straight-forward; however, as I got deeper into it I found it difficult to keep track of my location in the code and quickly lost sight of what was going on. I attribute this to a few things, one being the drastic syntactical difference between Clojure and other languages I have worked with (Java, Groovy, Ruby, Perl, etc), another is the functional programming aspect. The functional programming was tough to work around for me, having been "born" an object oriented imperative developer. I kept wanting to stuff things in variables. I would recommend Clojure to someone with more of a function programming or Lisp programming background, for whom it would be a great transition into the JVM.

I will keep an eye on it, and maybe come back to it later; however, I don't see it becoming one of my go-to languages, as it requires too much of a paradigm shift for me to be able to produce any code with it. If I needed to use it on a regular basis, I am sure that I would catch on and probably even come to enjoy it (there are a lot of great features in Clojure), but for now it will just be an educational diversion.

If you are a curly-brace developer and looking for a real change of scenery, give Clojure a try.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>585</wp:post_id>
		<wp:post_date>2009-11-17 12:12:41</wp:post_date>
		<wp:post_date_gmt>2009-11-17 18:12:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clojure-in-closing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Looking into PHP</title>
		<link>http://coffeaelectronica.com/blog/2009/11/looking-into-php/</link>
		<pubDate>Wed, 18 Nov 2009 12:34:21 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=588</guid>
		<description></description>
		<content:encoded><![CDATA[I have started to look into <a href="http://php.net">PHP</a> a bit. I have a general working-knowledge of it's language, which seems to be the point at which most "developers" start to call themselves PHP developers or programmers. I have nothing against PHP; however, I have seen a lot of good money spent on bad PHP code and coders that have no idea how to write good software. It's not the language, it's the coders. But, I digress.

So, trying not to join that group, I decided to find out what "best practices", unit testing functionality and other standards exist around PHP. I came across some helpful postings.

<ul>
	<li><a href="http://net.tutsplus.com/tutorials/php/30-php-best-practices-for-beginners/">30+ PHP Best Practices for Beginners</a></li>
	<li><a href="http://www.dagbladet.no/development/phpcodingstandard/">PHP Coding Standard</a></li>
	<li><a href="http://www.odi.ch/prog/design/php/guide.php">PHP Best Practices</a></li>
	<li><a href="http://www.phpvs.net/2008/06/04/ten-php-best-practices-tips-that-will-get-you-a-job/">Ten PHP Best Practices Tips that will get you a job</a></li>
	<li><a href="http://www.phpunit.de/">PhpUnit</a></li>
	<li><a href="http://www.simpletest.org/">SimpleTest</a></li>
</ul>

I am happy to see that there is unit testing support, and that is seems to be very standard xUnit-style; there even seems to be some support for mock objects.

There are quite a few web development frameworks for PHP, which is good; I will have to dig up a handful of them and see what they provide.

There is also decent IDE support, including an Eclipse plug-in (<a href="http://www.eclipse.org/pdt/">PDT</a>).

Not sure where I will go from here, maybe put together a working project to try things out in a few real-world situations.]]></content:encoded>
		<excerpt:encoded><![CDATA[I have started to look into <a href="http://php.net">PHP</a> a bit.]]></excerpt:encoded>
		<wp:post_id>588</wp:post_id>
		<wp:post_date>2009-11-18 06:34:21</wp:post_date>
		<wp:post_date_gmt>2009-11-18 12:34:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>looking-into-php</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[Php]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Finding Duplicate Ints: Python</title>
		<link>http://coffeaelectronica.com/blog/2009/11/finding-duplicate-ints-python/</link>
		<pubDate>Fri, 20 Nov 2009 01:14:11 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=592</guid>
		<description></description>
		<content:encoded><![CDATA[I decided to start playing around with <a href="http://python.org">Python</a> a bit and figured I should do what is becoming my personal tradition of implementing the <a href="http://coffeaelectronica.com/blog/2008/02/interview-question-find-2-matching-ints/">Duplicate Int Finding Problem</a> with Python.

It's actually a very interesting language and I am surprised that I have not really looked into it sooner. It has a rich set of built-in libraries and tons of extension modules.

The code I came up with is pretty straight-forward:

<code lang="python">
def find_dup_int(items):
    items.sort()
    for i in range(len(items)-1):
        if items[i] == items[i+1]:
            return items[i]
    raise RuntimeError('No duplicate values found!')
</code>

I need to find a handful of other more interesting problems to try when playing with other languages, since this one seems to look basically the same in each language I have tried.

I will have to spend a little more time with Python, it feels very useful, and as you can see, not very verbose (though not to a fault).]]></content:encoded>
		<excerpt:encoded><![CDATA[I decided to start playing around with <a href="http://python.org">Python</a> a bit and figured I should do what is becoming my personal tradition of implementing the <a href="http://coffeaelectronica.com/blog/2008/02/interview-question-find-2-matching-ints/">Duplicate Int Finding Problem</a> with Python.]]></excerpt:encoded>
		<wp:post_id>592</wp:post_id>
		<wp:post_date>2009-11-19 19:14:11</wp:post_date>
		<wp:post_date_gmt>2009-11-20 01:14:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>finding-duplicate-ints-python</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Converting Numbers to Ranges: Python</title>
		<link>http://coffeaelectronica.com/blog/2009/11/converting-numbers-to-ranges-python/</link>
		<pubDate>Sat, 21 Nov 2009 18:09:32 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=597</guid>
		<description></description>
		<content:encoded><![CDATA[I have decided to start doing little programming puzzle problems in various languages, since my duplicate int finding problem is getting old and repetitive. My first puzzle comes from a site called <a href="http://codegolf.com">Code Golf</a> and it is titled <a href="http://codegolf.com/home-on-the-range">Home on the Range</a>. I decided to start with <a href="http://python.org">Python</a> since it is something I have been playing with.

Basically the puzzle boils down to taking a series of numbers (in sequence) as input and producing a result where the numbers that are reduced to ranges where applicable, as below:

<pre>[1 2 3 6 9 10 11 15] becomes "1-3, 6, 9-11, 15."</pre>

After a couple iterations and a handful of language/api reference searches I came up with:

<code lang="python">
import sys
    
def convert_to_ranges(nums):
    ranges, holder = '',''
    num_count = len(nums)
    cap = endcap(num_count)

    for i in range(num_count):
        if i+1 < num_count and int(nums[i])+1 == int(nums[i+1]):
            if not holder: holder = nums[i]
        else:
            if holder:
                ranges += holder + '-' + nums[i] + cap(i)
                holder = ''
            else:
                ranges += nums[i] + cap(i)
    
    return ranges

def endcap(ln):
    return lambda idx: '.' if idx == ln-1 else ', '
    
print(convert_to_ranges(sys.argv[1:]))
</code>

I had originally had the <tt>holder</tt> variable as a list to hold each grouped number, but I realized that you really only need to store the first one so that you can use it to create the start of the grouping once you find the end of it. The lambda function (<tt>endcap()</tt>) was originally just a normal function, but I wanted to play with some interesting built-in features, and it actually worked out nicely. The python ternary operator is also interesting ( VAL if CONDITION else OTHERVAL ); it reads better than other ternary operators.

The <tt>int()</tt> calls I make in the function are simply there because the input comes from the standard in, where they are strings.


]]></content:encoded>
		<excerpt:encoded><![CDATA[I have decided to start doing little programming puzzle problems in various languages, since my duplicate int finding problem is getting old and repetitive. My first puzzle comes from a site called <a href="http://codegolf.com">Code Golf</a> and it is titled <a href="http://codegolf.com/home-on-the-range">Home on the Range</a>. I decided to start with <a href="http://python.org">Python</a> since it is something I have been playing with.]]></excerpt:encoded>
		<wp:post_id>597</wp:post_id>
		<wp:post_date>2009-11-21 12:09:32</wp:post_date>
		<wp:post_date_gmt>2009-11-21 18:09:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>converting-numbers-to-ranges-python</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Converting Numbers to Ranges: Java</title>
		<link>http://coffeaelectronica.com/blog/2009/11/converting-numbers-to-ranges-java/</link>
		<pubDate>Sun, 22 Nov 2009 18:38:42 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=602</guid>
		<description></description>
		<content:encoded><![CDATA[Yesterday I posted my Python code for the <a href="http://coffeaelectronica.com/blog/2009/11/converting-numbers-to-ranges-python/">Converting Numbers to Ranges</a> problem. Today I decided to do a quick Java implementation. 

<code lang="java">
public class HomeOnTheRange {

    public static void main( final String[] args ) {
        System.out.println( convertToRanges( args ) );
    }

    public static String convertToRanges(final String[] args){
        final int[] nums = new int[args.length];
        for( int n=0; n<args.length; n++){
            nums[n] = Integer.valueOf( args[n] );
        }

        String hold = null;
        final StringBuilder str = new StringBuilder();

        for(int i=0; i<args.length; i++){
            if( i+1 < args.length && nums[i]+1 == nums[i+1] ){
                if(hold == null) hold = args[i];
            } else {
                if(hold != null){
                    str.append(hold).append('-').append(args[i]).append(", ");
                    hold = null;
                } else {
                    str.append( args[i] ).append(", ");
                }
            }
        }

        str.delete( str.length()-2, str.length() ).append( '.' );

        return str.toString();
    }
}
</code>

There is not much difference from the Python version; I guess with simple problems like these you are going to end up with pretty much the same form of solution unless you can find some tricky little piece of the language that works better as a solution.

One thing I did different in the Java solution is that I pre-converted the argument String array into an integer array. I noticed that you really end up doing the string to int conversion twice for most of the input elements, which in Java can really add up for a large data set. I wonder if the same problem is inherent in the python solution? I also did the ending period a little different here, simple deleting the end of the string buffer and adding a period; an approach similar to the python version would probably be a little better, but either way is fine.

I guess you could write a separate method to do the string to int conversion and then cache the results so that you are still doing the conversion once and "inline" with the main loop. With a little thought about the problem space you can see that each string is converted and used at most twice, so you can setup the caching to convert and cache on the first use and then just return the converted int on the second call. 

<code lang="java">
public class HomeOnTheRange2 {

    private static final ThreadLocal<Converter> converter = new ThreadLocal<Converter>(){
        @Override
        protected Converter initialValue() {
            return new Converter();
        };
    };

    public static void main( final String[] args ) {
        System.out.println( convertToRanges( args ) );
    }

    public static String convertToRanges(final String[] args){
        String hold = null;
        final StringBuilder str = new StringBuilder();

        final Converter conv = converter.get();
        for(int i=0; i<args.length; i++){
            if( i+1 < args.length && conv.toInt( args[i] )+1 == conv.toInt( args[i+1] )){
                if(hold == null) hold = args[i];
            } else {
                if(hold != null){
                    str.append(hold).append('-').append(args[i]).append(", ");
                    hold = null;
                } else {
                    str.append( args[i] ).append(", ");
                }
            }
        }

        str.delete( str.length()-2, str.length() ).append( '.' );

        return str.toString();
    }

    private static final class Converter {

        private String key;
        private int value;

        public int toInt(final String str){
            if( !str.equals( key ) ){
                this.key = str;
                this.value = Integer.valueOf( str );
            }
            return value;
        }
    }
}
</code>

You will see that this code no longer does the initial conversion loop. The string to int conversion is now done using the <tt>Converter</tt> class, which simply converts and caches the value on the first request for a value, and will simply return the cached int for a second call of the same number. This makes the assumption that the numbers are in ascending order, which is valid for this problem. I also added the converter as a <tt>ThreadLocal</tt> variable since this conversion is now very tied to the order in which the values are converted. Making it thread-safe ensures that two calls to this method on different threads will not mess with each others values.

I considered just using a Map of some sort, but without some sort of bounds you end up caching every number, when as you can see you really only need one.

Technically delving that deep into the problem to come up with a custom caching solution is really premature optimization, which is generally a bad thing. You should just to the original conversion as needed and then do the followup refactoring if performance bottlenecks lead you to do so.]]></content:encoded>
		<excerpt:encoded><![CDATA[Yesterday I posted my Python code for the <a href="http://coffeaelectronica.com/blog/2009/11/converting-numbers-to-ranges-python/">Converting Numbers to Ranges</a> problem. Today I decided to do a quick Java implementation. ]]></excerpt:encoded>
		<wp:post_id>602</wp:post_id>
		<wp:post_date>2009-11-22 12:38:42</wp:post_date>
		<wp:post_date_gmt>2009-11-22 18:38:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>converting-numbers-to-ranges-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MessageFormat Goodies</title>
		<link>http://coffeaelectronica.com/blog/2009/11/messageformat-goodies/</link>
		<pubDate>Wed, 25 Nov 2009 01:18:16 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=614</guid>
		<description></description>
		<content:encoded><![CDATA[The <tt>java.text.MessageFormat</tt> class is, in my opinion, underutilized. It is what <tt>org.springframework.context.MessageSource</tt> implementations use under the covers to provide message formatting, so they are probably used quite a bit, but do you really let them do what they are made to do... formatting? I am guilty of it to; you convert a Date object to a formatted string before handing it off to a MessageSource or MessageFormat instance... but no more.

I wrote a quick little format dumper to show what each type of formatting prints out:

<code lang="java">
Object[] params = new Object[]{ new Date() };
out.println("Dates:");
out.println("  default:\t" + format("{0}",                 params) );
out.println("  short:\t"   + format("{0,date,short}",      params) );
out.println("  medium:\t"  + format("{0,date,medium}",     params) );
out.println("  long:\t\t"  + format("{0,date,long}",       params) );
out.println("  custom:\t"  + format("{0,date,d MMMM yyyy}",params) );

out.println("\nTime:");
out.println("  default:\t" + format("{0,time}",         params) );
out.println("  short:\t"   + format("{0,time,short}",   params) );
out.println("  medium:\t"  + format("{0,time,medium}",  params) );
out.println("  long:\t\t"  + format("{0,time,long}",    params) );
out.println("  full:\t\t"  + format("{0,time,full}",    params) );
out.println("  custom:\t"  + format("{0,time,HH:mm:ss}",params) );

params = new Object[]{ new Float(31415.967F) };
out.println("\nNumbers:");
out.println("  default:\t"  + format("{0}",                  params) );
out.println("  integer:\t"  + format("{0,number,integer}",   params) );
out.println("  currency:\t" + format("{0,number,currency}",  params) );
out.println("  percent:\t"  + format("{0,number,percent}",   params) );
out.println("  custom:\t"   + format("{0,number,#,###.0000}",params) );
</code>

Note: I used static imports for <tt>System.out</tt> and <tt>MessageFormat.format</tt> so that I could minimize the code noise. For the same reason, I pulled the format label text outside of the formatting call; they could have easily been done as:

<code lang="java">out.println( format("  short:\t{0,time,short}",   params) );</code>

It just seemed easier to see the formatting the other way.

When I ran my format dumper I ended up with:

<pre>
Dates:
  default:	11/23/09 7:59 PM
  short:	11/23/09
  medium:	Nov 23, 2009
  long:		November 23, 2009
  custom:	23 November 2009

Time:
  default:	7:59:37 PM
  short:	7:59 PM
  medium:	7:59:37 PM
  long:		7:59:37 PM CST
  full:		7:59:37 PM CST
  custom:	19:59:37

Numbers:
  default:	31,415.967
  integer:	31,416
  currency:	$31,415.97
  percent:	3,141,597%
  custom:	31,415.9668
</pre>

I am going to make a point to use these from now on, rather than converting manually beforehand.]]></content:encoded>
		<excerpt:encoded><![CDATA[The <tt>java.text.MessageFormat</tt> class is, in my opinion, underutilized. It is what <tt>org.springframework.context.MessageSource</tt> implementations use under the covers to provide message formatting, so they are probably used quite a bit, but do you really let them do what they are made to do... formatting? I am guilty of it to; you convert a Date object to a formatted string before handing it off to a MessageSource or MessageFormat instance... but no more.]]></excerpt:encoded>
		<wp:post_id>614</wp:post_id>
		<wp:post_date>2009-11-24 19:18:16</wp:post_date>
		<wp:post_date_gmt>2009-11-25 01:18:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>messageformat-goodies</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XML Serialization</title>
		<link>http://coffeaelectronica.com/blog/2009/11/xml-serialization/</link>
		<pubDate>Fri, 27 Nov 2009 17:36:29 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=617</guid>
		<description></description>
		<content:encoded><![CDATA[Another pair of those seemingly forgotten classes in the core Java API are the <tt>java.beans.XMLEncoder</tt> and <tt>java.beans.XMLDecoder</tt>. Added in 1.4, they don't really seem to be used all that much, that I have come across anyway. It seems that whenever someone needs to convert objects into xml, they instantly reach for 3rd-party libraries rather than looking in the core API. Not to downplay other APIs, but I do think XMLEncoder and XMLDecoder deserve consideration, especially when you simply need to export data objects in a simple and repeatable manner.

First off, we need something to work with, how about a nice Person class:

<code lang="java">
public class Person {
	private String firstName, lastName;
	private short age;

	public Person(){ super(); }

	public Person(final String firstName, final String lastName, final short age){
		this.firstName = firstName;
		this.lastName = lastName;
		this.age = age;
	}

	public String getFirstName() { return firstName; }

	public void setFirstName(final String firstName) { this.firstName = firstName; }

	public String getLastName() { return lastName; }

	public void setLastName(final String lastName) { this.lastName = lastName; }

	public short getAge() { return age; }

	public void setAge(final short age) { this.age = age; }

	@Override
	public String toString() { return firstName+" "+lastName+" ("+age+")"; }
}
</code>

It's nothing special, just first name, last name and age with getters and setters. I also overrode the <tt>toString()</tt> method so we can get something useful from it.

Now say you are in a situation where you need to quickly convert objects of the Person class to a format usable by another client (maybe another programming language); as much trouble as XML can be a times, it is still a good interoperability choice. Converting a collection of Person objects to XML is trivial:

<code lang="java">
final Collection<Person> people = new LinkedList<Person>();
people.add( new Person("Joe","Smith",(short) 32) );
people.add( new Person("Abe","Ableman",(short) 54) );
people.add( new Person("Cindy","Lindy",(short) 42) );

final XMLEncoder encoder = new XMLEncoder( outputStream );
encoder.writeObject(people);
encoder.close();
</code>

Which will generate the following XML in the given output stream:

<code lang="xml">
<?xml version="1.0" encoding="UTF-8"?> 
<java version="1.6.0_13" class="java.beans.XMLDecoder"> 
 <object class="java.util.LinkedList"> 
  <void method="add"> 
   <object class="foo.Person"> 
    <void property="age"> 
     <short>32</short> 
    </void> 
    <void property="firstName"> 
     <string>Joe</string> 
    </void> 
    <void property="lastName"> 
     <string>Smith</string> 
    </void> 
   </object> 
  </void> 
  <void method="add"> 
   <object class="foo.Person"> 
    <void property="age"> 
     <short>54</short> 
    </void> 
    <void property="firstName"> 
     <string>Abe</string> 
    </void> 
    <void property="lastName"> 
     <string>Ableman</string> 
    </void> 
   </object> 
  </void> 
  <void method="add"> 
   <object class="foo.Person"> 
    <void property="age"> 
     <short>42</short> 
    </void> 
    <void property="firstName"> 
     <string>Cindy</string> 
    </void> 
    <void property="lastName"> 
     <string>Lindy</string> 
    </void> 
   </object> 
  </void> 
 </object> 
</java> 
</code>

Yeah, it's not pretty and it's a bit on the verbose side, but it was easy to produce and easy to read. Now, if you want to read that back into Java objects, it it equally as simple:

<code lang="java">
final XMLDecoder decoder = new XMLDecoder( inputStream );
final Collection<Person> persons = (Collection<Person>)decoder.readObject();
decoder.close();
</code>

which will give you back copies of your original objects. If you were to call <tt>toString()</tt> on the resulting collection you would get:

<pre>
[Joe Smith (32), Abe Ableman (54), Cindy Lindy (42)]
</pre>

Exactly what you put in.

Obviously, this is not the best approach for serializing and deserializing data, but it's another tool in the tool box and I am always surprised by how few developers actually know that they are avaialable.

]]></content:encoded>
		<excerpt:encoded><![CDATA[Another pair of those seemingly forgotten classes in the core Java API are the <tt>java.beans.XMLEncoder</tt> and <tt>java.beans.XMLDecoder</tt>. Added in 1.4, they don't really seem to be used all that much, that I have come across anyway. It seems that whenever someone needs to convert objects into xml, they instantly reach for 3rd-party libraries rather than looking in the core API. Not to downplay other APIs, but I do think XMLEncoder and XMLDecoder deserve consideration, especially when you simply need to export data objects in a simple and repeatable manner.]]></excerpt:encoded>
		<wp:post_id>617</wp:post_id>
		<wp:post_date>2009-11-27 11:36:29</wp:post_date>
		<wp:post_date_gmt>2009-11-27 17:36:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xml-serialization</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[Xml]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Coffea Electronica App</title>
		<link>http://coffeaelectronica.com/blog/2009/11/coffea-electronica-app/</link>
		<pubDate>Sat, 28 Nov 2009 16:54:03 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=630</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="attachment_632" align="alignright" width="200" caption="CoffeaElectronica App"]<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2009/11/ceapp-screen.png"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/11/ceapp-screen-200x300.png" alt="CoffeaElectronica App" title="CoffeaElectronica App" width="200" height="300" class="size-medium wp-image-632" /></a>[/caption]Well, I have finished my first "real" <a href="http://android.com">Android</a> app, the CoffeaElectronica App for Android! Okay, so, it's not really all that useful or exciting, but it was a good learning experience and it does provide a nice way to interact with this site (I have a few additional features I want to add in). Since I know you are in a hurry to download and install this little beauty, you can go over to my new <a href="mobile">Mobile</a> page for more information.

I am not going to try and put this app on the official Android market, since it really has very limited use. Also, for now, the app is closed source. I need to clean it up a bit and get a little better with Android development before I share. ;-)

Basically all it does at this point is provide a nice reading experience for reading my posts on an Android phone. You can also click the menu button which provides a "contact me" button and a "go to site" option, both doing what you would expect.

Currently it works on phones running Android 1.6, I have not tried it under 2.0 yet.]]></content:encoded>
		<excerpt:encoded><![CDATA[Well, I have finished my first "real" Android app, the CoffeaElectronica App for Android! Okay, so, it's not really all that useful or exciting, but it was a good learning experience and it does provide a nice way to interact with this site (I have a few additional features I want to add in).]]></excerpt:encoded>
		<wp:post_id>630</wp:post_id>
		<wp:post_date>2009-11-28 10:54:03</wp:post_date>
		<wp:post_date_gmt>2009-11-28 16:54:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>coffea-electronica-app</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Abominable Nested Collections</title>
		<link>http://coffeaelectronica.com/blog/2009/12/abominable-nested-collections/</link>
		<pubDate>Thu, 17 Dec 2009 00:14:01 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=641</guid>
		<description></description>
		<content:encoded><![CDATA[The dreaded nested collection, one of the most vile creatures in the lazy-development arsenal. What's wrong with nested collections? Nothing, if they are required to solve a problem... everything if they are used as the lazy-man's domain object or data transfer object. Consider this case where you have AddressBeans being mapped to their zip code and then again to their state:

<code lang="java">Map<String,Map<String,AddressBean>> map = getAddresses();</code>

or worse yet, back in the pre-Java 5 days:

<code lang="java">Map map = getAddresses();</code>

How meaningless is that? In the second case you will probably stumble over that Map a few times before you even figure out what's in it, or you will have to trace down into the code and see what's being put into it.

Code should be straight-forward and expressive. When you find yourself writing a Collection of Collections (or arrays or maps), step back and look at the larger picture. Do you really need such a complex construct? If so, does it really need to be so general that the caller must figure out it's meaning?

Generally the answer is no. This example could easily be replaced with a wrapper object, say <tt>AddressGroup</tt> that may internally still use the nested collection, or some other storage mechanism that the caller really does not care about as long as the data is accessible. This wrapper object would also provided a richer less error-prone means of accessing the data.

<code lang="java">
public class AddressGroup {

    private Map<String,Map<String,AddressBean>> addresses;
    
    public AddressBean[] getAddressesForState(String state){
        // return the addresses for the selected state
    }
    
    public AddressBean[] getAddressesForZip(String zip){
        // return the addresses for the selected zip
    }
    
    Iterator<AddressBean> addresses(){
        // return an iterator over all addresses
    }
    
    // other accessors as needed
}
</code>

With this wrapper object, we now have a much more meaningful statement:

<code lang="java">AddressGroup addressGroup = getAddresses();</code>

The point here is that there is nothing stopping you from writing your own "collection objects" that can be used to abstract away some of the nastiness of complex raw data structures. Doing this reduces the complexity of your code while at the same time making it easier to read and understand.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>641</wp:post_id>
		<wp:post_date>2009-12-16 18:14:01</wp:post_date>
		<wp:post_date_gmt>2009-12-17 00:14:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>abominable-nested-collections</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>If At First You Don&#039;t Succeed...</title>
		<link>http://coffeaelectronica.com/blog/2009/12/if-at-first-you-dont-succeed/</link>
		<pubDate>Sat, 19 Dec 2009 16:17:25 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=644</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes you run into an operation that is a little on the flaky side and might sometimes fail on one execution but then work fine on the next; apart from fixing the underlying issue which may not be within your control, you can implement an operation retry strategy. With an operation retry strategy you attempt to execute an operation and then retry it if it fails. After a specified number of attempts (or under certain exceptions) you can allow the operation to fail gracefully. This gives you greater isolation of the questionable service while also allowing you more control what happens on a failure.

I have run into this issue a few years back with a twitchy SMTP server, and now again with a slightly-flaky database connection pool. Last time I wrote a very code-specific retry strategy (and like a doof, never blogged about it), but this time something more reusable is in order since this component would be used extensively throughout the code.

Basically the requirement is the ability to run a repeatable operation some number of times until it either succeeds or exceeds a specified number of attempts, at which point it will stop trying and fail. Since there are no closures in Java yet, I came up with a <tt>Retriable</tt> interface with a single method which will execute the operation and return it's return value if there is one.

<code lang="java">
public interface Retriable<T> {
	public T execute() throws Exception;
}
</code>

I had originally considered using <tt>java.lang.Runnable</tt>; however, a return value simplifies cases where you are trying to extract some value from the operation. Similarly I considered the <tt>org.apache.commons.lang.Closure</tt> class and discarded if for the same reason.

The retry logic itself is pretty straight-forward. The failure condition is based on exceptions thrown by the operation execution. If an execption is thrown that is not contained in the "catchAndThrow" list, the counter will be incremented and the operation will be tried again if the max number of tries has not been exceeded. The "catchAndThrow" list is an array of Exception classes which if caught are to be thrown out of the handler rather than initiating a retry. This allows some desired exceptions to be handled by the calling method.

<code lang="java">
public <T> T execute( final Retriable<T> op ) throws Exception {
	boolean retry = true;
	int count = 0;
	do {
		try {
			return op.execute();

		} catch(final Exception e) {
			if( ArrayUtils.contains(catchAndThrow, e.getClass()) ) throw e;

			retry = ++count < maxRetries;
			if(log.isWarnEnabled() && !retry) {
				log.warn("RetriesFailed[" + op.getClass().getName() + "]: " + e.getMessage(), e);
			}
		}
	} while( retry );

	throw new MaxRetriesExceededException(maxRetries,op.getClass().getName());
}
</code>

You will notice that if all the retries fail, a <tt>MaxRetriesExceededException</tt> is thrown. This allows calling methods to catch and handle the case when total failure occurs in a method-specific manner.

A more advanced retry strategy could also be derived from this where the failure condition is based on an injected object (ala strategy pattern) so that other criteria could be used to determine success and failure. The exception catch and throw filter could also be enhanced in this manner.

The retry object itself, which I have called the <tt>Retrier</tt> is a reusable thread-safe POJO so it can be configured via dependency injection (Spring) and used for any number of <tt>Retriable</tt> operations.

<code lang="xml">
<bean id="retrier" class="retry.Retrier">
	<property name="maxRetries" value="3" />
	<property name="catchAndThrow">
		<list>
			<value>java.lang.NullPointerException</value>
		</list>
	</property>
</bean>
</code>

What you end up with is a very clean way to perform retiable logic:

<code lang="java">
final long id = someBeanId;
final String criteria = searchCriteria;

SomeBean resultBean = retrier.execute( new Retriable<SomeBean>(){
	public SomeBean execute() throws Exception {
		return searchDao.findBean(id,criteria);
	}
} );
</code>

In this sample code a searchDao is being called in a retriable manner using parameters from the calling method. As long as parameters are final they can be passed into the anonymous inner class craeted by the inline creation of the <tt>Retriable</tt>. You will also see that with the use of generics you get a seamless integration of the retiable operation into your code.

Currently, I do not have this code in any of my projects, though it would be a good addition to my <a href="http://github.com/cjstehno/codeperks-lang">CodePerks-Lang</a> project (which is as of now, still unreleased). I have included a downloadable zip file containing the source code (including unit test) for this example.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>644</wp:post_id>
		<wp:post_date>2009-12-19 10:17:25</wp:post_date>
		<wp:post_date_gmt>2009-12-19 16:17:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>if-at-first-you-dont-succeed</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>256</wp:comment_id>
			<wp:comment_author><![CDATA[roger]]></wp:comment_author>
			<wp:comment_author_email>rogerdpack@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://freeldssheetmusic.org</wp:comment_author_url>
			<wp:comment_author_IP>216.49.181.128</wp:comment_author_IP>
			<wp:comment_date>2011-04-19 13:11:51</wp:comment_date>
			<wp:comment_date_gmt>2011-04-19 18:11:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oh man. I miss closures so much. The humanity!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>...Try Try Again</title>
		<link>http://coffeaelectronica.com/blog/2009/12/try-try-again/</link>
		<pubDate>Mon, 21 Dec 2009 00:38:28 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=650</guid>
		<description></description>
		<content:encoded><![CDATA[After yesterday's post, <a href="http://coffeaelectronica.com/blog/2009/12/if-at-first-you-dont-succeed/">If At First You Don't Succeed...</a>, I thought of a slightly different approach to the retry execution method:

<code lang="java">
public <T> T execute( final Retriable<T> op ) throws Exception {
    for(int r=0; r<maxRetries; r++){
        try {
            return op.execute();

        } catch(final Exception e) {
            if( ArrayUtils.contains(catchAndThrow, e.getClass()) ) throw e;

            if(log.isWarnEnabled()){
                log.warn("RetryCaughtException[" + r + "]: " + e.getMessage());
            }
        }   
    }

    if(log.isWarnEnabled()) {
        log.warn("RetriesFailed: " + op.getClass().getName());
    }    

    throw new MaxRetriesExceededException(maxRetries,op.getClass().getName());
}
</code>

This approach does not rely on the boolean to end the loop. If an exception is thrown it will try again until a return value is returned or the retry count has been exceeded. With this approach you only fall out of the loop on a retry exceeded condition, hence the logging and the thrown exception. This feels a little cleaner than the other approach.

I have not run it through the unit testing so, you might do that first if you intend to use this code.]]></content:encoded>
		<excerpt:encoded><![CDATA[After yesterday's post, <a href="http://coffeaelectronica.com/blog/2009/12/if-at-first-you-dont-succeed/">If At First You Don't Succeed...</a>, I thought of a slightly different approach to the retry execution method.]]></excerpt:encoded>
		<wp:post_id>650</wp:post_id>
		<wp:post_date>2009-12-20 18:38:28</wp:post_date>
		<wp:post_date_gmt>2009-12-21 00:38:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>try-try-again</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Collapsible Divs With JQuery</title>
		<link>http://coffeaelectronica.com/blog/2009/12/collapsible-divs-with-jquery/</link>
		<pubDate>Thu, 24 Dec 2009 00:43:50 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=656</guid>
		<description></description>
		<content:encoded><![CDATA[I coded up a nice little collapsible-group side bar thingy using <a href="http://jquery.com">JQuery</a> and it was surprisingly easy. Say you have a sidebar with collapsible group content such as:

<code lang="html">
<div class="container">
	<div class="group">
		<div class="group-title">Group A</div>
		<div class="group-content">
			This is where you would put the content for Group A.
		</div>
	</div>
	<div class="group">
		<div class="group-title">Group B</div>
		<div class="group-content">
			This is where you would put the content for Group B.
		</div>
	</div>
	<div class="group">
		<div class="group-title">Group C</div>
		<div class="group-content">
			This is where you would put the content for Group C.
		</div>
	</div>
</div>
</code>

where you have group block titles and group content that you want to be able to toggle the visibility of. With a couple lines of JavaScript and JQuery it's a sinch:

<code lang="javascript">
$('div.group-title').bind('click',function(evt){
	$(evt.target).parent().find('.group-content').slideToggle(500);
});   
</code>

which will be put inside an onload handler (also using JQuery). When the group title is clicked, the group-content block will toggle by sliding up or down in about half a second. With this model you can also place any number of these "components" on a page without the concern about event collision since the event handling is based on the click location.

Add in a little CSS and you end up with:
<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2009/12/collapsable-div.png"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2009/12/collapsable-div.png" alt="" title="collapsable-div" width="208" height="188" class="alignnone size-full wp-image-657" /></a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[I coded up a nice little collapsible-group side bar thingy using <a href="http://jquery.com">JQuery</a> and it was surprisingly easy. ]]></excerpt:encoded>
		<wp:post_id>656</wp:post_id>
		<wp:post_date>2009-12-23 18:43:50</wp:post_date>
		<wp:post_date_gmt>2009-12-24 00:43:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>collapsible-divs-with-jquery</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="html"><![CDATA[HTML]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[JQuery]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[collapsable-divs-with-jquery]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Blissful Development</title>
		<link>http://coffeaelectronica.com/blog/2010/01/blissful-development/</link>
		<pubDate>Sun, 03 Jan 2010 20:35:30 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=662</guid>
		<description></description>
		<content:encoded><![CDATA[I have been working on a personal project to create a movie catalog database for our collection of movies. Yes, there are a handful of both desktop and web-based applications available to do this, though, they all seem to be lacking in one feature or another... and I needed an interesting useful project. This project has been one of my most enjoyable personal development projects; if you have ever seen my project graveyard, you know there have been quite a few that didn't get very far for one reason or anther, usually time and/or complexity.

I owe my development-bliss on this project to something not usually found on modern software projects (at least in my experience)... simplicity. No, not simplicity of the project goals, but of the tools and the environment. For development I am using my favorite text editor, <a href="http://notepad-plus.sourceforge.net/">Notepad++</a>, <a href="http://cygwin.com">Cygwin</a> (yes, I am doing this on Windows... I have not yet found a good solid text editor for Linux, perhaps I will have to make peace with vi)... and that's it unless you want to count Firefox. But, wait... where is the IDE, the pile of plug-ins, and tools? Well, okay... I am also using <a href="http://grails.org">Grails</a> along with <a href="http://jquery.org">JQuery</a> and <a href="http://jqueryui.org">JQueryUI</a>. That's the key... Grails.

With this environment I have been able to focus on building my application, not plumbing and other mundane details. I have an almost instant turn-around on changes to domain and controller classes, as well as a simple yet flexible syntax that allows for less IDE overhead, hence the text editor. Heck, most of my actual coding has been the HTML and JavaScript for the front-end; I have modified a few scaffold controller actions, and added a few of my own, which have all been simple and straightforward. It truly is a pleasant environment to work with.

<a href="http://groovy.codehaus.org">Groovy</a> itself is quite nice, providing a much more rich syntax while still maintaining total support of Java and Java syntax. One of the features of Grails I have always appreciated is that you always have Java to fall back on if you need a bit more performance, or access to something that cannot be accessed through Groovy itself. The two languages really coexist quite nicely.

I have the core JavaDocs pretty much burned into my memory (:-)), but I wonder how less-seasoned developers would find this setup. Without an IDE you don't get code completion or the other helpful features that help to boost the productivity of more junior developers. It's not meant to be a hard-core developer test; I am not into that kind of stuff. I am all about making development easier... and this just feels right for Grails (and Groovy).

Java web application development has gotten too hard somewhere along the way.]]></content:encoded>
		<excerpt:encoded><![CDATA[I have been working on a personal project to create a movie catalog database for our collection of movies. Yes, there are a handful of both desktop and web-based applications available to do this, though, they all seem to be lacking in one feature or another... and I needed an interesting useful project.]]></excerpt:encoded>
		<wp:post_id>662</wp:post_id>
		<wp:post_date>2010-01-03 14:35:30</wp:post_date>
		<wp:post_date_gmt>2010-01-03 20:35:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blissful-development</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="grails"><![CDATA[Grails]]></category>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[JQuery]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Text-based Task Shorthand</title>
		<link>http://coffeaelectronica.com/blog/2010/01/text-based-task-shorthand/</link>
		<pubDate>Wed, 06 Jan 2010 01:59:34 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=665</guid>
		<description></description>
		<content:encoded><![CDATA[Ever since college I have used a quick format for simple transient task lists, like "stuff to do today", or a simple way of tracking progress on a bug fix. All it requires is a text editor (or text edit field). Basically you just make a list of the tasks, one per line or just add an extra line between items if they take up more than one editor line. It's best to keep it short though. The real trick is in the coded bullets prefixing each item. I will start out with an example:

<pre>
/   post about my task shorthand
?   discover meaning of life
-   do laundry
    -   find laundry detergent
x   bathe
!   feed the cat
</pre>

As you can see in the example, sub-tasks are indented under their parent task. The legend for the bullet types is as follows:

<pre>
? - there are questions about this item or more information is required.
- - this is just a standard task item
! - this is an important task item
/ - this item is pending other items or external activities
x - this item is done
</pre>

It's a simple system that works well for small short-lived lists of tasks. I thought I would share... maybe someone else will find it useful too.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>665</wp:post_id>
		<wp:post_date>2010-01-05 19:59:34</wp:post_date>
		<wp:post_date_gmt>2010-01-06 01:59:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>text-based-task-shorthand</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Curl Up With a Good Nook</title>
		<link>http://coffeaelectronica.com/blog/2010/01/curl-up-with-a-good-nook/</link>
		<pubDate>Sat, 09 Jan 2010 22:50:31 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=668</guid>
		<description></description>
		<content:encoded><![CDATA[For Christmas this year, my wife got me a Barnes & Noble <a href="http://www.barnesandnoble.com/nook/">nook</a>, and I LOVE it. 

When I first thought about writing this review, I figured I would include pictures of the nook and its accessories... then I thought that really didn't make much sense. You can see pictures of it all over the place. It's not like mine would be any better. What is really important is how it works and how it feels. 

My parents are/were both big readers so I have been surrounded by books ever since birth; therefore, I am a reader and have a wall of our office devoted to books. I love browsing around bookstores and finding the hidden treasures of a new author and then kicking back with a good book and a cup of coffee. When I first thought about eBook a few years back, I thought that it wouldn't really catch on. The eBook readers were PDAs, computers and the odd reader here and there... not very attractive to a devoted reader. Then more recently the Kindle came on the scene and that really put a serious line in the sand for books and readers. Now there was a bit bookseller with a quality eBook reader which was a strong combination. I looked into the Kindle (my Mom actually has had one for quite a while) and found it lacking in some areas, notably the way they handle DRM... so I held onto my books and waited.

Enter the nook (for some reason capitalization has gone out of style). I never really heard many rumors about it until just before it was announced.... and then it was love. The nook has a sensible DRM policy (you can store and backup your books locally while also maintaining a copy on BN's server), it has the same eInk display as the Kindle, with an additional full color touch screen (for navigation, typing, coverflow, etc), and it's got full support for PDFs (which the Kindle now has too). A few other niceties are that it has a self-replaceable battery, and a microSD slot for adding more memory. It's about the same width and height as the Kindle though its a bit thicker and heavier, but not overly so.

The reading experience of the nook is great. The page buttons are on either side of the unit at just the right location for easy access, without being easy to accidentally press. The screen is almost like reading a book page, with the light gray background and nice clean text. One odd thing my mother and I both commented on about both the nook and the Kindle is the lack of some sort of built-in back light; the eInk display does not produce light so you can't read in the dark without and external light source. There are plenty of book-lights out there so it's not that big a deal.

One nice bonus about the nook is that it's based on the <a href="http://android.com">Android</a>, which means that they have a good solid platform to develop on and that we may see some additional applications for the nook or even an open SDK for developers to write their own apps. What this also provides is a soon-to-be-released Android phone app for reading your BN eBooks. They already provide a reader for iPhones, Mac and PC.

Purchasing books is simple. You just browse through the online store either on the nook or on your computer and select the book you want. If you are using your nook it will be downloaded right away and you can usually start reading in a minute or two. The nook comes with 3G and Wifi support, though I have not yet set mine up for my home network. The 3G has been fast enough so far.

One thing I recommend is getting a good cover for your nook. I actually bought one of the covers that resembles a book so I still keep things a little bit retro. There are gel covers similar to those you can get for phones and iPods coming out sometime next month.

Lastly, the nook has something the Kindle cannot have... and in-store experience. Supposedly if you take your nook into a Barnes and Noble store you will have free wireless access and the ability to read full copies of any eBook, just like you can when you are in the store looking at normal books. They also said that they will have special nook offers like coupons or free content when you are in the store. I have not yet taking my nook with me so I can't really comment on that too much.

All in all, I have really enjoyed the nook so far and I am embracing the new digital media revolution... first it was music, then photos, now books. Damn, if I can convert all these books to digital I will have so much extra wall space.

On a side note... something I am hoping will come out of this new rise of the eBooks is that some of the older out of print works will be reborn as eBooks. I would imagine the overhead in digitizing a book is pretty small and then they could start making money on it again.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>668</wp:post_id>
		<wp:post_date>2010-01-09 16:50:31</wp:post_date>
		<wp:post_date_gmt>2010-01-09 22:50:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>curl-up-with-a-good-nook</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="nook"><![CDATA[nook]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Shortcutting Search Loops</title>
		<link>http://coffeaelectronica.com/blog/2010/01/shortcutting-search-loops/</link>
		<pubDate>Tue, 12 Jan 2010 01:09:47 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=671</guid>
		<description></description>
		<content:encoded><![CDATA[A simple mistake I have seen a lot is not breaking out of a search loop once you have found what you are searching for. Take the code below, for example:

<code lang="java">
public User findUser(String name){
    User foundUser = null;
    
    for( User user : product.getUsers() ){
        if( name.equals(user.getName()) ){
            foundUser = user;
        }
    }
    
    return foundUser;
}
</code>

This code will loop through <i>every</i> user even after you have found the user you are looking for, which for large sets of data can get very inefficient. You can shortcut the loop with a break statement:

<code lang="java">
public User findUser(String name){
    User foundUser = null;
    
    for( User user : product.getUsers() ){
        if( name.equals(user.getName()) ){
            foundUser = user;
            break;
        }
    }
    
    return foundUser;
}
</code>

which will drop the control out of the loop once your user has been found. You could also simply return the user when found, such as

<code lang="java">
public User findUser(String name){
    for( User user : product.getUsers() ){
        if( name.equals(user.getName()) ){
            return user;
        }
    }
    return null;
}
</code>

This version causes there to be two exit points in the method, which is often frowned upon. Personally, I don't see a problem with this in short simple methods.

Lastly, if you are a couple levels deep in a loop and cannot simply use a "return" for some reason, you can use a label to break out of the loop. Consider this example of a Map of Lists (something that you generally should not do):

<code lang="java">
User foundUser = null;
Iterator<List<User>> lists = users.values();
finder: for( List<User> list : users.values() ){
    for( User user : list){
        if( name.equals(user.getName()){
            foundUser = user;
            break finder;
        }
    }
}
</code>

which will break out of the loop labeled "finder" (the outer loop).

There are, of course, other ways of breaking out of loops, but these are the most general and cleanest, in my opinion.]]></content:encoded>
		<excerpt:encoded><![CDATA[A simple mistake I have seen a lot is not breaking out of a search loop once you have found what you are searching for. This post will give you a few good examples of how to shortcut search loops.]]></excerpt:encoded>
		<wp:post_id>671</wp:post_id>
		<wp:post_date>2010-01-11 19:09:47</wp:post_date>
		<wp:post_date_gmt>2010-01-12 01:09:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>shortcutting-search-loops</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Groovy Unit Testing: Tools</title>
		<link>http://coffeaelectronica.com/blog/2010/01/groovy-unit-testing-tools/</link>
		<pubDate>Fri, 15 Jan 2010 00:21:01 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=675</guid>
		<description></description>
		<content:encoded><![CDATA[The <a href="http://javamug.org/">Java Metroplex User Group</a> meeting last night was a presentation on unit testing and mocking with <a href="http://groovy.codehaus.org">Groovy</a>, presented by <a href="http://www.agiledeveloper.com/blog">Venkat Subramaniam</a>, a well-known author and consultant... and a great presenter to watch, by the way. In his presentation he showed various techniques for using Groovy to write unit testing for both Java classes and other Groovy classes.

Count me among the converted, but I was not sure just how easy it would be to bring Groovy into a Java project while still maintaining good <a href="http://eclipse.org">Eclipse</a> and <a href="http://maven.apache.org">Maven</a> support. So, I did a quick little experiment and found out that the integration is trivial.

Say you have a maven project, we'll call it "groover", already hapily running maven under Java 6 and Maven 2. Add the following dependencies (assuming you dont already have JUnit 4):

<code lang="xml">
<dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.6</version>
    <type>jar</type>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.codehaus.groovy</groupId>
    <artifactId>groovy</artifactId>
    <version>1.7.0</version>
    <type>jar</type>
    <scope>test</scope>
</dependency>
</code>

You now have maven setup to run unit tests written in Groovy (assuming you have Groovy 1.7 installed locally as well). 

To get everything working in Eclipse, import your project (if it's not already in Eclipse) and be sure you have the Groovy Eclipse plug-in installed. You may also want/need the Maven Eclipse plug-in, but that is not a requirement. Once the project is imported, right click on the project name and convert it to a Groovy project. Now Eclipse is ready to go too.

Let's proove that it works by writing a simple little class and a Groovy test for it:

<code lang="java">
package foo;

public class Something {
	public String doIt(String in){
		return in.concat(" gabadata!");
	}
}
</code>

and then the test is:

<code>
package foo

import org.junit.Test
import static org.junit.Assert.*

class SomethingTest {
	@Test
	void doIt(){
		def result = new Something().doIt('foo')
		assertEquals "foo gabadata!", result
	}
}
</code>

Run the test using Ctrl+Alt+X T (normal JUnit run command in Eclipse) and it works just like any other JUnit test. Run the test in a console with maven with "mvn test" and it still works just like normal.

My next thought was that surely it would not work with my coverage tools! I was wrong, coverage worked fine in both the IDE and in maven.

So, by writing unit tests in Groovy I get to write less code, have built in powerful mocking support, and no tool integration issues? Sign me up!

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>675</wp:post_id>
		<wp:post_date>2010-01-14 18:21:01</wp:post_date>
		<wp:post_date_gmt>2010-01-15 00:21:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>groovy-unit-testing-tools</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My Final Answer</title>
		<link>http://coffeaelectronica.com/blog/2010/01/my-final-answer/</link>
		<pubDate>Sat, 16 Jan 2010 00:50:55 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=679</guid>
		<description></description>
		<content:encoded><![CDATA[I use the Java 'final' keyword quite a bit and I often get asked why. I guess the quick answer would be, "why not"?

I tend to use 'final' for instance variables, method parameters and local variables. The keyword can also be used to make classes and methods final but I leave that for the cases when I actually want that specific functionality.

Final instance variables (private fields) are useful for case when you want to specify the value once and then never again. This is helpful when configuring an object through Constructor dependency injection:

<code lang="java">
public class MyController implements Controller {

    private final MyService myService;

    public MyController(final MyService myService){
        this.myService = myService;
    }

    // other methods
}</code>

This allows you to configure the service object in the controller and not have to worry about any of the other methods overwriting it.

Using final for method parameters is quite handy since it keeps you from unexpectedly overwriting one. Consider the following code:

<code lang="java">
public int count(List<String> list, String name){
    int count = 0;
    Iterator<String> names = list.iterator();
    while(names.hasNext()){
        name = names.next();
        if(name.equals(name)) count++;
    }
    return count;
}</code>

which contains a possibly hard to find variable overwrite error, which becomes quite obvious when you use final

<code lang="java">
public int count(final List<String> list, final String name){
    int count = 0;
    Iterator<String> names = list.iterator();
    while(names.hasNext()){
        String nme = names.next();
        if(nme.equals(name)) count++;
    }
    return count;
}</code>

Local variables are made final for basically the same reason.

Now, I know that simply because a variable is final does not mean it's internal data cannot change, such as

<code lang="java">
final Map<String,Date> dates = new HashMap<String,Date>();
dates.get("Anniversary"); // will work fine
dates.put("Birthday");    // will work fine
</code>

The final keyword does not make them immutable, you just cannot overwrite them. Final makes you think a bit before overwriting a variable with a new object and it can sometimes point out, and save you from, potential bugs.

[caption id="attachment_680" align="alignleft" width="257" caption="Eclipse Save Actions"]<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2010/01/save-actions.png"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2010/01/save-actions-257x300.png" alt="" title="save-actions" width="257" height="300" class="size-medium wp-image-680" /></a>[/caption]Making your IDE do the work for you. If you use Eclipse (or one of its derivatives) you can have it automatically add 'final' to your code. Go into the Preferences and search for "Save Actions" and you should get something like what is show here. I generally auto-final method parameters and local variables since I have found that making private fields final can cause issues with some reflection and/or byte-code manipulation techniques.

Once you have the save actions setup, you will automatically have final added every time you save a file. I would imagine IntelliJ and NetBeans both have some similar functionality available.

Ultimately, the use of final comes down to personal preference. I find it useful and helpful to use the final keyword throughout my code. If you don't then you really don't have to use it unless you find a case where it's absolutely necessary. To me, though, I figure why not use it?

And that's my final answer. 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>679</wp:post_id>
		<wp:post_date>2010-01-15 18:50:55</wp:post_date>
		<wp:post_date_gmt>2010-01-16 00:50:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-final-answer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Finding Duplicate Ints: Ruby and Groovy</title>
		<link>http://coffeaelectronica.com/blog/2010/02/finding-duplicate-ints-ruby-and-groovy/</link>
		<pubDate>Wed, 03 Feb 2010 03:25:39 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=683</guid>
		<description></description>
		<content:encoded><![CDATA[I am going back to my old standard playtime function, <a href="http://coffeaelectronica.com/blog/2008/02/interview-question-find-2-matching-ints/">finding the duplicated integer</a> in a set of integers. I have been playing around a lot more with Groovy lately and I realized that I had never really done a <a href="http://groovy.codehaus.org">Groovy</a> version of that little function.

<code lang="groovy">
def findDups( n ){
    n.sort()
    for( i in (1..n.size())){
        if(n[i] == n[i-1]) return n[i]
    }
}
</code>

In this case, I am allowing null to be the value returned when no duplicate is found. It does seem to be a more realistic value for Groovy. It's a pretty straight forward function, along the same lines as the other languages. I thought maybe I could find some really cool feature of Groovy that would make this radically different from the Java version... nope. It does collapse nicely down to a single line though:

<code lang="groovy">
def findDups( n ){ n.sort(); for( i in (1..n.size()) ) if(n[i] == n[i-1]) return n[i] }
</code>

If you like that sort of thing.

Shortly after, I decided to do a quick little <a href="http://ruby-lang.org">Ruby</a> version as well:

<code lang="ruby">
def findDups( n )
    n.sort!()
    for i in (1..n.size())
        if(n[i] == n[i-1]) then return n[i] end
    end
    return nil
end
</code>

Nothing exciting in either case, but worth doing for completeness.]]></content:encoded>
		<excerpt:encoded><![CDATA[I am going back to my old standard playtime function, <a href="http://coffeaelectronica.com/blog/2008/02/interview-question-find-2-matching-ints/">finding the duplicated integer</a> in a set of integers. I have been playing around a lot more with Groovy lately and I realized that I had never really done a Groovy version of that little function.]]></excerpt:encoded>
		<wp:post_id>683</wp:post_id>
		<wp:post_date>2010-02-02 21:25:39</wp:post_date>
		<wp:post_date_gmt>2010-02-03 03:25:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>finding-duplicate-ints-ruby-and-groovy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Project Consolidation</title>
		<link>http://coffeaelectronica.com/blog/2010/02/project-consolidation/</link>
		<pubDate>Sun, 21 Feb 2010 19:01:24 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=688</guid>
		<description></description>
		<content:encoded><![CDATA[I have been consolidating all of my personal projects and prototypes trying to get everything setup on <a href="http://gitscm.org">Git</a> and <a href="http://github.com">GitHub</a>. I have used <a href="http://sourceforge.net">SourceForge</a> for years, but have lately found their project management model a bit on the heavy side. I have really taking a liking to Git for my personal projects, so GitHub was an easy choice. GitHub provides good Git integration with lightweight wiki and bug-tracking as well as some other handy features like code archive downloading.

I have most of my projects converted over, though most of them will be going through some refactoring soon (package names, testing, personal code reviews, etc) so that they are all brought up to at least some minimum level of quality. I will also need to update some of my archived blog posts so that they point to the correct project repositories.

In general, I don't think anybody else really cares about most of this stuff, but there is some useful code in there among the fluff and flair. There are a number of prototype and proof-of-concept type projects in there that I am not sure even work any more... so, I have some work to do. :-)

My GitHub Dashboard is located at: <a href="http://github.com/cjstehno">http://github.com/cjstehno</a>, just be warned, currently all of the code is in a state of flux.

Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[I have been consolidating all of my personal projects and prototypes trying to get everything setup on <a href="http://gitscm.org">Git</a> and <a href="http://github.com">GitHub</a>.]]></excerpt:encoded>
		<wp:post_id>688</wp:post_id>
		<wp:post_date>2010-02-21 13:01:24</wp:post_date>
		<wp:post_date_gmt>2010-02-21 19:01:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>project-consolidation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[Git]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="projects"><![CDATA[Projects]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Android Nook Reader</title>
		<link>http://coffeaelectronica.com/blog/2010/03/android-nook-reader/</link>
		<pubDate>Sun, 14 Mar 2010 15:57:39 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=695</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="attachment_697" align="alignright" width="100" caption="Link to eReader App"]<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2010/03/barcode-ereader.jpg"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2010/03/barcode-ereader.jpg" alt="" title="http://ereader.com/android" width="100" height="100" class="size-full wp-image-697" /></a>[/caption]I have found it a little odd that Barnes & Noble does not have an Android ebook reader considering the fact that the <a href="http://nook.com">nook</a> itself is an Android device. I would say that maybe they are waiting until they sell a certain number of nooks first, but they already have an iPhone reader app. The whole thing gets even more interesting when you find out that B&N owns <a href="http://ereader.com">eReader.com</a>, who has a reader for Android. Perhaps they are just in the process or re-branding it or there are some other odd licensing issues keeping them from taking the final step.

But, you can take that step yourself! Download the eReader Android app and install it on your phone (it's not in the Android market). You can then mount your phone via USB to your computer and add your nook ebooks (pdb files) to the ereader directory of your sdcard. The annoying part, well more annoying part, is that when you open the book for the first time you will need to enter the name and credit card information used to purchase it. It's your default card data at B&N. I wonder how bright an idea that is considering I tend to swap out the cards I use from time to time... could get interesting.

Anyway, once you enter your credentials you have full access to the ebook, just like reading it on your nook. I would not be surprised to find out that the ebooks on the two sites are exactly the same. I will have to look into it in more detail.

Happy e-reading!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>695</wp:post_id>
		<wp:post_date>2010-03-14 10:57:39</wp:post_date>
		<wp:post_date_gmt>2010-03-14 15:57:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>android-nook-reader</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="nook"><![CDATA[nook]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java Hosting?</title>
		<link>http://coffeaelectronica.com/blog/2010/03/java-hosting/</link>
		<pubDate>Wed, 31 Mar 2010 23:11:35 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=700</guid>
		<description></description>
		<content:encoded><![CDATA[I love Java. I love the language. I love the JVM and I love the ever-increasing list of languages that run on the JVM. One thing that I really don't like is the high cost of hosting Java web applications. Yes, if you search around you can find some that say they provide Java hosting via Tomcat or Jetty, but unless you get a dedicated server you are not really getting much out of it and there tend to be a lot of limitations involved.

I pay about $72 annually for hosting, and with that I get very limited support for hosting Java web applications. Basically I get a shared Tomcat instance that I cannot configure or restart myself, which is pretty useless beyond very simple applications. I don't even have java command line access to run my own server from my account. In order to get true, useful, Java hosting you need to bump up your monthly cost quite a bit. Real Java hosting generally starts around $300 per year and goes up from there if you really need to get serious with it (adequate RAM, and JVM configurations). Google App Engine is on the right track but it's limiting; you are limited to JPA or JDO and not even the full power of either of those along with other limitations. Where is the affordable yet functional Java web hosting for the developer or hobbyist with no real budget?

I then decided to look into some of the other web development languages and found that Ruby (on Rails) has a lot of the same issues with good inexpensive hosting. That struck me as odd since I would think RoR would have lower memory and system requirements. I also looked into Python and found that there seems to be very few options available for it. The big winner in the hosting support I guess should come as no surprise... PHP. PHP has come standard with every hosting package I have ever had or have ever really looked into... at no extra cost. I guess this is why it remains to be so popular.

I think I will have to dig deeper into PHP for some of my personal web projects. If not that, I may have to look at setting up my own server outside my firewall, which just brings up all kinds of other problems.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>700</wp:post_id>
		<wp:post_date>2010-03-31 18:11:35</wp:post_date>
		<wp:post_date_gmt>2010-03-31 23:11:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-hosting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hosting"><![CDATA[Hosting]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sorting in JavaScript</title>
		<link>http://coffeaelectronica.com/blog/2010/04/sorting-in-javascript/</link>
		<pubDate>Mon, 12 Apr 2010 23:14:17 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=703</guid>
		<description></description>
		<content:encoded><![CDATA[Every now and then you need to sort something in JavaScript and though, it's not all that hard to do, it is not the best-documented feature. Here is a quick little summary of how to do it.

You call the sort function of an array with your comparator. A JavaScript comparator is just a function that returns -1, 0, or 1 depending on whether a is less than b, a is equal to b, or a is greater than b:

<code lang="javascript">
myarray.sort(function(a,b){
    if(a < b){
        return -1;
    } else if(a == b){
        return 0;
    } else { // a > b
        return 1;
    }
});
</code>

This is just an example, your function can base the comparison on whatever you want, but it needs to return -1,0,1. Say you had a set of custom JavaScript objects that you want sorted by age:

<code lang="javascript">
var people = [{name:'Bob',age:21}, {name:'Fred',age:34}, {name:'Dan',age:19}];
</code>

You could easily sort them using

<code lang="javascript">
people.sort(function(a,b){
    if(a.age < b.age){
        return -1;
    } else if(a.age == b.age){
        return 0;
    } else { // a > b
        return 1;
    }
});
</code>

Not too hard to do. It's actually very similar to the Java Comparator interface.]]></content:encoded>
		<excerpt:encoded><![CDATA[Every now and then you need to sort something in JavaScript and though, it's not all that hard to do, it is not the best-documented feature. Here is a quick little summary of how to do it.]]></excerpt:encoded>
		<wp:post_id>703</wp:post_id>
		<wp:post_date>2010-04-12 18:14:17</wp:post_date>
		<wp:post_date_gmt>2010-04-12 23:14:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sorting-in-javascript</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New Page and Updates</title>
		<link>http://coffeaelectronica.com/blog/2010/07/new-page-and-updates/</link>
		<pubDate>Wed, 21 Jul 2010 16:25:19 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=736</guid>
		<description></description>
		<content:encoded><![CDATA[In case you haven't noticed, I have added a new static page to this site. The <a href="http://coffeaelectronica.com/blog/software">Software </a>page will be a starting point for a list of my favorite and recommended software. It won't have any reviews, but it will be a general list of what I use and recommend. Reviews will come as I have time and energy for them.

If you are following along, you may have noticed that I have been pretty quiet for a few months. I have been in unemployment mode which tends to mean that I am spending most of my time combing through job sites, working on my "branding", and trying to keep from going crazy being stuck at home. 

I have a few post ideas that I will try to start working on and I hope that my new job will give me some good post ideas as well.

On the Android front... I am trying to get the SDK and development tools all setup on my 64-bit win7 box, but have run into issues. My intended updates to the CoffeaElectronica app are still pending; I may have to setup a virtual linux box or something to get a good environment setup again.

Also, the Wordpress 3 upgrade tweaked my theme settings a bit and I have not been able to figure out how to get my sidebar panels to look right yet.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>736</wp:post_id>
		<wp:post_date>2010-07-21 11:25:19</wp:post_date>
		<wp:post_date_gmt>2010-07-21 16:25:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-page-and-updates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Official Nook For Android</title>
		<link>http://coffeaelectronica.com/blog/2010/07/official-nook-for-android/</link>
		<pubDate>Thu, 22 Jul 2010 17:18:34 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=741</guid>
		<description></description>
		<content:encoded><![CDATA[After creating apps for every other platform, BN finally decided to create a full-featured <a href="http://www.barnesandnoble.com/u/nook-for-android/379002287/?">Android app</a> for reading their ebooks (ala nook). I came up with a work-around a few months ago (see <a href="http://coffeaelectronica.com/blog/2010/03/android-nook-reader/">Android Nook Reader</a>) but I never even used it because it was such a pain in the butt.

The BN Nook App works great. It syncs up nicely with your online account and let's you download your books and read them with a number of different fonts and font sizes. It does not seem to sync up your "last read" point as advertised, but maybe I am doing something wrong.

This will be great for when I am waiting around in waiting rooms or want to catch a quick read somewhere without needing to carry the nook itself. Bravo BN!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>741</wp:post_id>
		<wp:post_date>2010-07-22 12:18:34</wp:post_date>
		<wp:post_date_gmt>2010-07-22 17:18:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>official-nook-for-android</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="nook"><![CDATA[nook]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Android Tips: Astro and Dropbox</title>
		<link>http://coffeaelectronica.com/blog/2010/08/android-tips-astro-and-dropbox/</link>
		<pubDate>Sun, 15 Aug 2010 17:39:41 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=749</guid>
		<description></description>
		<content:encoded><![CDATA[After walking around with a myTouch Android phone for almost a year now, I figured I should share some of my tips.

<br /><strong>Email Attachments</strong>

The default behavior (at least on Android 1.6) for attachments in the Google Mail app is that you can attach photos to an email but no other type of file. Attaching photos is nice, but sometimes you want to send something other than a photo, like a document or music file. The <a href="http://www.appbrain.com/app/com.metago.astro">Astro</a> and <a href="http://www.appbrain.com/app/com.dropbox.android">Dropbox</a> applictions provide some nice additional capabilities, including email attachments: 

<br /><i>Astro</i>

The <a href="http://www.appbrain.com/app/com.metago.astro">Astro</a> file manager app provides a full-fledged file explorer for your Android phone. By installing this app you are also provided with an additional email attachment handler so that when you try and attach a file to your email you have the option of using Astro, which allows you to attach any file. You can also "share" files from Astro directly to create an email with the selected file.

<br /><em>Dropbox</em>

Another alternative is to sign up for <a href="http://dropbox.com">Dropbox</a> and install the <a href="http://www.appbrain.com/app/com.dropbox.android">Dropbox app</a> which allows you to "share" any file as a link to your dropbox or as an email attachment.

<br /><strong>File Sync-ing</strong>

These apps also add some nice file sync features.

<br /><em>Astro</em>

With Astro you can move files around your phone as you would expect from a file explorer; however, you can also install plugins that allow access to FTP servers, or other computers on your network. I was able to connect to my Networked Attached Storage and transfer files to and from my phone while it was connected to my wireless network.

<br /><em>Dropbox</em>

You can use dropbox to sync files between your phone and your dropbox-enabled computers. the nice part is that dropbox will not pull a file onto your phone unless you tell it to... the downside is that currently it has no built-in way that I have found to delete the local copy of a file while still keeping it in dropbox. I did figure out that you can use Astro to delete the file from the dropbox directory and it will still exist on the dropbox server. if you need it back you can just pull it back down. I have used this trick when I purchased Amazon music on my phone so that I could easily add it to my full collection.

The dropbox app is great for keeping files handy when you need them. while I was doing my job search I was able to keep resumes and other relevant documents available as needed and up to date and easily sharable.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>749</wp:post_id>
		<wp:post_date>2010-08-15 12:39:41</wp:post_date>
		<wp:post_date_gmt>2010-08-15 17:39:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>android-tips-astro-and-dropbox</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Finding Your Center</title>
		<link>http://coffeaelectronica.com/blog/2010/08/finding-your-center/</link>
		<pubDate>Sun, 29 Aug 2010 03:47:30 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=760</guid>
		<description></description>
		<content:encoded><![CDATA[Way back when I was in high school my typing teacher (yes, on a mechanical typewriter) taught us how to center blocks of text on a page. This has been a useful skill as I got into web development and programming as not everything has a built-in "center" alignment property. 

I have never been asked how to do this, so it may be common knowledge, but I thought I would share anyway since I have not been blogging much. Basically, think about your viewing area as a page and what you are centering as a rectangle drawn on that page. Now fold that page in half and you will see that half of your rectangle is contained on half the page... makes sense. You are finding the horizontal position (x coordinate) of the left edge of your rectangle by subtracting half of its width from half the width of the page:

<code>x = [page_width]/2 - [item_width]/2</code>

or after a little simplification

<code>x = ( [page_width] - [item_width] )/2</code>

This is exactly the same way you would center vertically. The equation from above expressed with more meaningful terms:

<code>y = ( [page_height] - [item_height] )/2</code>

Now to bring this into the Java world you can center a JFrame in the center of your monitor screen:

<code lang="java">
Dimension frameSize = new Dimension(800,600);
Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
int x = (screenSize.width-frameSize.width)/2;
int y = (screenSize.height-frameSize.height)/2;
frame.setBounds( x, y, frameSize.width, frameSize.height );
</code>

Not too bad at all, but it has always surprised me that Swing does not provide helper methods to center components inside of other components.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>760</wp:post_id>
		<wp:post_date>2010-08-28 22:47:30</wp:post_date>
		<wp:post_date_gmt>2010-08-29 03:47:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>finding-your-center</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Converting Numbers to Ranges: Groovy</title>
		<link>http://coffeaelectronica.com/blog/2010/10/ranges-groovy/</link>
		<pubDate>Sat, 09 Oct 2010 17:39:20 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=765</guid>
		<description></description>
		<content:encoded><![CDATA[A while back, I worked out a coding exercize (see <a href="http://coffeaelectronica.com/blog/2009/11/converting-numbers-to-ranges-java/">Converting Numbers to Ranges: Java</a>) where you convert a set of string input numbers and convert them to a more condensed range format, such as

<pre>1 2 3 6 8 10 11 12 15 --becomes--> 1-3, 6, 8, 10-12, 15.</pre>

I thought about doing a version of this with Groovy at the time, but it didn't seem like it would be all that different from that Java version. Well, having been working with Groovy a lot more lately, I decided to give it a whirl and here is what I came up with:

<code lang="groovy">
def rangeize( items ){
    def hold, str = ''
    
    items.eachWithIndex { it,i->
        if( (it as int)+1 == (items[i+1] as int) ){
            if( !hold ) hold = it
        } else {
            str += hold ? "$hold-${it}, " : "${it}, "
            hold = null
        }
    }
    
    str[ 0..(str.length()-3) ] + '.' 
}
</code>

The problem states that the input will be in order and have no duplicate entries, so I don't need to account for those.

Other than some slightly simplified syntax, it's not all that much different from the Java version, thought it's a bit more condensed.

I kept the string to int conversions inline on this version as I am still up in the air about how much overhead that would really add. You could just as easily convert the string array before doing the grouping.

Always fun to practice.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>765</wp:post_id>
		<wp:post_date>2010-10-09 12:39:20</wp:post_date>
		<wp:post_date_gmt>2010-10-09 17:39:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ranges-groovy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Converting Numbers to Ranges: Clojure</title>
		<link>http://coffeaelectronica.com/blog/2010/10/converting-numbers-to-ranges-clojure/</link>
		<pubDate>Sun, 10 Oct 2010 17:40:05 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=768</guid>
		<description></description>
		<content:encoded><![CDATA[Ok, in a wild mood, I decided to go back and try some <a href="http://clojure.org">Clojure</a> again to work out another implementation of the number range problem. I think Clojure needed some time to sink into my brain, as it seemed to make more sense this time around. Working out the solution for this was not all that bad:

<code lang="clojure">
(defn rangify [items]
  (loop [its items holder nil outp ""]
    (if (empty? its)
      outp
      (if (= (+ (first its) 1) (first (rest its)) )
        (if (nil? holder)
          (recur (rest its) (first its) outp )
          (recur (rest its) holder outp )
        )
        (if (nil? holder)
          (recur (rest its) nil (print-str outp (first its) "," ) )
          (recur (rest its) nil (print-str outp holder "-" (first its) "," ) )
        )
      )
    )
  )
)
</code>

I am sure that there is still a lot that can be done to make this cleaner and more efficient. Even now it does not fully satisfy the criteria since the output is not quite right, as shown below:

<pre>
ranges=> (rangify [1 2 3 4 5 6 10])
" 1 - 6 , 10 ,"
</pre>

After a little more thought, I was able to move some of the function calls around and merge them into the recur calls to simplify and tighten the code down a bit so that we end up with:

<code lang="clojure">
(defn rangify [items]
  (loop [its items holder nil outp ""]
    (if (empty? its)
      outp
      (if (= (inc (first its)) (first (rest its)) )
        (recur (rest its) (if holder holder (first its) ) outp )
        (recur (rest its) nil
          (if holder
            (print-str outp holder "-" (first its) "," )
            (print-str outp (first its) "," )
          )
        )
      )
    )
  )
)
</code>

This, actually is a bit cleaner and easier to read, but it sure seems like an odd language. I decided to put out what I have and come back to finish it later. It was a fun exercise.]]></content:encoded>
		<excerpt:encoded><![CDATA[Ok, in a wild mood, I decided to go back and try some <a href="http://clojure.org">Clojure</a> again to work out another implementation of the number range problem. I think Clojure needed some time to sink into my brain, as it seemed to make more sense this time around. Working out the solution for this was not all that bad.]]></excerpt:encoded>
		<wp:post_id>768</wp:post_id>
		<wp:post_date>2010-10-10 12:40:05</wp:post_date>
		<wp:post_date_gmt>2010-10-10 17:40:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>converting-numbers-to-ranges-clojure</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Obsessed With Ranges</title>
		<link>http://coffeaelectronica.com/blog/2010/10/obsessed-with-ranges/</link>
		<pubDate>Sat, 16 Oct 2010 14:06:53 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=772</guid>
		<description></description>
		<content:encoded><![CDATA[Okay, I had drafts for three more postings of different solutions to the Home on the Range problem mentioned in <a href="http://coffeaelectronica.com/blog/?s=ranges">earlier postings</a>. I decided that I need to merge them into one post to save you all from being overly spammed by odd little programming snippets.

First off, we have an alternate Groovy solution based on the recursive approach which was necessary for the Clojure implementation:

<code lang="groovy">
def iter( items, holder, str ){
    if( items.isEmpty() ) return "${str[0..(str.length()-3)]}."
	
	def it = items.remove(0) as int
	if( it+1 == (items[0] as int) ){
		iter( items, holder ?: it, str )
	} else {
		iter( items, null, holder ? "$str$holder-$it, " : "$str$it, " )
	}
}

def rangize( items ){
    iter( items, null, '' )
}
</code>

I had fun with this one as I got to play with some Groovy syntax sugar; however, I was unable to do it in a single function definition, so you get two.

Next, we have a solution done using Ruby, which I was surprised to see that I had not previously done.

<code lang="ruby">
def rangize( items )
	holder, str = nil, ''
	for i in (0...items.size())
		if items[i].to_i + 1 == items[i+1].to_i then
			if !holder then holder = items[i] end
		else
			str << (holder ? "#{holder}-" : '') << "#{items[i]}, "
			holder = nil
		end
	end
	str.chomp(', ') << '.'
end
</code>

Well, after working on it I realized why I didn't bother before... other than a few Ruby syntax items, it's not all that interesting.

The final one is the kicker. I got a little crazy and decide to do an implementation of the recursive approach using browser-based JavaScript:

<code lang="javascript">
function rangize(nums){
	function iter(items, holder, str){
		if(items.length == 0) return str;
		
		var itm = items[0];
		if( (parseInt(itm)+1) == parseInt(items[1]) ){
			return iter( items.slice(1), holder ? holder : itm, str);
		} else {
			return iter( items.slice(1), null, str + (holder ? holder+ '-' + itm : itm) + ', ' );
		}
	}
	var str = iter(nums,null,'');
	return str.slice(0, str.length-2) + '.';
}
</code>

Yes, you can nest functions inside of functions in JavaScript... I never realized that. The implementaion is not quite as clean as some of the others since JavaScript lacks some of the fancy string manipulation syntax; howerver, it really helps to show that JavaScript is a fairly robust and powerful language in itself.

For better or worse, you could add some additional helper functions (also nested) to clean up the iteration a bit, though it does make it a bit more "busy" when you first look at it:

<code lang="javascript">
function rangize(nums){
	function eqNxt( items ){ return (parseInt(items[0])+1) == parseInt(items[1]); }
	
	function endcap( str ){ return str.slice(0, str.length-2) + '.'; }			
	
	function iter(items, holder, str){
		if(items.length == 0) return str;
		
		return iter( 
			items.slice(1), 
			eqNxt(items) ? (holder ? holder : items[0]) : null, 
			eqNxt(items) ? str : (str + (holder ? holder+ '-' + items[0] : items[0]) + ', ')
		);
	}
	return endcap( iter(nums,null,'') );
}
</code>

Here is the whole code for the HTML test page:

<code lang="html">
<html>
	<head>
		<title>Home on The Range</title>
		<script type="text/javascript">
			function rangize(nums){
				function iter(items, holder, str){
					if(items.length == 0) return str;
					
					var itm = items[0];
					if( (parseInt(itm)+1) == parseInt(items[1]) ){
						return iter( items.slice(1), holder ? holder : itm, str);
					} else {
						return iter( items.slice(1), null, str + (holder ? holder+ '-' + itm : itm) + ', ' );
					}
				}
				var str = iter(nums,null,'');
				return str.slice(0, str.length-2) + '.';
			}
		</script>
	</head>
	<body onload="alert(rangize(['1','2','3','5','7','8','9','10','13']))"></body>
</html>
</code>

I think I have burned this coding puzzle to the end, so hopefully I can move on to something else... any suggestions?
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>772</wp:post_id>
		<wp:post_date>2010-10-16 09:06:53</wp:post_date>
		<wp:post_date_gmt>2010-10-16 14:06:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>obsessed-with-ranges</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>From Junk Box to Jukebox in a Couple Hours</title>
		<link>http://coffeaelectronica.com/blog/2010/10/from-junk-box-to-jukebox-in-a-couple-hours/</link>
		<pubDate>Sun, 17 Oct 2010 14:07:04 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=775</guid>
		<description></description>
		<content:encoded><![CDATA[I finally got tired of griping about not having enough space on my phone to store all of my music, and not wanting to pay for one of the music cloud storage services... so I decided to bite the bullet and setup my own using <a href="http://ubuntu.com">Ubuntu Server</a>, <a href="http://subsonic.org">SubSonic Music Streamer</a> and its Android app. It only took a couple hours, most of which was baby-sitting installations, and now I am able to listen to any/all of my music whenever and wherever I want; it's quite nice.

The steps are pretty straight forward, but going into this process I must make it clear that I am not an expert network/server administrator, I am a developer, therefore if this process causes you or your equipment any harm in any way, sorry, but it's not my fault. Continue at your own risk.

First, you need a computer to work with. I had an old Dell desktop that is about four or five years old and it is working nicely. Hook up a keyboard, mouse and monitor to the box... if it's an old desktop box you should have all the connections you need. You will also need to connect the box to your network.

It almost goes without saying that you will need internet access of at least DSL, but really I would not do this with anything less than a high-speed cable internet connection.

[caption id="attachment_777" align="alignleft" width="200" caption="Ubuntu.com"]<a href="http://ubuntu.com"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2010/10/ubuntu-page.png" alt="" title="ubuntu-page" width="200" height="99" class="size-full wp-image-777" /></a>[/caption]Download <a href="http://www.ubuntu.com/server">Ubuntu 10.10 Server</a> (or whatever the most current version is when you read this). Make sure that you are downloading the server version, not the desktop. Also make sure that you download the appropriate version for your system, 32- or 64-bit. I had to use 32-bit since it was an old desktop box. 

Burn the .iso file you downloaded to a CD (I recomment <a href="http://www.imgburn.com/">ImgBurn</a> if you don't have a favorite image buring application). Once you have the CD created, pop it into the box you are building and boot from it. You may have to fiddle with your boot order in your bios, but the CD is bootable.

Once the Ubuntu installation menu comes up, just follow the instructions. A couple items to be aware of: You will want to enable the automatic security updates so that you don't have to bother with it yourself. Also, you will come to a server installation screen (after the restart I think)... at this point I selected LAMP server, Tomcat server and OpenSSH server. The SSH server is required for this, though the others are not; I plan on adding more to this box so I wanted to have the servers ready to go.

Once the installation is done, disconnect the keyboard, mouse and monitor, but leave the box running. You now have a nice clean Linux web server to play with.

I recommend giving the new server box a dedicated IP address on your network so that you don't need to keep track of it. This is gererally very specific to your router, so I can't really go into it here.

From your desktop box, laptop, whatever, connect to the new server using your favorite SSH client (for windows you can use <a href="http://cygwin.com">Cygwin</a> or <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">Putty</a>).

All of my music is on a NAS on my local network, so I had to create a mount of the music directory on the server box. There is a nice wiki article about how to do this, <a href="https://wiki.ubuntu.com/MountWindowsSharesPermanently">Mount Windows Shares Permanently</a> so that's easy enough.

[caption id="attachment_779" align="alignright" width="200" caption="Subsonic.org"]<a href="http://subsonic.org"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2010/10/subsonic-page.png" alt="" title="subsonic-page" width="200" height="123" class="size-full wp-image-779" /></a>[/caption]Now download the deb installer file from <a href="http://www.subsonic.org/">SubSonic</a> and follow the installation instructions. There are also some additional packages they recommend installing. I did.

I eventually want to have SubSonic use the default servers on the box, but this installation method seemed to be the fastest one to get a server up and running.

Once you have SubSonic installed you will need to create a directory for your playlists, "/var/playlists" by default.

Now that the server is running, go ahead and login and change the admin password and set the music and playlist locations. I created a second user to user for myself that did not have admin permissions. Make sure that you can see a list of your music artists down the left hand side and you are ready to go... at least for access on your own network.

[caption id="attachment_781" align="alignleft" width="200" caption="Lifehacker.com"]<a href="http://lifehacker.com/127276/geek-to-live--how-to-access-a-home-server-behind-a-routerfirewall"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2010/10/lifehacker-page.png" alt="" title="lifehacker-page" width="200" height="124" class="size-full wp-image-781" /></a>[/caption]In order to have access to SubSonic from the outside world, you need to setup port forwarding on your router to map one of the external ports to the server and port that your SubSonic instance is running on. Again, this is router-specific, but <a href="http://lifehacker.com">Lifehacker</a> has a good overview in the article "<a href="http://lifehacker.com/127276/geek-to-live--how-to-access-a-home-server-behind-a-routerfirewall">How to Access a Home Server Behind a Router Firewall</a>".

Once you have access from the outside world, you can install the Android or iPhone apps for SubSonic and play your music while you are away from home. The Android app is quite good. I created two profiles, one for home when I can use my local wireless network, and another for access when I am away from my network... helps to keep the bandwidth down. Using the phone is also a nice way to test out the external interface. Turn off your wifi antenna and connect via 3G. 

One concern I have about running my own server is power consumption. The box I am using was a desktop box and not really made to conserve energy. I am looking into ways of setting up smart power usage, sleeping, etc, but that will come in another posting. For now I am going to test out the actual power consuption using one of those <a href="http://www.thinkgeek.com/gadgets/travelpower/7657/">Killawatt</a> plug-in wattage meters so that I can see what I am doing to my monthly power bill. 

One thought I had is that if the power consumption is too high, I might look into building a really low-power box with an atom processor and solid-state drive or something else really bare bones and cheap.

I have a few other projects in mind for this now that I have a server running, though I don't think I will be moving my blog hosting there any time soon, but you never know.

If any of this is too vague, please let me know and I can add more detail. This is intended for users with minimal Linux, networking, and hardware experience, but sometimes I take more for granted than I realize.

Good luck and have fun!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>775</wp:post_id>
		<wp:post_date>2010-10-17 09:07:04</wp:post_date>
		<wp:post_date_gmt>2010-10-17 14:07:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>from-junk-box-to-jukebox-in-a-couple-hours</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="servers"><![CDATA[Servers]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java and IPv6</title>
		<link>http://coffeaelectronica.com/blog/2010/10/java-and-ipv6/</link>
		<pubDate>Sun, 24 Oct 2010 15:54:23 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=788</guid>
		<description></description>
		<content:encoded><![CDATA[In case you have not run into it yet, <a href="http://en.wikipedia.org/wiki/IPv6">IPv6</a> is creeping into our lives. Recently I had to work on functionality that had to support the storing of both IPv4 and IPv6 in a database record... and it's actually pretty easy.

Let's say we have tow IP addresses, one of each type:

<code>
157.166.224.26
1080:0:0:0:8:800:200C:417A</code>

The first thing we need to do is parse the string values into <tt>java.net.InetAddress</tt> objects.

<code lang="java">InetAddress inet = InetAddress.getByName( ipstr );</code>

which works in either case. From there you may want to determine which type of address you are working with. The only way that I found (though I didn't spend all that long) was to do an instance check:

<code lang="java">
if( inet instanceof Inet6Address ){ 
	// you have an IPv6 address
} else if( inet instanceof Inet4Address ){
	// you have an IPv4 address
} else {
	// I dont know what you have
}
</code>

From there you will need to convert the InetAddress object into bytes for storage. You could store the addresses as strings, but you end up more dependant on hacky format recognition tricks, and the byte conversion is nice and pre-built for you:

<code lang="java">byte[] bytes = inet.getAddress();</code>

Now you are ready to store the address in the database. Without going into all the db-related code you end up with:

<code lang="java">statement.setBytes( 1, bytes );</code>

You could just as easily write the bytes to an output stream or other storage format.

Once you have the address stored somewhere, you need to pull it out again. First you need to read the bytes from your storage location. Assuming a database, you get something like:

<code lang="java">byte[] inbytes = resultSet.getBytes( 1 );</code>

With these bytes you can create an InetAddress again,

<code lang="java">InetAddress inetIn = InetAddress.getByAddress( inbytes );</code>

From there, a nice <tt>getHostAddress()</tt> call will get you your formatted IP address string, for both IPv4 and IPv6. Notice there is no code specific to either type. The instance checking is only required if you want to know specifically which type you have... and there may be a better way to do that, I didn't come across one.

One oddity I found is that IPv4 addresses mapped to IPv6 addresses can get a little strange depending on how your application handles them; the InetAddress class parses them fine, but converts them to IPv4 addresses rather than noting that they are mapped addresses. Not a big deal, but something to keep in mind.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>788</wp:post_id>
		<wp:post_date>2010-10-24 10:54:23</wp:post_date>
		<wp:post_date_gmt>2010-10-24 15:54:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-and-ipv6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MyTouch Not Updating or Installing Apps</title>
		<link>http://coffeaelectronica.com/blog/2010/10/mytouch-not-updating-or-installing-apps/</link>
		<pubDate>Thu, 28 Oct 2010 01:05:28 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=794</guid>
		<description></description>
		<content:encoded><![CDATA[After the latest Android Market app update about a week ago I was unable to install or update any apps, which is kind of important. I let it go since the MyTouch Froyo update is in progress; I figured if the Froyo update didn't fix it, I would take action then. It started to annoy me as I had numerous apps to update and no way to do so.

I searched the T-Mobile forums and found one solution that supposedly works... apparently I was not the only one with this problem. The solution was to use the factory reset option which clears out all your apps and updates back to the base install of the Android version you are running on. This seemed a bit extreme but I considered it.

As I was poking around I found that the Market app had a button to "Remove Updates", which only appears when it has been updated (since I can't see it now).

<blockquote>Settings > Applications > Manage Applications > Market</blockquote>

If you press the "Remove Updates" button it will remove the recent Market update and put you back to the vanilla Market app that came with Android 1.6. I figured trying this would be worth a shot since the next step would have been the full reset, which I did not look forward to. I tried removing the updates and was able to use the Market app like before with no issues.

I am still waiting for my Froyo update so I am not sure if the Market app has issues after updating.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>794</wp:post_id>
		<wp:post_date>2010-10-27 20:05:28</wp:post_date>
		<wp:post_date_gmt>2010-10-28 01:05:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mytouch-not-updating-or-installing-apps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>79</wp:comment_id>
			<wp:comment_author><![CDATA[Christopher J. Stehno]]></wp:comment_author>
			<wp:comment_author_email>chris.stehno@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://ChrisStehno.info</wp:comment_author_url>
			<wp:comment_author_IP>192.65.45.25</wp:comment_author_IP>
			<wp:comment_date>2010-10-28 08:27:59</wp:comment_date>
			<wp:comment_date_gmt>2010-10-28 13:27:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[On a follow-up note. The Market app updated again last night; however, I am still able to update and install apps. It seems like this is not an issue with the Market app itself but maybe of some installation problem... or maybe they fixed the app and the latest update is fixed.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>84</wp:comment_id>
			<wp:comment_author><![CDATA[Victoria]]></wp:comment_author>
			<wp:comment_author_email>victoriaboo.angel@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.245.14.1</wp:comment_author_IP>
			<wp:comment_date>2010-11-11 22:56:21</wp:comment_date>
			<wp:comment_date_gmt>2010-11-12 04:56:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This was very helpful to me! Just wanted you to know (:]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Tour de Mock 5: Groovy</title>
		<link>http://coffeaelectronica.com/blog/2010/10/tour-de-mock-5-groovy/</link>
		<pubDate>Fri, 29 Oct 2010 21:39:47 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=798</guid>
		<description></description>
		<content:encoded><![CDATA[I decided to add another post to my series of mocking comparisons (see <a href="http://coffeaelectronica.com/blog/?s=Tour+de+Mock">Tour de Mock</a>). I have been working a lot with <a href="http://groovy.codehaus.org">Groovy</a> and felt that it would make an interesting addition considering the language provides a rich mocking ability without any additional libraries required.

The @Before method shows the flexibility of Groovy right away with the mocking of the service interface as well as the ServletContext and ServletConfig interfaces:

<code lang="groovy">
@Before
void before(){
	emailListService = [
		getListByName:{ name->
			if( 'foolist' == name ){ return LIST }
			throw new IOException()
		}
	] as EmailListService

	def servletContext = [
		getAttribute:{ key->
			assertEquals EmailListService.KEY, key
			emailListService
		}
	] as ServletContext

	def servletConfig = [ getServletContext:{servletContext} ] as ServletConfig

	emailListServlet = new EmailListServlet()
	emailListServlet.init servletConfig
}
</code>

Groovy allows you to take a map of closures keyed with the method name and cast it as an instance of an interface, basically built-in mocking.

The first test is where we test the doGet method with no listName parameter:

<code lang="groovy">
@Test(expected=IOException.class)
void doGet_without_list(){
	def request = [
		getParameter:{ pname->
			assertEquals 'listName', pname
			null
		}
	] as HttpServletRequest

	emailListServlet.doGet request, [] as HttpServletResponse
}
</code>

If you don't use Groovy much, these mocked instances may seem less readable than some of the other mocking APIs; however, with a little practice you can really see the broad scope of mocking capabilities it has.

The test with listName data shows a successful result:

<code lang="groovy">
@Test
void doGet_with_list(){
	def request = [
		getParameter:{ pname->
			assertEquals 'listName', pname
			'foolist'
		}
	] as HttpServletRequest

	def outcalls = [].addAll( LIST )
	PrintWriter.metaClass.println = { out-> assertEquals outcalls.remove(0), out }

	def response = [ getWriter:{ new PrintWriter(new StringWriter()) } ] as HttpServletResponse

	emailListServlet.doGet request, response
}
</code>

where we can also see the generally tricking mocking of the PrintWriter and its ordered sequence of calls. In this case you are working with simple code rather than any additional API functionality. The list of expected email strings is provided in the order they are to be called and the mock PrintWriter verifies that the current call is the same as the next expected value.

The whole test case is shown below:

<code lang="groovy">
package com.stehno.mockery;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse

import static junit.framework.Assert.*

import org.junit.After
import org.junit.Test
import org.junit.Before;

import com.stehno.mockery.service.EmailListService;

class EmailListServlet_GroovyMockTest {

	private def LIST = ['larry@stooge.com','moe@stooge.com','curley@stooge.com']
	private def emailListServlet
	private def emailListService

	@Before
	void before(){
		emailListService = [
			getListByName:{ name->
				if( 'foolist' == name ){ return LIST }
				throw new IOException()
			}
		] as EmailListService

		def servletContext = [
			getAttribute:{ key->
				assertEquals EmailListService.KEY, key
				emailListService
			}
		] as ServletContext

		def servletConfig = [ getServletContext:{servletContext} ] as ServletConfig

		emailListServlet = new EmailListServlet()
		emailListServlet.init servletConfig
	}

	@Test(expected=IOException.class)
	void doGet_without_list(){
		def request = [
			getParameter:{ pname->
				assertEquals 'listName', pname
				null
			}
		] as HttpServletRequest

		emailListServlet.doGet request, [] as HttpServletResponse
	}

	@Test
	void doGet_with_list(){
		def request = [
			getParameter:{ pname->
				assertEquals 'listName', pname
				'foolist'
			}
		] as HttpServletRequest

		def outcalls = [].addAll( LIST )
		PrintWriter.metaClass.println = { out-> assertEquals outcalls.remove(0), out }

		def response = [ getWriter:{ new PrintWriter(new StringWriter()) } ] as HttpServletResponse

		emailListServlet.doGet request, response
	}

	@After
	void after(){
		emailListServlet = null
		emailListService = null
	}
}
</code>

I found Groovy to be a very useful mocking tool and would recommend it, especially if you are already using Groovy in your project. Beyond this basic functionality there are also some mocking APIs written for Groovy that add additional features or provide simpler mocking capabilities.

All of the source for this series of posts can be found at <a href="http://github.com">GitHub</a> in my <a href="http://github.com/cjstehno/TourDeMock">TourDeMock</a> repo. Or, you can just go <a href="http://github.com/cjstehno/TourDeMock/archives/master">download it</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>798</wp:post_id>
		<wp:post_date>2010-10-29 16:39:47</wp:post_date>
		<wp:post_date_gmt>2010-10-29 21:39:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tour-de-mock-5-groovy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[Testing]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>More Fun with the Jukebox</title>
		<link>http://coffeaelectronica.com/blog/2010/10/more-fun-with-jukebox/</link>
		<pubDate>Sat, 30 Oct 2010 14:36:06 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=802</guid>
		<description></description>
		<content:encoded><![CDATA[I wanted to post a quick follow-up about the <a href="http://coffeaelectronica.com/blog/2010/10/from-junk-box-to-jukebox-in-a-couple-hours/">home jukebox server</a> I detailed recently. I have done my power usage testing and here is what I got

<blockquote>Between 10/22/2010 0654 and 10/16/2010 1010 the server used 6.38 kilowatt-hours.</blockquote>

After some quick Groovy-based calculation:

<code lang="groovy">
def kwh = 6.38, kwhcost = 0.12
def duration /* days */ = (((time('10/22/2010 06:54') - time('10/16/2010 10:10')) / 1000) / 3600) / 24
def costPerDay = (kwh * kwhcost)/duration
def costPerMonth = costPerDay * 30
def time( d ){ new java.text.SimpleDateFormat('MM/dd/yyyy HH:mm').parse( d ).getTime()}
def money( m ){ new java.text.DecimalFormat('$0.00').format( m )}
println "${money(costPerDay)}/day ==> ${money(costPerMonth)}/month"
</code>

I found that the server uses roughly $0.13/day or $3.93/month on average based on the time duration I tested in which the server was under normal usage. Obviously, this number is very dependent on the system you build your server with. Given some of the new Atom-based boxes that are available, you could probably really cut that cost down even more.

If you consider that most hosting with any useful functionality is at least $3-5 per month, and a lot of the cloud-based services that are coming out are in the range of $5-10 per month... $3-5 per month for your own server with unlimited possibilities is not bad at all. Also there is one cost-cutting measure you can do with your own server that you cannot do with hosting... turn it off.

Finally, I also found a useful tool for working with the server. If you have an Android phone you can install <a href="http://code.google.com/p/connectbot/">ConnectBot</a> which gives you SSH shell access to your server. I don't have my SSH port forwarded from the router so this only works inside my home network via wireless, but ConnectBot makes it very easy to check on the status of the box, do a shutdown or restart the web server without having to fire up your desktop box.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>802</wp:post_id>
		<wp:post_date>2010-10-30 09:36:06</wp:post_date>
		<wp:post_date_gmt>2010-10-30 14:36:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-fun-with-jukebox</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="post_tag" nicename="servers"><![CDATA[Servers]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Out of Print</title>
		<link>http://coffeaelectronica.com/blog/2010/06/out-of-print/</link>
		<pubDate>Wed, 02 Jun 2010 14:33:02 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=808</guid>
		<description></description>
		<content:encoded><![CDATA[As I have delved deeper into the wonderful world of eBook reading I have stumbled upon an interesting dilemma that will eventually plague all of us e-converts... "out of print" books. I am an almost fanatical lover of classic science fiction books, Brunner, Heinlein, Asimov, Van Vogt, Aldiss and others line my bookshelves with weathered and tattered spines and yellowing pages full of exotic stories about other places and times. I love these authors, but they are hard to find, even in used book stores, as most of them have been out of print circulation since the 1970's. So, I have had to comb through used book stores and some on-line sites to get my fix.

But, wait, it's 2010 and eBooks are starting to take hold. Wouldn't it be nice if the copyright holders of these older novels allowed them to be produced as eBooks. I would think that the production costs would be minimal and then once you have it digital, it's all gravy from there. It's not like with a physical book where you have to print them, bind them, ship them and then store them in hopes that there are more people like me out there who want to buy them. No, this would be a win-win situation. Get a nice digital copy and put it up for sale in an e-reader format, via Amazon or Barnes &amp; Noble. With a little publicizing there is no way you can tell me they would not sell enough to make a profit on them. Like I said earlier, these are books and stories that have been out of print and out of circulation for decades. Whole new generations of readers could now download them and enjoy them... as well as other fanatics like myself.

To me it seems that "out of print" should no longer have any meaning. In the digital world, there is no concept of being out of print or unavailable.

I have started toying with the idea of scanning in some of my old copies, for my own digital usage; however, this would be a destructive process as you would have to take the book apart to scan each page. As my old books sit getting more brittle and the pages more yellowed, I start to consider these things more often.

I wonder if anyone makes a double sided scanner.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>808</wp:post_id>
		<wp:post_date>2010-06-02 09:33:02</wp:post_date>
		<wp:post_date_gmt>2010-06-02 14:33:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>out-of-print</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ExtJS Application Development 1: Introduction</title>
		<link>http://coffeaelectronica.com/blog/2010/11/extjs-application-development-1-introduction/</link>
		<pubDate>Sun, 28 Nov 2010 16:38:00 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=812</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://sencha.com/products/js">ExtJS</a> is an awesome JavaScript user interface and application framework developed by <a href="http://sencha.com">Sencha</a> with both commercial and Open Source license options. The one thing I have generally found lacking is their documentation. Don’t get me wrong, their API docs are amazingly helpful, and with a little poking around coupled with trial and error their tutorials and usage documentation are useful, but they often fall short or are out of date. I would like to try and fill in some of the gaps to help bring the learning curve under control.

After working with ExtJS both at home and at work for the past few months, I figured it would be nice to pull together some of what I have found and/or learned to create some good starting point documentation. This was originally going to be a single long blog post; however, as I got into it, I found that I could not really do it justice without breaking it up into a few smaller posts so as to be more digestible to the reader. The examples and discussion here based on my research and use of ExtJS. There may be other ways of doing this, even better ones. If so, feel free to let me know about the better alternatives.

Going forward, I make some general assumptions:
<ul>
	<li>you have a pretty good understanding of JavaScript and some of its more advanced features.</li>
<li>you have poked around the ExtJS API docs.</li>
<li>you have a basic idea of how to instantiate and configure the ExtJS components. If you don’t, you will want to read through some of the <a href="http://dev.sencha.com/deploy/dev/examples/">Samples</a> and their source provided on the Sencha site.</li>
</ul>

The source code used in this article can be found in my GitHub repository at <a href="https://github.com/cjstehno/extjs-demo">extjs-demo</a>. I will tag the ending point of each posting so that you can revert back to the various "save points" as we progress through the demo.

Stay tuned for "ExtJS Application Development 2: Setup"...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>812</wp:post_id>
		<wp:post_date>2010-11-28 10:38:00</wp:post_date>
		<wp:post_date_gmt>2010-11-28 16:38:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>extjs-application-development-1-introduction</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="extjs"><![CDATA[ExtJS]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ExtJS Application Development 2: Setup</title>
		<link>http://coffeaelectronica.com/blog/2010/11/extjs-application-development-2-setup/</link>
		<pubDate>Tue, 30 Nov 2010 00:41:13 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=817</guid>
		<description></description>
		<content:encoded><![CDATA[Continuing on from "<a href="http://coffeaelectronica.com/blog/2010/11/extjs-application-development-1-introduction/">ExtJS Application Development 1: Introduction</a>"...

Let’s create a project directory called “ext-demo”, with a sub-directory called “js”. Download the <a href="http://www.sencha.com/products/js/">ExtJS</a> library and copy the unzipped directory into your “js” directory. Your ExtJS library directory will most likely be named with the version number. You can leave it as is, or remove the version name, as we will do so that the directory is simply named “ext”.

Some of the files in the ExtJS package are not really needed by a deployment. You can delete the following files and folders

<pre>/extdemo/js/ext/examples
/extdemo/js/ext/test
/extdemo/js/ext/docs
/extdemo/js/ext/src
/extdemo/js/ext/welcome
/extdemo/js/ext/index.html
/extdemo/js/ext/INCLUDE_ORDER.txt</pre>

Now we have ExtJS installed and almost ready to go. To finish off you need to configure your pages to use it. 

Add an index.html file to the root directory of your project and open it in your editor. Create the minimal ExtJs launch page by starting out with the template given by the Basic Page Setup tutorial, which we can trim that down to:

<code lang="html">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<link rel="stylesheet" type="text/css" href="js/ext/resources/css/ext-all.css">

		<!-- Include here your own css files if you have them. -->

		<script type="text/javascript" src="js/ext/adapter/ext/ext-base.js"></script>
		<script type="text/javascript" src="js/ext/ext-all-debug.js"></script>

		<!-- Include your application script files -->

		<title>Ext Demo</title>
	</head>
	<body></body>
</html>
</code>

To this, add your application script include right after the ExtJS includes.

<code lang="html"><script type=”text/javascript” src=”js/application.js”></script></code>

This will be your entry point to ExtJS development. Open the application.js file and add the following:

<code lang="JavaScript">
// Path to the blank image must point to a valid location on your server
Ext.BLANK_IMAGE_URL = 'js/ext/resources/images/default/s.gif';
Ext.onReady(function() {
    alert("Hello ExtJS!");
});
</code>

Now, when you run the index.html page in your browser, you will see the obligatory “Hello World” application for ExtJS.

Since ExtJS has such a rich set of widgets, let’s make this into a bit more interesting... just a bit. Let’s replace the alert message box with something more Ext-y:

<code lang="JavaScript">
var win = new Ext.Window({
	title:'Ext Demo',
	html:"<div style='padding:25px;text-align:center;font-size:20pt;font-weight:bold;'>Hello ExtJS!</div>"
});
win.show();</code>

This creates a new window (dialog) with the given title and html content. Now when you refresh the page, you get something more attractive.
[caption id="attachment_820" align="alignleft" width="249" caption="ExtJS Says Hello."]<img src="http://coffeaelectronica.com/blog/wp-content/uploads/2010/11/hello_ext.png" alt="" title="ExtJS Says Hello" width="249" height="136" class="size-full wp-image-820" />[/caption]
This window is movable, resizable, and non-modal. With a few additional properties, we can make it fixed, non-resizable, and modal. Just add the following config options after the html property (be sure to add a comma to the end of the html line):

<code lang="JavaScript">draggable:false,
modal:true,
resizable:false</code>

You can do a lot more than we are going into here; you will have to poke around the docs and samples on your own for more information.

For the purpose of example, let’s say we want to extend this code to create a simple "messagae of the day" modal pop-up window that will show users some predefined message. In order to implement this we will make some changes to our little hello world window:

<code lang="JavaScript">
var messagePanel = new Ext.Panel({
	autoLoad:'message.html',
	bodyStyle:'padding:10px'
});

var win = new Ext.Window({
	title:'Message of the Day',
	draggable:false,
	modal:true,
	resizable:false,
	width:400,
	height:300,
	autoScroll:true,
	items:[ messagePanel ]
});
win.show();
</code>

We removed the html property from the window and added an items property which contains a panel as the only item. We configured the panel as a standard Ext panel widget and set its autoLoad property to load our message content. The message content will come from a server url which will provide us with a single message as an HTML fragment (in this case an HTML file, but it could be any server url). We also added some styling and scrolling so that the window looks nice.

Unfortunately, due to browser security restrictions, we will need to run our code on a server from here on out. I will leave that setup for you and your favorite IDE.

[caption id="attachment_825" align="alignright" width="300" caption="Message of the Day"]<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2010/11/mod_start.png"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2010/11/mod_start.png" alt="" title="MOD" width="300" height="229" class="size-full wp-image-825" /></a>[/caption]The figure to the right show the dialog that we have now. You can close the window with the X up in the top right corner; however, it would be nice to have a close button as well, so lets add one:

<code lang="JavaScript">
var closeButton = new Ext.Button({
	text:'Close',
	handler:function(){
		Ext.getCmp('mod-window').close();
	}
});</code>

This defines a simple close button that will close the window when it is clicked. The “mod-window” is added to our window as its id and the button is added to the window using it’s “buttons” property:

<code lang="JavaScript">
var win = new Ext.Window({
	id:'mod-window',
	buttons:[ closeButton ],
	...</code>

And to finish off, let’s add one of those “always show on startup” checkboxes so you can opt-out of the messages. Again, it’s pretty simple:

<code lang="JavaScript">
var modCheckbox = new Ext.form.Checkbox({
	boxLabel:'Always show on startup',
	checked:true
});</code>

which is added to the button bar as:

<code lang="JavaScript">buttons:[ modCheckbox, ' ', closeButton ]</code>

and we end up with:
[caption id="attachment_833" align="aligncenter" width="300" caption="Finished Dialog"]<img src="http://coffeaelectronica.com/blog/wp-content/uploads/2010/11/mod_final.png" alt="" title="MOD Dialog" width="300" height="229" class="size-full wp-image-833" />[/caption]

Now, step back and look at the JavaScript you have written to create this message box. It’s not bad, about 30 lines or so of fairly straight-forward JavaScript code. Consider that this is only one tiny part of your rich UI application which will probably consist of other dialogs, grids, lists, ajax calls, forms and a pile of other widgets. Applications developed using ExtJS, or any JavaScript framework for that matter, can explode into hundreds or thousands of lines of script code that, in general, are not really checked by a compiler and not usually unit tested... that’s scary.

But, don’t go searching for your binki just yet, there is hope. ExtJS provides a powerful means of packaging and componentizing your application so that your script code is more manageable and reusable, but that will be covered in the next installment.

<blockquote>Source code for this article can be found on GitHub at <a href="https://github.com/cjstehno/extjs-demo">extjs-demo</a>. The work up through the end of this posting is tagged as "setup" (if I figured out how to do tags correctly).
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>817</wp:post_id>
		<wp:post_date>2010-11-29 18:41:13</wp:post_date>
		<wp:post_date_gmt>2010-11-30 00:41:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>extjs-application-development-2-setup</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="extjs"><![CDATA[ExtJS]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ExtJS Application Development 3: Packaging</title>
		<link>http://coffeaelectronica.com/blog/2010/12/extjs-application-development-3-packaging/</link>
		<pubDate>Sat, 04 Dec 2010 02:37:32 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=841</guid>
		<description></description>
		<content:encoded><![CDATA[Continuing on from "<a href="http://coffeaelectronica.com/blog/2010/11/extjs-application-development-2-setup/">ExtJS Application Development 2: Setup</a>"…

Packaging in JavaScript is not really a new thing, many libraries have implemented it in one form or another over the years. ExtJS does it very well using namespaces.

The first thing we need for packaging, is to define our namespaces. Namespaces isolate your scripts so that they do not interact with each other or with 3rd-party libraries in unexpected ways. As an example, say you have two developers on a large team working on two different components. One is working on the Message of the Day and another is working on an Instant Messenger functionality... but they both create a panel called MessagePanel. Oops! Namespaces allow each of these developers to work in their own package per se, such as “myco.mod” and “myco.im” respectively so that they can work without colliding.

For our little example we will create a namespace called “demo.mod”, and it’s simple to do. At the top of your application.js file add one line (outside the onReady function):

<code lang="JavaScript">Ext.namespace('demo','demo.mod');</code>

From the tutorial, <a href="http://www.sencha.com/learn/Tutorial:Application_Layout_for_Beginners">Application Layout for Beginners</a>, we have the basic application object layout, which sets up the basic application object. Some of this, we have already done, below is what will replace our onReady function call (wiithout our widget code for now):

<code lang="JavaScript">
demo.app = function() {
    // do NOT access DOM from here; elements don't exist yet
    // private variables
    // private functions
    // public space
    return {
        // public properties, e.g. strings to translate
 
        // public methods
        init: function() {
            alert('Application successfully initialized');
        }
    };
}();</code>

This code provides a common place to access application properties, objects and methods. In order to install and initialize this object you need to add a line to the index.html file after all other JavaScript imports:

<code lang="html"><script type="text/javascript">Ext.onReady(demo.app.init, demo.app);</script></code>

This will load the app object when the page loads, and call its init function to get all of our application object installed. Now, we need to start adding back the pieces of our Message of the Day dialog. Just paste the content from the old onReady function into the new init function and you will end up with the same functionality, just setup a little different:

<code lang="JavaScript">
init: function() {
	var messagePanel = new Ext.Panel({
	  autoLoad:'message.html',
		bodyStyle:'padding:10px;'
	});

	var closeButton = new Ext.Button({
		text:'Close',
		handler:function(){
			Ext.getCmp('mod-window').close();
		}
	});

	var modCheckbox = new Ext.form.Checkbox({
		boxLabel:'Always show on startup',
		checked:true
	});

	var win = new Ext.Window({
		id:'mod-window',
	  title:'Message of the Day',
	  draggable:false,
	  modal:true,
	  resizable:false,
	  width:400,
	  height:300,
		autoScroll:true,
	  items:[ messagePanel ],
		buttons:[ modCheckbox, ' ', closeButton ]
	});
	win.show();
}</code>

It seems like we are going in the wrong direction, at this point. We actually have more code and complexity than we started with; however, the app object creation and packaging setup really only needs to be done once per page of your application so it’s pretty low impact. Also, we still have some refactoring to do with the Message of the Day component to take advantage of the packaging system.

Converting the component instances into their own component classes will have to wait until the next installment. Packaging is fairly simple to use, but very useful. It is also helpful to break your JavaScript up into multiple files based around functional groups, packages or even single components, similar to the Java one-class-one-file idea.

<blockquote>Source code for this article can be found on GitHub at <a href="https://github.com/cjstehno/extjs-demo/tree/packaging">extjs-demo</a>. The work up through the end of this posting is tagged as “packaging”.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>841</wp:post_id>
		<wp:post_date>2010-12-03 20:37:32</wp:post_date>
		<wp:post_date_gmt>2010-12-04 02:37:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>extjs-application-development-3-packaging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="extjs"><![CDATA[ExtJS]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ExtJS Application Development 4: Components</title>
		<link>http://coffeaelectronica.com/blog/2010/12/extjs-application-development-4-components/</link>
		<pubDate>Sat, 18 Dec 2010 16:39:50 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=846</guid>
		<description></description>
		<content:encoded><![CDATA[Finishing up from "<a href="http://coffeaelectronica.com/blog/2010/12/extjs-application-development-3-packaging/">ExtJS Application Development 3: Packaging</a>"...

On of the nicest features of ExtJS is, by far, its component and extension framework. It provides a rich set of available UI and data components and an unparalleled means of building on top of them. More information can be found by reading the tutorial: <a href="http://www.sencha.com/learn/Manual:Component:Extending_Ext_Components">Extending Ext Components</a> at Sencha's web site.

When we left off, we had a bunch of code specific to a single component, dropped right in the init function of our app. Let’s clean that up and take advantage of the packaging. Create a new JavaScript file called “demo.mod.ModDialog.js”. Be sure to add this new JS file to your index.html page just before the initialization script. Putting your components into different JavaScript files can really help to organize your project and help keep things reusable and manageable.

The ModDialog is just an extension of the Ext.Window object so in the new script file, let’s start out by defining it as such:

<code lang="JavaScript">
demo.mod.ModDialog = Ext.extend( Ext.Window, {
    id:'mod-window',
    title:'Message of the Day',
    draggable:false,
    modal:true,
    resizable:false,
    width:400,
    height:300,
    autoScroll:true
});</code>

The code in the app init function for the window instantiation becomes:

<code lang="JavaScript">
var win = new demo.mod.ModDialog({
  items:[ messagePanel ],
  buttons:[ modCheckbox, ' ', closeButton ]
});
win.show();</code>

Notice, that we changed the constructor to use the new component, while we left the items and buttons properties here because we will be handling these differently. This does show you a basic idea of how you can still override and configure your extended component in the same manner as its parent component.

There is a shortcut notation for defining instances of components in ExtJS, using JSON notation. For instance, we can represent our close buttons in a slightly simpler manner as:

<code lang="JavaScript">
var closeButton = {
	text:'Close',
	handler:function(){
		Ext.getCmp('mod-window').close();
	}
};</code>

Where this really becomes useful is over in the demo.mod.ModDialog.js file, where we can move our button config over using the JSON notation for the button and the checkbox as:

<code lang="JavaScript">
demo.mod.ModDialog = Ext.extend( Ext.Window, {
    id:'mod-window',
    title:'Message of the Day',
    draggable:false,
    modal:true,
    resizable:false,
    width:400,
    height:300,
    autoScroll:true,
    buttons:[
        {
            xtype:'checkbox',
            boxLabel:'Always show on startup',
            checked:true
        },
        ' ',
        {
            text:'Close',
            handler:function(){
                Ext.getCmp('mod-window').close();
            }
        }
    ]
});</code>

You may notice the xtype property being set in the checkbox definition. The xtype is a property used to determine the type of component being instantiated. Most containers have a default set, such as the buttons property; however, since we are adding a checkbox, we need to specify it as such so that a button is not created instead.

When we try to do a similar move for the message panel definition, we run into problems. The items property is one of those that you must usually set in the initComponent function of your extended object (refer to the documenation for more information Extending Ext Components). With that in mind we can then add an initComponent function and place the panel definition in it:

<code lang="JavaScript">
initComponent: function(){
	Ext.apply(this, {
		items:[
			{
				autoLoad:'message.html',
				bodyStyle:'padding:10px;'
			}
		]
	});
	demo.mod.ModDialog.superclass.initComponent.apply(this, arguments);
}</code>

We end up with an application.js file looking like:

<code lang="JavaScript">
// Path to the blank image must point to a valid location on your server
Ext.BLANK_IMAGE_URL = 'js/ext/resources/images/default/s.gif';

Ext.namespace('demo', 'demo.mod');

demo.app = function() {
    // do NOT access DOM from here; elements don't exist yet
    // private variables
    // private functions
    // public space
    return {
        // public properties, e.g. strings to translate

        // public methods
        init: function() {
            var win = new demo.mod.ModDialog();
            win.show();
        }
    };
}();</code>

and a demo.mod.ModDialog.js file looking like:

<code lang="JavaScript">
demo.mod.ModDialog = Ext.extend( Ext.Window, {
    id:'mod-window',
    title:'Message of the Day',
    draggable:false,
    modal:true,
    resizable:false,
    width:400,
    height:300,
    autoScroll:true,
    buttons:[
        {
            xtype:'checkbox',
            boxLabel:'Always show on startup',
            checked:true
        },
        ' ',
        {
            text:'Close',
            handler:function(){
                Ext.getCmp('mod-window').close();
            }
        }
    ],

    initComponent: function(){
        Ext.apply(this, {
            items:[
                {
                    autoLoad:'message.html',
                    bodyStyle:'padding:10px;'
                }
            ]
        });
        demo.mod.ModDialog.superclass.initComponent.apply(this, arguments);
    }
});</code>

And, I guess for completeness, the index.html file ends up as:

<code lang="html">
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<link rel="stylesheet" type="text/css" href="js/ext/resources/css/ext-all.css">

		<script type="text/javascript" src="js/ext/adapter/ext/ext-base.js"></script>
		<script type="text/javascript" src="js/ext/ext-all-debug.js"></script>
		<script type="text/javascript" src="js/application.js"></script>
        <script type="text/javascript" src="js/demo.mod.ModDialog.js"></script>

        <script type="text/javascript">Ext.onReady(demo.app.init, demo.app);</script>

		<title>Ext Demo</title>
	</head>
	<body></body>
</html></code>

True, we may end up with more code with this method; however, you have gained a great deal of structure, which is especially handy in JavaScript development. You can keep yourself to a single component per file paradigm, or you can simply group sub-components with a major component. 

<div style="float:right"><iframe src="http://rcm.amazon.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=coffeael-20&o=1&p=8&l=as1&m=amazon&f=ifr&md=10FE9736YVPPT7A0FBG2&asins=1935182110" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe></div>

As you add more and more script to your application, you will find it much more managable this way. 

Also, should you need a Message of the Day dialog in another project or for a different part of your app, you have only to bring the file over and use it (with your ExtJS setup of course).

Well, that's it for this introductory tour of ExtJS. I hope this has provided a decent starting point. I am doing a lot of ExtJS development right now and am currently reading <a href="http://www.amazon.com/gp/product/1935182110?ie=UTF8&tag=coffeael-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=1935182110">Ext JS in Action</a><img src="http://www.assoc-amazon.com/e/ir?t=coffeael-20&l=as2&o=1&a=1935182110" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;display:none" /> so I am sure I will have more postings soon.

<blockquote>Source code for this article can be found on GitHub at extjs-demo. The work up through the end of this posting is tagged as “<a href="https://github.com/cjstehno/extjs-demo/tree/component">component</a>”.</blockquote>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>846</wp:post_id>
		<wp:post_date>2010-12-18 10:39:50</wp:post_date>
		<wp:post_date_gmt>2010-12-18 16:39:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>extjs-application-development-4-components</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="extjs"><![CDATA[ExtJS]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>238</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Peacock]]></wp:comment_author>
			<wp:comment_author_email>andrew@automateyourbusiness.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.14.24.92</wp:comment_author_IP>
			<wp:comment_date>2011-03-03 05:43:23</wp:comment_date>
			<wp:comment_date_gmt>2011-03-03 11:43:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great series of posts on ExtJS. I'm using a lot, but the "best practice" of how to structure apps is missing. I've learned some good ideas from your posts. Keep 'em coming!

Andy]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>And So Begins A New Year</title>
		<link>http://coffeaelectronica.com/blog/2011/01/and-so-begins-a-new-year/</link>
		<pubDate>Wed, 05 Jan 2011 14:45:21 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=869</guid>
		<description></description>
		<content:encoded><![CDATA[Welcome to 2011. 

With the start of a new year, I have been thinking about what kind of direction I want to take this blog. Is blogging even relevant any longer? Is there a better way to provide this content in a meaningful and searchable manner? These are things I need to consider going forward. 

I have thought about producing longer format versions or collections of some of my postings in either PDF or epub format, perhaps at a small cost. The original postings would still remain; however, the "published" versions would have more details and deeper investigation into the topic at hand.

I have also added a Donate button to the site. I am trying to cut unnecessary expenses this year, so if the hosting and blogging platform can't start paying for themselves I will have to move them to a free blogging tool. We will see how it goes. 

I have no plans to stop blogging or to take my content down. The worst case scenario would be that I move to a free tool and have to import all my posts (and break the existing urls).

Feel free to post a comment about your thoughts or suggestions about the direction I should take this.

Happy New Year!

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>869</wp:post_id>
		<wp:post_date>2011-01-05 08:45:21</wp:post_date>
		<wp:post_date_gmt>2011-01-05 14:45:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>and-so-begins-a-new-year</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Casualty of the IDE war</title>
		<link>http://coffeaelectronica.com/blog/2011/01/casualty-of-the-ide-war/</link>
		<pubDate>Thu, 06 Jan 2011 15:25:49 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=871</guid>
		<description></description>
		<content:encoded><![CDATA[Okay, I will admit it... IntelliJ is superior, perhaps even enough to fork over $150/yr to use it... perhaps! Yes, its ends up being about $150 per year since you pay per version and they release about one new version per year. And, no, it's not just the price of doing business. That money comes out of my pocket and there are much more interesting things that I would rather spend it on. You are welcome to donate to my IDE fund (see button to the right). :-)

I hardly do any actual Java development any more. My personal and work projects have all been Groovy/Grails and JavaScript for the past few months, and will be the same going forward. Eclipse is terrible at Groovy and doesn't handle Grails at all unless you use STS, and that is not much better. I have been using NetBeans mostly since it is pretty solid and does an all-around good job; however, I have been giving IntelliJ a real try... and I have to say I am impressed.

I like using one IDE for everything; it really enables you to get best experience, and as those of you who know me should attest, I tend to dig into my software and really become a power user. So, if I am going to move away from Eclipse, it's got to be in a direction that has some potential.

IntelliJ will take some getting used to, and I will have to switch over to it's default key mappings (instead the Eclipse mapping training wheels), but that's all part of the fun.

Eclipse has started to annoy me over the last couple of years. The platform seems to be getting too bloated and there seems to be less focus on core coding and more on new sideline features that most developers may never even get to use.

I have a few more days of my free trial to decide.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>871</wp:post_id>
		<wp:post_date>2011-01-06 09:25:49</wp:post_date>
		<wp:post_date_gmt>2011-01-06 15:25:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>casualty-of-the-ide-war</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="ide"><![CDATA[IDE]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>170</wp:comment_id>
			<wp:comment_author><![CDATA[David Winterbourne]]></wp:comment_author>
			<wp:comment_author_email>dave.winterbourne@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.230.57.252</wp:comment_author_IP>
			<wp:comment_date>2011-01-06 18:03:05</wp:comment_date>
			<wp:comment_date_gmt>2011-01-07 00:03:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes! Welcome to the bright side. IntelliJ has been my go-to editor for quite a while. I have gone back and forth between IntelliJ and Eclipse several times, so I have some experience in this arena, and I find that more often than not IntelliJ does not get in the way of my coding. The maven plugin works perfectly, the Perforce integration is seemless, and yes, when I did Groovy/Grails development, there was just no worthwhile alternative. Eclipse completely sucked at Groovy dev, but IntelliJ works the way you expect an IDE to work - even does an impressive job with code completion. That's a neat trick with a dynamic language!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>220</wp:comment_id>
			<wp:comment_author><![CDATA[Christopher J. Stehno]]></wp:comment_author>
			<wp:comment_author_email>chris.stehno@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://ChrisStehno.info</wp:comment_author_url>
			<wp:comment_author_IP>24.238.207.158</wp:comment_author_IP>
			<wp:comment_date>2011-02-09 14:01:10</wp:comment_date>
			<wp:comment_date_gmt>2011-02-09 20:01:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[In case anyone cares... I paid my dues and purchased a license of IntelliJ. It didn't hurt that bad and it really has made my life easier.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>GitHub 404</title>
		<link>http://coffeaelectronica.com/blog/2011/01/github-404/</link>
		<pubDate>Sun, 09 Jan 2011 04:18:29 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=874</guid>
		<description></description>
		<content:encoded><![CDATA[I got a 404 from GitHub today and found it quite amusing...
<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2011/01/github404.png"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2011/01/github404-300x148.png" alt="" title="github404" width="300" height="148" class="alignnone size-medium wp-image-875" /></a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>874</wp:post_id>
		<wp:post_date>2011-01-08 22:18:29</wp:post_date>
		<wp:post_date_gmt>2011-01-09 04:18:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>github-404</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="humor"><![CDATA[Humor]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Adding Favicons to your Links</title>
		<link>http://coffeaelectronica.com/blog/2011/02/adding-favicons-to-your-links/</link>
		<pubDate>Wed, 09 Feb 2011 23:50:32 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=880</guid>
		<description></description>
		<content:encoded><![CDATA[I have started working on a new browser start page for myself and thought it would be nice to have the favicon images for the links I add to the page. Obviously, you could just download them and render them next to the link by brute force, but then you'd have to do that for every link you added... a big waste of time. I thought about it for a few minutes and came up with an automated solution that works pretty well.

You know the path to the favicon for a given url; it's just thesite.com/favicon.ico, though there are ways to change this that I am not accounting for. With a little JQuery JavaScripting you can pull the icon from the link itself.

First, we need to style the external anchor tags in preparation for the icon:

<code lang="css">
a[href^="http://"]{
	background-repeat:no-repeat;
	background-position:left;
	padding-left:17px;
}
</code>

This will cause all anchor tags with an href starting with "http://" (external) to be left-padded and have some additional background configuration. This basically adds a blank spot for the icon.

Now we need some JavaScript to pull the icon for the link:

<code lang="JavaScript">
jQuery(function(){
	$('a[href^="http"]').each(function(it){
		var url = $(this).attr('href');
		
		var slashIndex = url.indexOf('/',7);
		if( slashIndex != -1 ){
			url = url.substring(0, slashIndex);
		} 
		
		$(this).css('background-image',"url('" + url + "/favicon.ico')");
	});
});
</code>

Using JQuery, I find each of the external anchor tags, and ignoring the path part of the url, I set the "background-image" property of the anchor to be the favicon url. And that's it.

Below is the full example:

<code lang="html">
<html>
	<head>
		<title>Test</title>
		<style type="text/css">
			a[href^="http://"]{
				background-repeat:no-repeat;
				background-position:left;
				padding-left:17px;
			}
		</style>
		<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.0/jquery.min.js"></script>
		<script type="text/javascript">
			jQuery(function(){
				$('a[href^="http"]').each(function(it){
					var url = $(this).attr('href');
					
					var slashIndex = url.indexOf('/',7);
					if( slashIndex != -1 ){
						url = url.substring(0, slashIndex);
					} 
					
					$(this).css('background-image',"url('" + url + "/favicon.ico')");
				});
			});
		</script>
	</head>
	<body>

		This is some text surrounding <a href="http://jqueryui.com">JQuery UI</a> the link I am playing with. Also I will 
		add another link <a href="http://google.com">Google</a>. More <a href="http://jqueryui.com/demos/">Demos</a>.
		Local links like <a href="local.html">this</a> will be unchanged.
		
	</body>	
</html>
</code>

When you render this example, you will get something like the following image.

[caption id="attachment_882" align="aligncenter" width="581" caption="External links with their own icons."]<img src="http://coffeaelectronica.com/blog/wp-content/uploads/2011/02/href-icons.png" alt="" title="href-icons" width="581" height="62" class="size-full wp-image-882" />[/caption]

I am sure there are tweaks that could be done and other scenarios to consider, but this is an iteresting starting point.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>880</wp:post_id>
		<wp:post_date>2011-02-09 17:50:32</wp:post_date>
		<wp:post_date_gmt>2011-02-09 23:50:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>adding-favicons-to-your-links</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[JQuery]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>You Found a Bug, Now What?</title>
		<link>http://coffeaelectronica.com/blog/2011/02/you-found-a-bug-now-what/</link>
		<pubDate>Sat, 19 Feb 2011 14:38:02 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=888</guid>
		<description></description>
		<content:encoded><![CDATA[With the increasing use of online technologies non-tech users are more likely to run into issues and bugs. Most standard users of a shopping site or social networking site have no knowledge of how to properly submit a bug report, which is why as developers we end up with bug submissions like, "the cart doesn't work" or "my bar is gone"... completely useless. It's not really the user's fault, they have never been taught how to file a bug report. So, for techies and non-techies alike, here is a simple tutorial on how to properly submit a bug report.

<strong>Where to Submit</strong>

You have found an issue or bug with an online application, now the first thing you need to do is figure out how to go about submitting a report to the company and their developers. Unfortunately, a lot of sites fall short on providing this functionality. You want to look for "Contact us", "Help", or "Customer Support". The best thing would be an actual bug submission form, but few user-facing sites have those. So you are probably stuck with email or a text field submission form. Once you have found that, you need to figure out what to submit. A point of note, write up your report in a text editor or word processor beforehand so that you have everything ready. The last thing you want is to spend 30 min typing in their textbox and have your session time out so that you lose it all without actually submitting anything.

<strong>The Summary</strong>

Start off the submission with a summary of what you were doing when you found the issue and what you experienced. What part of the site/application were you using? Had you entered any data or performed any actions that may be useful to someone trying to recreate the issue. That is one of the biggest problems while trying to fix issues from users: Developers must be able to recreate the issue you found in order to fix it. This summary should be about a paragraph, but at least a few sentences.

<strong>The Details</strong>

Your issue is more likely to be fixed (and the developers will love you) if you provide the following details in your submission
<ul>
<li>Time - what time the problem occurred (giving a state or timezone is also helpful if its a national or global site)</li>
<li>Browser - what browser and version you were using. The main browsers are Chrome, FireFox, and IE. The version can be found in the About menu of the browser.</li>
<li>Operating System - what OS and version is your computer running. The main OSes for normal users are Windows and Mac. It's helpful if you know what version it is as well.</li>

<strong>Bonus</strong>

If you can, try to take a screenshot of the error/problem. You can use the PrintScreen key and an image editor to trim down a nice screen shot. Most likely you won't be able to include a screen shot due to file attachment restrictions. If that is the case, you should try and send a text copy of the error message in the submission. This often gives the developers something to search for in the code.

<strong>Example</strong>

So, as an example, say I was shopping on GeekStuff.com and found a problem. I would find their Contact Us page and submit the following information in their textbox.

<blockquote>
Hello, I was shopping on your site today and from the "Geeky T's" list, I clicked on the "Monkey Python" shirt link. When the page opened it was just a white product page surrounded by your menu borders. This happened every time I tried loading the page.
I have a screenshot but am unable to submit it through your form. You are welcome to contact me at this email address should you require more information.

Time: about 6pm central time
Browser: Chrome v9.0.597.98
OS: Windows 7 (64-bit)
</blockquote>

Companies are all about getting product to market and they seldom put in all the required time to fully test their applications. You can help make things better by filing a bug report when you find an issue.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>888</wp:post_id>
		<wp:post_date>2011-02-19 08:38:02</wp:post_date>
		<wp:post_date_gmt>2011-02-19 14:38:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>you-found-a-bug-now-what</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<category domain="post_tag" nicename="tidbits"><![CDATA[Tidbits]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Too Groovy</title>
		<link>http://coffeaelectronica.com/blog/2011/02/too-groovy/</link>
		<pubDate>Thu, 24 Feb 2011 12:20:32 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=893</guid>
		<description></description>
		<content:encoded><![CDATA[I have been doing a lot of Groovy development for almost a year now and after seeing a lot of my own code as well as others, I have realized that we (myself and the people I work with at least) have been fighting ourselves with our own code. 

Let's start with a common downside of Groovy... lack of tool support. This is both a consequence of the language and in some cases a slow-moving IDE community. Add on top of that less-experienced Groovy developers who tend to embrace the language to an (sometimes overly) high degree. When you have code like this:

<code lang='Groovy'>
class Foo {
	def name
	
	def sayHello = { n->
		println "Hello, $n"
	}
}
</code>

Ultimately, there is nothing wrong with this code. It's beautifully concise Groovy. Now consider this in a Grails service class or something with a lot more functionality around it and a lot more going on. Your IDE becomes a fancy and/or expensive text editor.

After working like this for a while, I came to the realization that Groovy doesn't have to be as far from Java as possible. We should actually take the best of both worlds and reap the most benefit. If you write the previous code as:

<code lang='Groovy'>
class Foo {
	String name
	
	void sayHello( String n ){
		println "Hello, $n"
	}
}
</code>

With a few changes, we now get some IDE support since you have given it more actual data to work with. We have also made it easier for other developers to understand the intentions of the methods and paramters. 

I remember being overjoyed when Java 5 added typed collections so that you could stop guessing what was being stored in them. Now, we have put ourselves right back into that situration, and even worse... now, you can even lose return types, parameter types and variable types. It's the hammer and nail scenario again. Just because Groovy lets you do everything type-less, doesn't mean you have to develop that way.

The following code, shows how you can have the Groovy goodness without losing the solid Java foundation:

<code lang="Groovy">
private void catchAndLog( String msg, op ){
	try {
		op()
	} catch( e ){
		log.error msg, e
	}
}
</code>

Use the features that Groovy provides, but keep the good parts of Java that make your IDE and other developers more useful. I am compiling a set of my own personal practices to aid in achieving that end. I will post them when I have a good set together.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>893</wp:post_id>
		<wp:post_date>2011-02-24 06:20:32</wp:post_date>
		<wp:post_date_gmt>2011-02-24 12:20:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>too-groovy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My Timesink</title>
		<link>http://coffeaelectronica.com/blog/2011/05/my-timesink/</link>
		<pubDate>Thu, 05 May 2011 01:33:06 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=897</guid>
		<description></description>
		<content:encoded><![CDATA[I have not been blogging much in the past few months. I do have a few ideas for posts, but I have been spending most of my free time trying to get <a href="https://github.com/cjstehno/MyMdb">My Movie Database</a> up and running. It's still very much an alpha product and it has a long way to go, but it's been great fun working on it. I figured it's about time I shared a screenshot.

It's basically a movie (DVD/BluRay) organizer for people who have too many movies. We have been collecting disks for a long time and even with index boxes it was still very hard to actually find anything you wanted. That's where this project came in. It will hopefully bring some order to chaos... maybe even before the disk formats are obsolete.

If you are interested in the "under the hood details"... its Groovy/Grails with an ExtJS interface, running on Tomcat 6 and MySql in "production".

[caption id="attachment_898" align="aligncenter" width="600" caption="Main MyMdb Screen"]<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2011/05/mymdb_screen.png"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2011/05/mymdb_screen.png" alt="" title="mymdb_screen" width="600" height="418" class="size-full wp-image-898" /></a>[/caption]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>897</wp:post_id>
		<wp:post_date>2011-05-04 20:33:06</wp:post_date>
		<wp:post_date_gmt>2011-05-05 01:33:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-timesink</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="extjs"><![CDATA[ExtJS]]></category>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="projects"><![CDATA[Projects]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why I Converted My Nook Color to a Tablet</title>
		<link>http://coffeaelectronica.com/blog/2011/05/why-i-converted-my-nook-color-to-a-tablet/</link>
		<pubDate>Sat, 14 May 2011 14:06:25 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=903</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="attachment_905" align="alignright" width="225" caption="Gingerbread Nook"]<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2011/05/gingerbread-nook.jpg"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2011/05/gingerbread-nook-225x300.jpg" alt="" title="gingerbread-nook" width="225" height="300" class="size-medium wp-image-905" style="padding:10px" /></a>[/caption]After using the original <a href="http://www.barnesandnoble.com/nook/index.asp?PID=34323&cds2Pid=35700#logo">eInk Nook</a> for about a year, I decided to upgrade to a shiny new <a href="http://www.barnesandnoble.com/nookcolor/?cds2Pid=35700#logo">Nook Color</a>. I won't go into the comparison of the two Nooks, they are really in two different leagues. What I will discuss is my overall thoughts about the Nook Color (all based on the Nook Color after the recent update and app store addition):

<strong>Pros</strong>
<ul>
<li>Browser - the web browser is very nice. Also, since the recent update, it supports flash.</li>
<li>Email - it has a basic, but usable, email client.</li>
<li>Excellent BN eBook support - the integration with BN's online store and the overall reading experience is great</li>
</ul>

<strong>Cons</strong>
<ul>
<li>Moderated App Store - I guess BN hasn't learned from Apple as far as app stores go. Out of the 100-ish apps available, there are maybe two or three that are of any use. I looked at their SDK, and to put an app on the BN app store, you need to modify your app to use their custom Android SDK modifications. I see this as a big roadblock in itself, but BN also says that they want to limit apps to reading-centric content. The bottom line. I will be surprised if their app store gets most of the well-known apps.</li>
<li>Annoyance - page transitions were just jumps before the update, and after are simple page slides. It seems odd when the phone version (same underlying OS) uses a nice page curl effect.</li>
<li>Magazines and Newspapers are horrible. With all the hype BN had put around these, I expected a slick nice-looking ezine experience, when in reality all they are is epubs with no flair at all.</li>
</ul>

Considering all these factors, I decided that I would try to set my Nook free and put a more standard Android version on it. <a href="http://cyanogenmod.com">Cyanogen Mod</a> has support for running <a href="http://www.cyanogenmod.com/devices/nook-color">Android 2.3 (gingerbread) on the Nook Color</a> so I gave it a shot. It was a bit time consuming, but the actual process was very straight-forward and easy.

I now have a 7in wifi-only tablet running Android 2.3. It has any app I want to install from the marketplace, though there have been a couple that look funky... and of course, the NC has no camera, GPS, or microphone so apps that require those are out. The Nook app works, as does the Kindle, Aldiko and Google books apps. So, really I have turned it into an eReading powerhouse. 

If you want an inexpensive tablet with decent hardware and you don't need all the bells and whistles, this is an interesting option for you. Even if I never use this for much more than book reading... at least I can now read books from anywhere.

If anyone wants to buy a gently used eInk Nook "classic", send me an email.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>903</wp:post_id>
		<wp:post_date>2011-05-14 09:06:25</wp:post_date>
		<wp:post_date_gmt>2011-05-14 14:06:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why-i-converted-my-nook-color-to-a-tablet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="technology"><![CDATA[Technology]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>260</wp:comment_id>
			<wp:comment_author><![CDATA[Martin de Kovel]]></wp:comment_author>
			<wp:comment_author_email>madeko1@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>41.211.225.128</wp:comment_author_IP>
			<wp:comment_date>2011-05-26 09:13:52</wp:comment_date>
			<wp:comment_date_gmt>2011-05-26 14:13:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good article, I am not an expert but love to fiddle around with my laptop. I have a nookcolor which i like very much. I had a Sony ereader before.Managed, after many failures, to transfer the books from the sony (as pdf)to the nookcolor. Two things I am still trying to solve:the books do not fit the screen and the sliding of the pages(great) do not work? Where do I go wrong?? Please your answer, eventually, should bear in mind I am a novice but not too much.
Also to do the same to Sony books to get them on ipad ( my wife's)
I guarantee you I will donate if your answer, if one comes and works, generously. My word as an honest Dutchman]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>UI Mock-ups</title>
		<link>http://coffeaelectronica.com/blog/2011/05/ui-mock-ups/</link>
		<pubDate>Mon, 16 May 2011 23:30:45 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=910</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://coffeaelectronica.com/blog/wp-content/uploads/2011/05/mockup.png"><img src="http://coffeaelectronica.com/blog/wp-content/uploads/2011/05/mockup-300x266.png" alt="" title="Sample Mock-up" width="300" height="266" class="alignright size-medium wp-image-911" /></a>Something I have really embraced lately is user interface mockups. I have been doing a lot of UI development at work and during out last release we had a good deal of interface churn. There were a lot of last minute changes, questions about standards, guidelines, and consistency across the whole UI. So, I took up the torch and suggested we start doing mockups for all UIs, with design discussion and approval meetings before development so that we can at least have some level of consensus before moving forward. This sounds like common sense, but you know how it can be... sometimes the obvious can hide out for a long time, and the company I work for is not really a UI-centric company so it has not been as much of a concern.

Part of the new UI design process is the use of mockups to provide a sketch of the new or modified UI. I did some research and use-testing before I settled on <a href="http://www.balsamiq.com/">Balsamiq</a> as our mockup tool of choice. There are others available and even some free options; however, none of the others had the depth of features and the wide collection of predefined widget templates that Balsamiq has.

If you are unfamiliar with doing mock-ups, I suggest you give it a try. You may think that it's a waste of time doing a mock-up in this sketchy form (such as in the image); however, what you gain is a conceptual overview of what your UI is going to look like without causing any confusion as to it only being a mock-up. There is a common problem when doing mock-ups or demos of a UI using more realistic images, or actual UI framework click-through... they can look too real and give viewers the false notion that you are already "most of the way there" which can have you back-pedaling to explain that this is only a mock-up. With the sketchy look, its very clear.

Yes, you can also do this kind of work on a white board or paper, but this approach gives you a nice set of tools/widgets to work with and also allows you to easily add the diagrams to other design documents or to store them in version control. What I have been doing at work is putting my mock-ups in my design wiki page and then replacing the mock-up image with a real screenshot of the item once it has been implemented. This approach combined with mock-ups has really made the design process a lot more stable and has helped to highlight issues that we normally wouldn't have run into other than during development.

As a side note, I have also found this to be useful in describing UI techniques to other developers without requiring the time to build a whole UI, some of my future blog posts will utilize this.

Finally, if you are not doing all that many mock-ups or just want to keep things free, the <a href="http://pencil.evolus.vn/">Pencil Project</a> is a nice tool that I used before moving to Balsamiq.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>910</wp:post_id>
		<wp:post_date>2011-05-16 18:30:45</wp:post_date>
		<wp:post_date_gmt>2011-05-16 23:30:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ui-mock-ups</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="post_tag" nicename="mockup"><![CDATA[mockup]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Working on Personal Projects, Without Going Insane</title>
		<link>http://coffeaelectronica.com/blog/2011/06/working-on-personal-projects-without-going-insane/</link>
		<pubDate>Sat, 04 Jun 2011 00:04:23 +0000</pubDate>
		<dc:creator>cjstehno</dc:creator>
		<guid isPermaLink="false">http://coffeaelectronica.com/blog/?p=915</guid>
		<description></description>
		<content:encoded><![CDATA[As the graveyard that is my <a href="http://github.com/cjstehno">GitHub</a> repository will show, I have had a lot of little projects that went nowhere... and those are just the few that had some useful code. There are just as many which were completely deleted out of frustration or embarrassment over the years. For those of you, like me, who's work and hobby are fortunately or unfortunately the same, there is hope.

The first thing I struggled with was time. I never felt that I had enough time to actually do anything useful on my own time. Honestly, I never realized how much time I used to spend playing games and watching TV or engaged in other less interesting pursuits; it's really amazing how little time it takes to accomplish something. Even an hour or two here and there can make a difference in your project. Just be realistic about it and choose projects and technologies that you are interested in and enjoy working with.

For me it always works best to keep your goals in mind and down to earth. My big project started off as a general need in our household. I literally spent a couple years going around and around on how to implement it in "my limited spare time". Finally, I just gave in and picked some technologies that I felt work be fun and productive and dove in. If you start off trying to write the next big thing, you will get frustrated and probably bail out because that goal is too big and too far off. You can actually use some Agile methodologies at home to break things down into presentable chunks that provide you with a short reward cycle. I have noticed that the longer I have features "in dev" the more I start get get down on the project. It's like it does not feel right and worth it unless I am actually releasing the application on a somewhat regular basis.

I have heard at times that "at home" projects are not really countable as experience since you have no real demands or requirements. I would disagree with that as a blanket statement. Sure, you have a lot more flexibility with your own project, but you still will see the outcome of your decisions good or bad. I have learned quite a bit with my big project, most notably on the use case testing side. I am trying to become a better use case tester, and having to test my own project is actually helping quite a bit. Also, knowing that my wife will be using the app helps... you don't want to give a shoddy app to the missus. It doesn't hurt that I use the same technologies at both work and home as well, since it keeps you sharp.

Sometimes, you will need to step away and take a break. You can go back to games, reading, or other personal activities if you feel that you are stuck on something or need some variety. Just know that your project is waiting for you. It's like how some guys have that old car in the garage that the tinker with every now and then. My car is just made of text and bits.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>915</wp:post_id>
		<wp:post_date>2011-06-03 19:04:23</wp:post_date>
		<wp:post_date_gmt>2011-06-04 00:04:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>working-on-personal-projects-without-going-insane</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[Development]]></category>
		<category domain="category" nicename="programming"><![CDATA[Programming]]></category>
		<category domain="post_tag" nicename="projects"><![CDATA[Projects]]></category>
		<category domain="post_tag" nicename="thoughts"><![CDATA[Thoughts]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
